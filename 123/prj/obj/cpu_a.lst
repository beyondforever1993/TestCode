


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                                uC/CPU
    3 00000000         ;                                    CPU CONFIGURATION &
                        PORT LAYER
    4 00000000         ;
    5 00000000         ;                          (c) Copyright 2004-2011; Micr
                       ium, Inc.; Weston, FL
    6 00000000         ;
    7 00000000         ;               All rights reserved.  Protected by inter
                       national copyright laws.
    8 00000000         ;
    9 00000000         ;               uC/CPU is provided in source form to reg
                       istered licensees ONLY.  It is 
   10 00000000         ;               illegal to distribute this source code t
                       o any third party unless you receive 
   11 00000000         ;               written permission by an authorized Micr
                       ium representative.  Knowledge of 
   12 00000000         ;               the source code may NOT be used to devel
                       op a similar product.
   13 00000000         ;
   14 00000000         ;               Please help us continue to provide the E
                       mbedded community with the finest 
   15 00000000         ;               software available.  Your honesty is gre
                       atly appreciated.
   16 00000000         ;
   17 00000000         ;               You can contact us at www.micrium.com.
   18 00000000         ;*******************************************************
                       *************************************************
   19 00000000         
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;
   22 00000000         ;                                            CPU PORT FI
                       LE
   23 00000000         ;
   24 00000000         ;                                            ARM-Cortex-
                       M3
   25 00000000         ;                                      RealView Developm
                       ent Suite
   26 00000000         ;                            RealView Microcontroller De
                       velopment Kit (MDK)
   27 00000000         ;                                       ARM Developer Su
                       ite (ADS)
   28 00000000         ;                                            Keil uVisio
                       n
   29 00000000         ;
   30 00000000         ; Filename      : cpu_a.asm
   31 00000000         ; Version       : V1.28.01.00
   32 00000000         ; Programmer(s) : BAN
   33 00000000         ;*******************************************************
                       *************************************************
   34 00000000         
   35 00000000         
   36 00000000         ;*******************************************************
                       *************************************************
   37 00000000         ;                                           PUBLIC FUNCT
                       IONS
   38 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   39 00000000         
   40 00000000                 EXPORT           CPU_IntDis
   41 00000000                 EXPORT           CPU_IntEn
   42 00000000         
   43 00000000                 EXPORT           CPU_SR_Save
   44 00000000                 EXPORT           CPU_SR_Restore
   45 00000000         
   46 00000000                 EXPORT           CPU_CntLeadZeros
   47 00000000                 EXPORT           CPU_RevBits
   48 00000000         
   49 00000000                 EXPORT           CPU_WaitForInt
   50 00000000                 EXPORT           CPU_WaitForExcept
   51 00000000         
   52 00000000         
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         
   57 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   58 00000000                 THUMB
   59 00000000                 REQUIRE8
   60 00000000                 PRESERVE8
   61 00000000         
   62 00000000         
   63 00000000         ;$PAGE
   64 00000000         ;*******************************************************
                       **************************************************
   65 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   66 00000000         ;
   67 00000000         ; Description : Disable/Enable interrupts.
   68 00000000         ;
   69 00000000         ; Prototypes  : void  CPU_IntDis(void);
   70 00000000         ;               void  CPU_IntEn (void);
   71 00000000         ;*******************************************************
                       **************************************************
   72 00000000         
   73 00000000         CPU_IntDis
   74 00000000 B672            CPSID            I
   75 00000002 4770            BX               LR
   76 00000004         
   77 00000004         
   78 00000004         CPU_IntEn
   79 00000004 B662            CPSIE            I
   80 00000006 4770            BX               LR
   81 00000008         
   82 00000008         
   83 00000008         ;*******************************************************
                       **************************************************
   84 00000008         ;                                      CRITICAL SECTION 
                       FUNCTIONS
   85 00000008         ;
   86 00000008         ; Description : Disable/Enable interrupts by preserving 
                       the state of interrupts.  Generally speaking, the



ARM Macro Assembler    Page 3 


   87 00000008         ;               state of the interrupt disable flag is s
                       tored in the local variable 'cpu_sr' & interrupts
   88 00000008         ;               are then disabled ('cpu_sr' is allocated
                        in all functions that need to disable interrupts).
   89 00000008         ;               The previous interrupt state is restored
                        by copying 'cpu_sr' into the CPU's status register.
   90 00000008         ;
   91 00000008         ; Prototypes  : CPU_SR  CPU_SR_Save   (void);
   92 00000008         ;               void    CPU_SR_Restore(CPU_SR  cpu_sr);
   93 00000008         ;
   94 00000008         ; Note(s)     : (1) These functions are used in general 
                       like this :
   95 00000008         ;
   96 00000008         ;                       void  Task (void  *p_arg)
   97 00000008         ;                       {
   98 00000008         ;                           CPU_SR_ALLOC();             
                               /* Allocate storage for CPU status register */
   99 00000008         ;                               :
  100 00000008         ;                               :
  101 00000008         ;                           CPU_CRITICAL_ENTER();       
                               /* cpu_sr = CPU_SR_Save();                  */
  102 00000008         ;                               :
  103 00000008         ;                               :
  104 00000008         ;                           CPU_CRITICAL_EXIT();        
                               /* CPU_SR_Restore(cpu_sr);                  */
  105 00000008         ;                               :
  106 00000008         ;                       }
  107 00000008         ;*******************************************************
                       **************************************************
  108 00000008         
  109 00000008         CPU_SR_Save
  110 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  111 0000000C B672            CPSID            I
  112 0000000E 4770            BX               LR
  113 00000010         
  114 00000010         
  115 00000010         CPU_SR_Restore                       ; See Note #2.
  116 00000010 F380 8810       MSR              PRIMASK, R0
  117 00000014 4770            BX               LR
  118 00000016         
  119 00000016         
  120 00000016         ;$PAGE
  121 00000016         ;*******************************************************
                       *************************************************
  122 00000016         ;                                         CPU_CntLeadZer
                       os()
  123 00000016         ;                                        COUNT LEADING Z
                       EROS
  124 00000016         ;
  125 00000016         ; Description : Counts the number of contiguous, most-si
                       gnificant, leading zero bits before the first 
  126 00000016         ;                   binary one bit in a data value.
  127 00000016         ;
  128 00000016         ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU_DATA  val
                       );
  129 00000016         ;
  130 00000016         ; Argument(s) : val         Data value to count leading 



ARM Macro Assembler    Page 4 


                       zero bits.
  131 00000016         ;
  132 00000016         ; Return(s)   : Number of contiguous, most-significant, 
                       leading zero bits in 'val'.
  133 00000016         ;
  134 00000016         ; Caller(s)   : Application.
  135 00000016         ;
  136 00000016         ;               This function is an INTERNAL CPU module 
                       function but MAY be called by application function(s).
  137 00000016         ;
  138 00000016         ; Note(s)     : (1) If the argument is zero, the value 3
                       2 is returned.
  139 00000016         ;
  140 00000016         ;               (2) MUST be implemented in cpu_a.asm if 
                       and only if CPU_CFG_LEAD_ZEROS_ASM_PRESENT is 
  141 00000016         ;                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
                       
  142 00000016         ;*******************************************************
                       *************************************************
  143 00000016         
  144 00000016         CPU_CntLeadZeros
  145 00000016 FAB0 F080       CLZ              R0, R0      ; Count leading zer
                                                            os
  146 0000001A 4770            BX               LR
  147 0000001C         
  148 0000001C         
  149 0000001C         ;*******************************************************
                       *************************************************
  150 0000001C         ;                                             REVERSE BI
                       TS
  151 0000001C         ;
  152 0000001C         ; Description : Reverses the bits in the argument.
  153 0000001C         ;
  154 0000001C         ; Prototypes  : CPU_DATA  CPU_RevBits (CPU_DATA  val)
  155 0000001C         ;
  156 0000001C         ; Argument(s) : val     variable to reverse
  157 0000001C         ;*******************************************************
                       *************************************************
  158 0000001C         
  159 0000001C         CPU_RevBits
  160 0000001C FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  161 00000020 4770            BX               LR
  162 00000022         
  163 00000022         
  164 00000022         ;$PAGE
  165 00000022         ;*******************************************************
                       *************************************************
  166 00000022         ;                                         WAIT FOR INTER
                       RUPT
  167 00000022         ;
  168 00000022         ; Description : Enters sleep state, which will be exited
                        when an interrupt is received.
  169 00000022         ;
  170 00000022         ; Prototypes  : void  CPU_WaitForInt (void)
  171 00000022         ;
  172 00000022         ; Argument(s) : none.
  173 00000022         ;*******************************************************
                       *************************************************
  174 00000022         



ARM Macro Assembler    Page 5 


  175 00000022         CPU_WaitForInt
  176 00000022 BF30            WFI                          ; Wait for interrup
                                                            t
  177 00000024 4770            BX               LR
  178 00000026         
  179 00000026         
  180 00000026         ;*******************************************************
                       *************************************************
  181 00000026         ;                                         WAIT FOR EXCEP
                       TION
  182 00000026         ;
  183 00000026         ; Description : Enters sleep state, which will be exited
                        when an exception is received.
  184 00000026         ;
  185 00000026         ; Prototypes  : void  CPU_WaitForExcept (void)
  186 00000026         ;
  187 00000026         ; Argument(s) : none.
  188 00000026         ;*******************************************************
                       *************************************************
  189 00000026         
  190 00000026         CPU_WaitForExcept
  191 00000026 BF20            WFE                          ; Wait for exceptio
                                                            n
  192 00000028 4770            BX               LR
  193 0000002A         
  194 0000002A         
  195 0000002A         ;$PAGE
  196 0000002A         ;*******************************************************
                       *************************************************
  197 0000002A         ;                                     CPU ASSEMBLY PORT 
                       FILE END
  198 0000002A         ;*******************************************************
                       *************************************************
  199 0000002A         
  200 0000002A                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\obj\cp
u_a.d -o.\obj\cpu_a.o -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\K
eil\ARM\Inc\NXP\LPC177x_8x --predefine="__MICROLIB SETA 1" --list=.\obj\cpu_a.l
st ..\src\uCOS\asm\cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 57 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_CntLeadZeros 00000016

Symbol: CPU_CntLeadZeros
   Definitions
      At line 144 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 46 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_CntLeadZeros used once
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 73 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 40 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 78 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 41 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_IntEn used once
CPU_RevBits 0000001C

Symbol: CPU_RevBits
   Definitions
      At line 159 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 47 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_RevBits used once
CPU_SR_Restore 00000010

Symbol: CPU_SR_Restore
   Definitions
      At line 115 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 44 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_SR_Restore used once
CPU_SR_Save 00000008

Symbol: CPU_SR_Save
   Definitions
      At line 109 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 43 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_SR_Save used once
CPU_WaitForExcept 00000026

Symbol: CPU_WaitForExcept



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 190 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 50 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_WaitForExcept used once
CPU_WaitForInt 00000022

Symbol: CPU_WaitForInt
   Definitions
      At line 175 in file ..\src\uCOS\asm\cpu_a.asm
   Uses
      At line 49 in file ..\src\uCOS\asm\cpu_a.asm
Comment: CPU_WaitForInt used once
9 symbols
340 symbols in table
