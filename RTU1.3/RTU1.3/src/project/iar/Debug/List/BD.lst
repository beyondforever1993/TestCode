###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      26/Mar/2017  12:36:46 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\BD.c                   #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\BD.c -lCN              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\BD.lst   #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\BD.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\HuaceApp\BD.c
      1          /**************************Copyright (C) 2003-2014. All rights reserved*********************************
      2          **                                  上海华测导航科技有限公司
      3          **                                  http://www.huace.cn
      4          **                                  Email:support@huace.cn
      5          **
      6          **--------------文件信息--------------------------------------------------------------------------------
      7          **文   件   名: BD.c
      8          **创   建   人: Z.X.F.
      9          **最后修改日期: 2015年04月11日
     10          **描        述: BD
     11          ********************************************************************************************************/
     12          
     13          
     14          #include "includes.h"
     15          
     16          
     17          #define MAX_BD_LENGTH 256 
     18          //static UINT8  MsgTmp_BD[MAX_BD_LENGTH];

   \                                 In section .bss, align 4
     19          static unsigned char  MsgTmp_BD[MAX_BD_LENGTH];// 转发缓冲
   \                     MsgTmp_BD:
   \   00000000                      DS8 256
     20          
     21          //static unsigned char tmp_buf[256];
     22          

   \                                 In section .bss, align 4
     23          bd_para_t bd_para;
   \                     bd_para:
   \   00000000                      DS8 20
     24          

   \                                 In section .bss, align 1
     25          static unsigned char RecFlag = 0x00;
   \                     RecFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     26          static unsigned short  MsgLength;
   \                     MsgLength:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     27          static unsigned short  RdSpTmp;
   \                     RdSpTmp:
   \   00000000                      DS8 2
     28          
     29          static void SendDataToBD(UINT32 ic, char *cmd, char *dat, int len);
     30          
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void SetBD_TXSQ(unsigned char *Data, unsigned short Length)//通信申请
     33          {
   \                     SetBD_TXSQ:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C2             SUB      SP,SP,#+264
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     34              char cmd[6] = "$TXSQ";
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
   \   00000012   0x3908             SUBS     R1,R1,#+8
   \   00000014   0x3808             SUBS     R0,R0,#+8
     35              unsigned char tmp_buf[256];
     36              //char buf[217];
     37              int i;
     38          
     39              if(bd_para.dist_ic == 0)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000001A   0x68C0             LDR      R0,[R0, #+12]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD041             BEQ.N    ??SetBD_TXSQ_0
     40                  return;
     41              if(Length > 210)
   \                     ??SetBD_TXSQ_1:
   \   00000020   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000022   0x2DD3             CMP      R5,#+211
   \   00000024   0xDA3E             BGE.N    ??SetBD_TXSQ_0
     42                  return;
     43              
     44              tmp_buf[0] = 0x46;
   \                     ??SetBD_TXSQ_2:
   \   00000026   0x2046             MOVS     R0,#+70
   \   00000028   0xF88D 0x0008      STRB     R0,[SP, #+8]
     45              tmp_buf[1] = (bd_para.dist_ic >> 16) & 0xff;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000030   0x68C0             LDR      R0,[R0, #+12]
   \   00000032   0x0C00             LSRS     R0,R0,#+16
   \   00000034   0xF88D 0x0009      STRB     R0,[SP, #+9]
     46              tmp_buf[2] = (bd_para.dist_ic >> 8)  & 0xff;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0xF88D 0x000A      STRB     R0,[SP, #+10]
     47              tmp_buf[3] = (bd_para.dist_ic >> 0)  & 0xff;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000048   0x68C0             LDR      R0,[R0, #+12]
   \   0000004A   0xF88D 0x000B      STRB     R0,[SP, #+11]
     48              tmp_buf[4] = ((Length*8) >> 8) & 0xff;
   \   0000004E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000050   0x00E8             LSLS     R0,R5,#+3
   \   00000052   0x1200             ASRS     R0,R0,#+8
   \   00000054   0xF88D 0x000C      STRB     R0,[SP, #+12]
     49              tmp_buf[5] = ((Length*8) >> 0) & 0xff;
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0x00C0             LSLS     R0,R0,#+3
   \   0000005E   0xF88D 0x000D      STRB     R0,[SP, #+13]
     50              tmp_buf[6] = 0x00;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xF88D 0x000E      STRB     R0,[SP, #+14]
     51              for(i=0;i<Length;i++)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x0006             MOVS     R6,R0
   \                     ??SetBD_TXSQ_3:
   \   0000006C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006E   0x42AE             CMP      R6,R5
   \   00000070   0xDA05             BGE.N    ??SetBD_TXSQ_4
     52                tmp_buf[i+7] = Data[i];
   \   00000072   0xA802             ADD      R0,SP,#+8
   \   00000074   0x1830             ADDS     R0,R6,R0
   \   00000076   0x5D31             LDRB     R1,[R6, R4]
   \   00000078   0x71C1             STRB     R1,[R0, #+7]
   \   0000007A   0x1C76             ADDS     R6,R6,#+1
   \   0000007C   0xE7F6             B.N      ??SetBD_TXSQ_3
     53              if(g_RtuStatus.own_ic == 0)
   \                     ??SetBD_TXSQ_4:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000082   0x6900             LDR      R0,[R0, #+16]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD00D             BEQ.N    ??SetBD_TXSQ_0
     54                  return;
     55              SendDataToBD(g_RtuStatus.own_ic, cmd, tmp_buf, Length+7);
   \                     ??SetBD_TXSQ_5:
   \   00000088   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008A   0x1DEB             ADDS     R3,R5,#+7
   \   0000008C   0xAA02             ADD      R2,SP,#+8
   \   0000008E   0xA900             ADD      R1,SP,#+0
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000094   0x6900             LDR      R0,[R0, #+16]
   \   00000096   0x.... 0x....      BL       SendDataToBD
     56              
     57              g_RtuStatus.led_bd_st = 1;
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0xF880 0x1035      STRB     R1,[R0, #+53]
     58          }     
   \                     ??SetBD_TXSQ_0:
   \   000000A4   0xB042             ADD      SP,SP,#+264
   \   000000A6   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     59          void SetBD_ICJC()//IC检测
     60          {
   \                     SetBD_ICJC:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     61              char cmd[6] = "$ICJC";
   \   00000002   0xA801             ADD      R0,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
     62              char buf[1];
     63              buf[0] = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
     64              SendDataToBD(0, cmd, buf, 1);
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0xAA00             ADD      R2,SP,#+0
   \   0000001A   0xA901             ADD      R1,SP,#+4
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       SendDataToBD
     65          }
   \   00000022   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     66          void SetBD_SJSC()//时间输出
     67          {
   \                     SetBD_SJSC:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     68              char cmd[6] = "$SJSC";
   \   00000002   0xA801             ADD      R0,SP,#+4
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable8_4
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
     69              char buf[2];
     70              buf[0] = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
     71              buf[1] = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
     72              if(g_RtuStatus.own_ic == 0)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000020   0x6900             LDR      R0,[R0, #+16]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD007             BEQ.N    ??SetBD_SJSC_0
     73                  return;
     74              SendDataToBD(g_RtuStatus.own_ic, cmd, buf, 2);
   \                     ??SetBD_SJSC_1:
   \   00000026   0x2302             MOVS     R3,#+2
   \   00000028   0xAA00             ADD      R2,SP,#+0
   \   0000002A   0xA901             ADD      R1,SP,#+4
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000030   0x6900             LDR      R0,[R0, #+16]
   \   00000032   0x.... 0x....      BL       SendDataToBD
     75          }
   \                     ??SetBD_SJSC_0:
   \   00000036   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     76          static void SendDataToBD(UINT32 ic, char *cmd, char *dat, int len)
     77          {
   \                     SendDataToBD:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C0             SUB      SP,SP,#+256
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
     78              int  snd_len;
     79              int i;
     80              char crc=0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
     81              unsigned char tmp_buf[256];
     82              
     83              snd_len = 11+len;
   \   00000012   0xF117 0x000B      ADDS     R0,R7,#+11
   \   00000016   0x4680             MOV      R8,R0
     84              
     85              for(i=0;i<5;i++)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4682             MOV      R10,R0
   \                     ??SendDataToBD_0:
   \   0000001C   0xF1BA 0x0F05      CMP      R10,#+5
   \   00000020   0xDA07             BGE.N    ??SendDataToBD_1
     86                  tmp_buf[i] = cmd[i];
   \   00000022   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0xF80A 0x0001      STRB     R0,[R10, R1]
   \   0000002C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000030   0xE7F4             B.N      ??SendDataToBD_0
     87              tmp_buf[5] = (snd_len >> 8) & 0xff;
   \                     ??SendDataToBD_1:
   \   00000032   0xEA5F 0x2028      ASRS     R0,R8,#+8
   \   00000036   0xF88D 0x0005      STRB     R0,[SP, #+5]
     88              tmp_buf[6] = (snd_len >> 0) & 0xff;
   \   0000003A   0x4640             MOV      R0,R8
   \   0000003C   0xF88D 0x0006      STRB     R0,[SP, #+6]
     89              tmp_buf[7] = (ic >> 16) & 0xff;
   \   00000040   0x0C20             LSRS     R0,R4,#+16
   \   00000042   0xF88D 0x0007      STRB     R0,[SP, #+7]
     90              tmp_buf[8] = (ic >> 8)  & 0xff;
   \   00000046   0x0A20             LSRS     R0,R4,#+8
   \   00000048   0xF88D 0x0008      STRB     R0,[SP, #+8]
     91              tmp_buf[9] = (ic >> 0)  & 0xff;
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xF88D 0x0009      STRB     R0,[SP, #+9]
     92              for(i=0;i<len;i++)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x4682             MOV      R10,R0
   \                     ??SendDataToBD_2:
   \   00000056   0x45BA             CMP      R10,R7
   \   00000058   0xDA08             BGE.N    ??SendDataToBD_3
     93                  tmp_buf[10+i] = dat[i];
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0xEB1A 0x0000      ADDS     R0,R10,R0
   \   00000060   0xF81A 0x1006      LDRB     R1,[R10, R6]
   \   00000064   0x7281             STRB     R1,[R0, #+10]
   \   00000066   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   0000006A   0xE7F4             B.N      ??SendDataToBD_2
     94              for(i=0;i<(snd_len-1);i++)
   \                     ??SendDataToBD_3:
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x4682             MOV      R10,R0
   \                     ??SendDataToBD_4:
   \   00000070   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   00000074   0x4582             CMP      R10,R0
   \   00000076   0xDA07             BGE.N    ??SendDataToBD_5
     95                  crc ^= tmp_buf[i];
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   0000007E   0xEA90 0x0909      EORS     R9,R0,R9
   \   00000082   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000086   0xE7F3             B.N      ??SendDataToBD_4
     96              tmp_buf[snd_len-1] = crc;
   \                     ??SendDataToBD_5:
   \   00000088   0xA800             ADD      R0,SP,#+0
   \   0000008A   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000008E   0xF800 0x9C01      STRB     R9,[R0, #-1]
     97              
     98              
     99              SendOutHardware(PORT_ID_BT, tmp_buf,snd_len);
   \   00000092   0x4642             MOV      R2,R8
   \   00000094   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000096   0xA900             ADD      R1,SP,#+0
   \   00000098   0x2003             MOVS     R0,#+3
   \   0000009A   0x.... 0x....      BL       SendOutHardware
    100          }
   \   0000009E   0xB040             ADD      SP,SP,#+256
   \   000000A0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    101          
    102          /*
    103          static UINT8 RecFlag = 0x00;
    104          static UINT16  MsgID;
    105          static UINT16  RdSpTmp;
    106          static UINT16  MsgLength;
    107          //static UINT8  Rtcmv3Tmp[MAX_RTCMV3_LENGTH];  //2013.02.28  ycg
    108          
    109          static void ProcessMsgData   (INT16U msgId, UINT8 *pBuf, INT16U Len);
    110          static void ProcessRtcmv3Data(INT16U msgId, UINT8 *pBuf, INT16U Len);
    111          static void ProcessRtcmv2Data(INT16U msgId, UINT8 *pBuf, INT16U Len);
    112          static void ProcessNovatelxData(INT16U msgId, UINT8 *pBuf, INT16U Len);//Z.X.F. 20130322
    113          static void bProcessOemvTimeMessage(UINT8 *pBuf, UINT16 Len);
    114          static void ReadBestPosb(UINT8 *sp, UINT16 Len);
    115          static void SendCommToOem(char *pBuf);
    116          static void ReadRangecmpb(UINT8 *pBuf, UINT16 Len);
    117          #pragma location="LARGE_DATA_RAM" //add by xxw 20140819 放到外围32k的SRAM中去
    118          static   UINT8  TempT[512];//modify by xxw 20140811
    119          */

   \                                 In section .text, align 2, keep-with-next
    120          static void ProcessCmd_SJXX(unsigned char *pMsg, unsigned short Length)//时间信息
    121          {
   \                     ProcessCmd_SJXX:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    122              char buf[50];
    123              struct TIME_STRUCT time_gps,time_now;
    124              
    125              time_gps.y = (pMsg[10]<<8)+(pMsg[11]<<0);
   \   00000008   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000000A   0x7AE1             LDRB     R1,[R4, #+11]
   \   0000000C   0xEB11 0x2000      ADDS     R0,R1,R0, LSL #+8
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    126              time_gps.m = pMsg[12];
   \   00000014   0x7B20             LDRB     R0,[R4, #+12]
   \   00000016   0xF88D 0x0002      STRB     R0,[SP, #+2]
    127              time_gps.d = pMsg[13];
   \   0000001A   0x7B60             LDRB     R0,[R4, #+13]
   \   0000001C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    128              time_gps.H = pMsg[14];
   \   00000020   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000022   0xF88D 0x0004      STRB     R0,[SP, #+4]
    129              time_gps.M = pMsg[15];
   \   00000026   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000028   0xF88D 0x0005      STRB     R0,[SP, #+5]
    130              time_gps.S = pMsg[16];
   \   0000002C   0x7C20             LDRB     R0,[R4, #+16]
   \   0000002E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    131              
    132              rtc_get_time(&time_now);
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0x.... 0x....      BL       rtc_get_time
    133              
    134              if( abs(time_cmp(&time_now,&time_gps)) > 600)
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0xA802             ADD      R0,SP,#+8
   \   0000003C   0x.... 0x....      BL       time_cmp
   \   00000040   0x.... 0x....      BL       abs
   \   00000044   0xF5B0 0x7F16      CMP      R0,#+600
   \   00000048   0xDD0E             BLE.N    ??ProcessCmd_SJXX_0
    135              {//时间偏差>10分钟时进行更新
    136                if( (time_gps.y >= 2015) && (time_gps.y <= 2100) )
   \   0000004A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000004E   0xF240 0x71DF      MOVW     R1,#+2015
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xDB08             BLT.N    ??ProcessCmd_SJXX_0
   \   00000056   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000005A   0xF640 0x0135      MOVW     R1,#+2101
   \   0000005E   0x4288             CMP      R0,R1
   \   00000060   0xDA02             BGE.N    ??ProcessCmd_SJXX_0
    137                {
    138                  rtc_set_time(&time_gps);
   \   00000062   0xA800             ADD      R0,SP,#+0
   \   00000064   0x.... 0x....      BL       rtc_set_time
    139                } 
    140              }
    141              
    142              bd_para.sjsc_timeout = 0;
   \                     ??ProcessCmd_SJXX_0:
   \   00000068   0x....             LDR.N    R0,??DataTable8_1
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x6101             STR      R1,[R0, #+16]
    143              
    144              //sprintf(buf, "BD proc SJXX %d-%d-%d--%d-%d-%d\r\n",g_RtuStatus.y,g_RtuStatus.m,g_RtuStatus.d,g_RtuStatus.H,g_RtuStatus.M,g_RtuStatus.S);
    145              //DebugMsg(buf);
    146          }
   \   0000006E   0xB005             ADD      SP,SP,#+20
   \   00000070   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    147          static void ProcessCmd_ICXX(unsigned char *pMsg, unsigned short Length)//IC信息
    148          {
   \                     ProcessCmd_ICXX:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    149              char buf[50];
    150              g_RtuStatus.own_ic = (pMsg[7]<<16) + (pMsg[8]<<8) + (pMsg[9]<<0);
   \   00000008   0x79E0             LDRB     R0,[R4, #+7]
   \   0000000A   0x7A21             LDRB     R1,[R4, #+8]
   \   0000000C   0x0209             LSLS     R1,R1,#+8
   \   0000000E   0xEB11 0x4000      ADDS     R0,R1,R0, LSL #+16
   \   00000012   0x7A61             LDRB     R1,[R4, #+9]
   \   00000014   0x1808             ADDS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable8_2
   \   00000018   0x6108             STR      R0,[R1, #+16]
    151              sprintf(buf, "BD proc ICXX %d\r\n",g_RtuStatus.own_ic);
   \   0000001A   0x....             LDR.N    R0,??DataTable8_2
   \   0000001C   0x6902             LDR      R2,[R0, #+16]
   \   0000001E   0x....             LDR.N    R1,??DataTable8_5
   \   00000020   0xA800             ADD      R0,SP,#+0
   \   00000022   0x.... 0x....      BL       sprintf
    152              g_RtuStatus.bd = 1;
   \   00000026   0x....             LDR.N    R0,??DataTable8_2
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x7241             STRB     R1,[R0, #+9]
    153              //DebugMsg(buf);
    154          }
   \   0000002C   0xB00D             ADD      SP,SP,#+52
   \   0000002E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    155          static void ProcessCmd_TXXX(unsigned char *pMsg, unsigned short Length)//通信信息
    156          {
   \                     ProcessCmd_TXXX:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0B5             SUB      SP,SP,#+212
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    157              char buf[210];
    158              UINT16 len;
    159              int i;
    160              
    161              len = (pMsg[16]<<8) + (pMsg[17]);
   \   00000008   0x7C20             LDRB     R0,[R4, #+16]
   \   0000000A   0x7C61             LDRB     R1,[R4, #+17]
   \   0000000C   0xEB11 0x2000      ADDS     R0,R1,R0, LSL #+8
   \   00000010   0x0007             MOVS     R7,R0
    162              len = len/8;
   \   00000012   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000014   0x2008             MOVS     R0,#+8
   \   00000016   0xFB97 0xF7F0      SDIV     R7,R7,R0
    163              if(len > 210)
   \   0000001A   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000001C   0x2FD3             CMP      R7,#+211
   \   0000001E   0xDB03             BLT.N    ??ProcessCmd_TXXX_0
    164              {
    165                  DebugMsg("txxx len err!!!\r\n");
   \   00000020   0x....             LDR.N    R0,??DataTable8_6
   \   00000022   0x.... 0x....      BL       DebugMsg
    166                  return;
   \   00000026   0xE017             B.N      ??ProcessCmd_TXXX_1
    167              }
    168              
    169              for(i=0;i<len;i++)
   \                     ??ProcessCmd_TXXX_0:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0006             MOVS     R6,R0
   \                     ??ProcessCmd_TXXX_2:
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0x42BE             CMP      R6,R7
   \   00000030   0xDA05             BGE.N    ??ProcessCmd_TXXX_3
    170                  buf[i] = pMsg[i+18];
   \   00000032   0x1930             ADDS     R0,R6,R4
   \   00000034   0x7C80             LDRB     R0,[R0, #+18]
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0x5470             STRB     R0,[R6, R1]
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
   \   0000003C   0xE7F6             B.N      ??ProcessCmd_TXXX_2
    171              
    172              buf[len] = '\0';
   \                     ??ProcessCmd_TXXX_3:
   \   0000003E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x5439             STRB     R1,[R7, R0]
    173          
    174              // -----------
    175              //DebugMsg("bd rcv msg: ");
    176              //DebugMsg(buf);
    177              //DebugMsg("\r\n");
    178              
    179              g_RtuStatus.cmd_port = 3;
   \   00000046   0x....             LDR.N    R0,??DataTable8_2
   \   00000048   0x2103             MOVS     R1,#+3
   \   0000004A   0xF880 0x102F      STRB     R1,[R0, #+47]
    180              ProcessMsg_HUACE(buf, len);
   \   0000004E   0x0039             MOVS     R1,R7
   \   00000050   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       ProcessMsg_HUACE
    181          
    182          }
   \                     ??ProcessCmd_TXXX_1:
   \   00000058   0xB035             ADD      SP,SP,#+212
   \   0000005A   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    183          static void ProcessMsg_BD(unsigned char *pMsg, unsigned short Length)
    184          {///*
   \                     ProcessMsg_BD:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    185              UINT8 CmdHead[8];
    186              //crc 
    187          
    188              CmdHead[0] = pMsg[0];
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    189              CmdHead[1] = pMsg[1];
   \   0000000E   0x7860             LDRB     R0,[R4, #+1]
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
    190              CmdHead[2] = pMsg[2];
   \   00000014   0x78A0             LDRB     R0,[R4, #+2]
   \   00000016   0xF88D 0x0002      STRB     R0,[SP, #+2]
    191              CmdHead[3] = pMsg[3];
   \   0000001A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    192              CmdHead[4] = pMsg[4];
   \   00000020   0x7920             LDRB     R0,[R4, #+4]
   \   00000022   0xF88D 0x0004      STRB     R0,[SP, #+4]
    193              CmdHead[5] = '\0';
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x0005      STRB     R0,[SP, #+5]
    194              
    195              if(strcmp((const char *)CmdHead,"$SJXX") == 0)
   \   0000002C   0x....             LDR.N    R1,??DataTable8_7
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x.... 0x....      BL       strcmp
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD105             BNE.N    ??ProcessMsg_BD_0
    196              {
    197                  ProcessCmd_SJXX(pMsg, Length);
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       ProcessCmd_SJXX
   \   00000042   0xE016             B.N      ??ProcessMsg_BD_1
    198              }
    199              else if(strcmp((const char *)CmdHead,"$ICXX") == 0)
   \                     ??ProcessMsg_BD_0:
   \   00000044   0x....             LDR.N    R1,??DataTable8_8
   \   00000046   0xA800             ADD      R0,SP,#+0
   \   00000048   0x.... 0x....      BL       strcmp
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD105             BNE.N    ??ProcessMsg_BD_2
    200              {
    201                  ProcessCmd_ICXX(pMsg, Length);
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       ProcessCmd_ICXX
   \   0000005A   0xE00A             B.N      ??ProcessMsg_BD_1
    202              }
    203              else if(strcmp((const char *)CmdHead,"$TXXX") == 0)
   \                     ??ProcessMsg_BD_2:
   \   0000005C   0x....             LDR.N    R1,??DataTable8_9
   \   0000005E   0xA800             ADD      R0,SP,#+0
   \   00000060   0x.... 0x....      BL       strcmp
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD104             BNE.N    ??ProcessMsg_BD_1
    204              {
    205                  ProcessCmd_TXXX(pMsg, Length);
   \   00000068   0x0029             MOVS     R1,R5
   \   0000006A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       ProcessCmd_TXXX
    206              }
    207          
    208              
    209          }
   \                     ??ProcessMsg_BD_1:
   \   00000072   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    210          

   \                                 In section .text, align 2, keep-with-next
    211          void ProcessData_BD(unsigned char *DatBuf, unsigned short *RdSp, unsigned short WrSp)
    212          {
   \                     ProcessData_BD:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    213              unsigned char  ch;
    214              unsigned short   DatLen;
    215              unsigned short   i;
    216              if(WrSp != *RdSp)
   \   0000000A   0x8828             LDRH     R0,[R5, #+0]
   \   0000000C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000E   0x4286             CMP      R6,R0
   \   00000010   0xF000 0x80C9      BEQ.W    ??ProcessData_BD_0
    217              {
    218                  if(WrSp > *RdSp)
   \   00000014   0x8828             LDRH     R0,[R5, #+0]
   \   00000016   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000018   0x42B0             CMP      R0,R6
   \   0000001A   0xD203             BCS.N    ??ProcessData_BD_1
    219                      DatLen = WrSp - *RdSp ;
   \   0000001C   0x8828             LDRH     R0,[R5, #+0]
   \   0000001E   0x1A30             SUBS     R0,R6,R0
   \   00000020   0x4680             MOV      R8,R0
   \   00000022   0xE004             B.N      ??ProcessData_BD_2
    220                  else
    221                      DatLen = WrSp + DATA_BUF_NUM - *RdSp;
   \                     ??ProcessData_BD_1:
   \   00000024   0xF516 0x6000      ADDS     R0,R6,#+2048
   \   00000028   0x8829             LDRH     R1,[R5, #+0]
   \   0000002A   0x1A40             SUBS     R0,R0,R1
   \   0000002C   0x4680             MOV      R8,R0
    222                  if( RecFlag == 0x94 )   //收到协议头 
   \                     ??ProcessData_BD_2:
   \   0000002E   0x....             LDR.N    R0,??DataTable8_10
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2894             CMP      R0,#+148
   \   00000034   0xD150             BNE.N    ??ProcessData_BD_3
    223                  {		
    224                      if( DatLen >= (7 - 4)) 
   \   00000036   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000003A   0xF1B8 0x0F03      CMP      R8,#+3
   \   0000003E   0xDB4A             BLT.N    ??ProcessData_BD_4
    225                      {	
    226                          RecFlag = 0x95;	
   \   00000040   0x....             LDR.N    R0,??DataTable8_10
   \   00000042   0x2195             MOVS     R1,#+149
   \   00000044   0x7001             STRB     R1,[R0, #+0]
    227                          RdSpTmp = *RdSp;
   \   00000046   0x....             LDR.N    R0,??DataTable8_11
   \   00000048   0x8829             LDRH     R1,[R5, #+0]
   \   0000004A   0x8001             STRH     R1,[R0, #+0]
    228                          if(*RdSp >= 4) //回到包头
   \   0000004C   0x8828             LDRH     R0,[R5, #+0]
   \   0000004E   0x2804             CMP      R0,#+4
   \   00000050   0xDB03             BLT.N    ??ProcessData_BD_5
    229                              *RdSp -= 4;
   \   00000052   0x8828             LDRH     R0,[R5, #+0]
   \   00000054   0x1F00             SUBS     R0,R0,#+4
   \   00000056   0x8028             STRH     R0,[R5, #+0]
   \   00000058   0xE003             B.N      ??ProcessData_BD_6
    230                          else
    231                              *RdSp = *RdSp + DATA_BUF_NUM - 4;
   \                     ??ProcessData_BD_5:
   \   0000005A   0x8828             LDRH     R0,[R5, #+0]
   \   0000005C   0xF200 0x70FC      ADDW     R0,R0,#+2044
   \   00000060   0x8028             STRH     R0,[R5, #+0]
    232          
    233                          //Message Length
    234                          INCREASE_POINTER(RdSpTmp);
   \                     ??ProcessData_BD_6:
   \   00000062   0x....             LDR.N    R0,??DataTable8_11
   \   00000064   0x8800             LDRH     R0,[R0, #+0]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x....             LDR.N    R1,??DataTable8_11
   \   0000006A   0x8008             STRH     R0,[R1, #+0]
   \   0000006C   0x....             LDR.N    R0,??DataTable8_11
   \   0000006E   0x8800             LDRH     R0,[R0, #+0]
   \   00000070   0xF44F 0x6100      MOV      R1,#+2048
   \   00000074   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000078   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000007C   0x....             LDR.N    R0,??DataTable8_11
   \   0000007E   0x8002             STRH     R2,[R0, #+0]
    235                          MsgLength = DatBuf[RdSpTmp] * 256;
   \   00000080   0x....             LDR.N    R0,??DataTable8_11
   \   00000082   0x8800             LDRH     R0,[R0, #+0]
   \   00000084   0x5D00             LDRB     R0,[R0, R4]
   \   00000086   0xF44F 0x7180      MOV      R1,#+256
   \   0000008A   0x4348             MULS     R0,R1,R0
   \   0000008C   0x....             LDR.N    R1,??DataTable8_12
   \   0000008E   0x8008             STRH     R0,[R1, #+0]
    236                          INCREASE_POINTER (RdSpTmp);
   \   00000090   0x....             LDR.N    R0,??DataTable8_11
   \   00000092   0x8800             LDRH     R0,[R0, #+0]
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0x....             LDR.N    R1,??DataTable8_11
   \   00000098   0x8008             STRH     R0,[R1, #+0]
   \   0000009A   0x....             LDR.N    R0,??DataTable8_11
   \   0000009C   0x8800             LDRH     R0,[R0, #+0]
   \   0000009E   0xF44F 0x6100      MOV      R1,#+2048
   \   000000A2   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A6   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000AA   0x....             LDR.N    R0,??DataTable8_11
   \   000000AC   0x8002             STRH     R2,[R0, #+0]
    237                          MsgLength += DatBuf[RdSpTmp];
   \   000000AE   0x....             LDR.N    R0,??DataTable8_12
   \   000000B0   0x8800             LDRH     R0,[R0, #+0]
   \   000000B2   0x....             LDR.N    R1,??DataTable8_11
   \   000000B4   0x8809             LDRH     R1,[R1, #+0]
   \   000000B6   0x5D09             LDRB     R1,[R1, R4]
   \   000000B8   0x1808             ADDS     R0,R1,R0
   \   000000BA   0x....             LDR.N    R1,??DataTable8_12
   \   000000BC   0x8008             STRH     R0,[R1, #+0]
    238          
    239                          if(MsgLength > MAX_BD_LENGTH)// Error!
   \   000000BE   0x....             LDR.N    R0,??DataTable8_12
   \   000000C0   0x8800             LDRH     R0,[R0, #+0]
   \   000000C2   0xF5B0 0x7F80      CMP      R0,#+256
   \   000000C6   0xDD06             BLE.N    ??ProcessData_BD_4
    240                          {
    241                              MsgLength = MAX_BD_LENGTH;
   \   000000C8   0x....             LDR.N    R0,??DataTable8_12
   \   000000CA   0xF44F 0x7180      MOV      R1,#+256
   \   000000CE   0x8001             STRH     R1,[R0, #+0]
    242                              DebugMsg("BD msg outbuffer0 !!!\r\n");
   \   000000D0   0x....             LDR.N    R0,??DataTable8_13
   \   000000D2   0x.... 0x....      BL       DebugMsg
    243                          }
    244                      }
    245                      return;
   \                     ??ProcessData_BD_4:
   \   000000D6   0xE066             B.N      ??ProcessData_BD_7
    246                  }
    247                  else if(RecFlag == 0x95)
   \                     ??ProcessData_BD_3:
   \   000000D8   0x....             LDR.N    R0,??DataTable8_10
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x2895             CMP      R0,#+149
   \   000000DE   0xD12B             BNE.N    ??ProcessData_BD_8
    248                  {	
    249                      if(DatLen >= MsgLength)
   \   000000E0   0x....             LDR.N    R0,??DataTable8_12
   \   000000E2   0x8800             LDRH     R0,[R0, #+0]
   \   000000E4   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000E8   0x4580             CMP      R8,R0
   \   000000EA   0xD324             BCC.N    ??ProcessData_BD_9
    250                      {
    251                          for(i=0; i<MsgLength; i++)
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x4681             MOV      R9,R0
   \                     ??ProcessData_BD_10:
   \   000000F0   0x....             LDR.N    R0,??DataTable8_12
   \   000000F2   0x8800             LDRH     R0,[R0, #+0]
   \   000000F4   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000F8   0x4581             CMP      R9,R0
   \   000000FA   0xD214             BCS.N    ??ProcessData_BD_11
    252                          {
    253                              MsgTmp_BD[i] = DatBuf[*RdSp];
   \   000000FC   0x8828             LDRH     R0,[R5, #+0]
   \   000000FE   0x5D00             LDRB     R0,[R0, R4]
   \   00000100   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000104   0x....             LDR.N    R1,??DataTable8_14
   \   00000106   0xF809 0x0001      STRB     R0,[R9, R1]
    254                              INCREASE_POINTER (*RdSp);
   \   0000010A   0x8828             LDRH     R0,[R5, #+0]
   \   0000010C   0x1C40             ADDS     R0,R0,#+1
   \   0000010E   0x8028             STRH     R0,[R5, #+0]
   \   00000110   0x8828             LDRH     R0,[R5, #+0]
   \   00000112   0xF44F 0x6100      MOV      R1,#+2048
   \   00000116   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000011A   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000011E   0x802A             STRH     R2,[R5, #+0]
    255                          }
   \   00000120   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000124   0xE7E4             B.N      ??ProcessData_BD_10
    256                          RecFlag = 0;
   \                     ??ProcessData_BD_11:
   \   00000126   0x....             LDR.N    R0,??DataTable8_10
   \   00000128   0x2100             MOVS     R1,#+0
   \   0000012A   0x7001             STRB     R1,[R0, #+0]
    257                          ProcessMsg_BD(MsgTmp_BD, MsgLength);
   \   0000012C   0x....             LDR.N    R0,??DataTable8_12
   \   0000012E   0x8801             LDRH     R1,[R0, #+0]
   \   00000130   0x....             LDR.N    R0,??DataTable8_14
   \   00000132   0x.... 0x....      BL       ProcessMsg_BD
    258                      }
    259                      return;
   \                     ??ProcessData_BD_9:
   \   00000136   0xE036             B.N      ??ProcessData_BD_7
    260                  }
    261          
    262                  while( WrSp != *RdSp )//find msg head
   \                     ??ProcessData_BD_8:
   \   00000138   0x8828             LDRH     R0,[R5, #+0]
   \   0000013A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000013C   0x4286             CMP      R6,R0
   \   0000013E   0xD032             BEQ.N    ??ProcessData_BD_0
    263                  {
    264                      ch = DatBuf[*RdSp] ;
   \   00000140   0x8828             LDRH     R0,[R5, #+0]
   \   00000142   0x5D00             LDRB     R0,[R0, R4]
   \   00000144   0x0007             MOVS     R7,R0
    265                      INCREASE_POINTER(*RdSp);
   \   00000146   0x8828             LDRH     R0,[R5, #+0]
   \   00000148   0x1C40             ADDS     R0,R0,#+1
   \   0000014A   0x8028             STRH     R0,[R5, #+0]
   \   0000014C   0x8828             LDRH     R0,[R5, #+0]
   \   0000014E   0xF44F 0x6100      MOV      R1,#+2048
   \   00000152   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000156   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000015A   0x802A             STRH     R2,[R5, #+0]
    266          
    267                      if(RecFlag == 0x00)
   \   0000015C   0x....             LDR.N    R0,??DataTable8_10
   \   0000015E   0x7800             LDRB     R0,[R0, #+0]
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xD106             BNE.N    ??ProcessData_BD_12
    268                      {
    269                          if(ch == '$')
   \   00000164   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000166   0x2F24             CMP      R7,#+36
   \   00000168   0xD1E6             BNE.N    ??ProcessData_BD_8
    270                              RecFlag = 0x91;
   \   0000016A   0x....             LDR.N    R0,??DataTable8_10
   \   0000016C   0x2191             MOVS     R1,#+145
   \   0000016E   0x7001             STRB     R1,[R0, #+0]
   \   00000170   0xE7E2             B.N      ??ProcessData_BD_8
    271                      }
    272                      else if(RecFlag == 0x91)
   \                     ??ProcessData_BD_12:
   \   00000172   0x....             LDR.N    R0,??DataTable8_10
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
   \   00000176   0x2891             CMP      R0,#+145
   \   00000178   0xD103             BNE.N    ??ProcessData_BD_13
    273                      {
    274                          if(1)//(ch == 'H')
    275                              RecFlag = 0x92;
   \   0000017A   0x....             LDR.N    R0,??DataTable8_10
   \   0000017C   0x2192             MOVS     R1,#+146
   \   0000017E   0x7001             STRB     R1,[R0, #+0]
   \   00000180   0xE7DA             B.N      ??ProcessData_BD_8
    276                          else
    277                              RecFlag = 0x00;
    278                      }
    279                      else if(RecFlag == 0x92)
   \                     ??ProcessData_BD_13:
   \   00000182   0x....             LDR.N    R0,??DataTable8_10
   \   00000184   0x7800             LDRB     R0,[R0, #+0]
   \   00000186   0x2892             CMP      R0,#+146
   \   00000188   0xD103             BNE.N    ??ProcessData_BD_14
    280                      {
    281                          if(1)//(ch == 'C')
    282                              RecFlag = 0x93;
   \   0000018A   0x....             LDR.N    R0,??DataTable8_10
   \   0000018C   0x2193             MOVS     R1,#+147
   \   0000018E   0x7001             STRB     R1,[R0, #+0]
   \   00000190   0xE7D2             B.N      ??ProcessData_BD_8
    283                          else
    284                              RecFlag = 0x00;
    285                      }
    286                      else if(RecFlag == 0x93)
   \                     ??ProcessData_BD_14:
   \   00000192   0x....             LDR.N    R0,??DataTable8_10
   \   00000194   0x7800             LDRB     R0,[R0, #+0]
   \   00000196   0x2893             CMP      R0,#+147
   \   00000198   0xD1CE             BNE.N    ??ProcessData_BD_8
    287                      {
    288                          if(1)//(ch == 'R')
    289                          {
    290                              RdSpTmp = *RdSp; //remember this sp
   \   0000019A   0x....             LDR.N    R0,??DataTable8_11
   \   0000019C   0x8829             LDRH     R1,[R5, #+0]
   \   0000019E   0x8001             STRH     R1,[R0, #+0]
    291                              RecFlag = 0x94;
   \   000001A0   0x....             LDR.N    R0,??DataTable8_10
   \   000001A2   0x2194             MOVS     R1,#+148
   \   000001A4   0x7001             STRB     R1,[R0, #+0]
    292                              break;
    293                          }
    294                          else
    295                              RecFlag = 0x00;
    296                      }
    297                  }// End While
    298              }//if(WrSp != *RdSp)
    299          }
   \                     ??ProcessData_BD_0:
   \                     ??ProcessData_BD_7:
   \   000001A6   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    300          
    301          

   \                                 In section .text, align 2, keep-with-next
    302           void bd_time_handler(void)
    303          {//25ms中断
    304            
    305           if( bd_para.sjsc_timeout != 0)
   \                     bd_time_handler:
   \   00000000   0x....             LDR.N    R0,??DataTable8_1
   \   00000002   0x6900             LDR      R0,[R0, #+16]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD012             BEQ.N    ??bd_time_handler_0
    306           {
    307             if( bd_para.sjsc_timeout > (1000/25))
   \   00000008   0x....             LDR.N    R0,??DataTable8_1
   \   0000000A   0x6900             LDR      R0,[R0, #+16]
   \   0000000C   0x2829             CMP      R0,#+41
   \   0000000E   0xD309             BCC.N    ??bd_time_handler_1
    308             {
    309               bd_para.sjsc_timeout = 0;
   \   00000010   0x....             LDR.N    R0,??DataTable8_1
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6101             STR      R1,[R0, #+16]
    310               
    311               g_RtuStatus.own_ic = 0;
   \   00000016   0x....             LDR.N    R0,??DataTable8_2
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6101             STR      R1,[R0, #+16]
    312               
    313               g_RtuStatus.bd = 0;
   \   0000001C   0x....             LDR.N    R0,??DataTable8_2
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7241             STRB     R1,[R0, #+9]
   \   00000022   0xE004             B.N      ??bd_time_handler_0
    314             }
    315             else
    316             {
    317               bd_para.sjsc_timeout++;
   \                     ??bd_time_handler_1:
   \   00000024   0x....             LDR.N    R0,??DataTable8_1
   \   00000026   0x6900             LDR      R0,[R0, #+16]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x....             LDR.N    R1,??DataTable8_1
   \   0000002C   0x6108             STR      R0,[R1, #+16]
    318             }
    319           }
    320           
    321          }
   \                     ??bd_time_handler_0:
   \   0000002E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     `?<Constant "$TXSQ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     bd_para

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     g_RtuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     `?<Constant "$ICJC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     `?<Constant "$SJSC">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     `?<Constant "BD proc ICXX %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     `?<Constant "txxx len err!!!\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     `?<Constant "$SJXX">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     `?<Constant "$ICXX">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     `?<Constant "$TXXX">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     RecFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     RdSpTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     MsgLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     `?<Constant "BD msg outbuffer0 !!!\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     MsgTmp_BD

   \                                 In section .rodata, align 4
   \                     `?<Constant "$TXSQ">`:
   \   00000000   0x24 0x54          DC8 "$TXSQ"
   \              0x58 0x53    
   \              0x51 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "$ICJC">`:
   \   00000000   0x24 0x49          DC8 "$ICJC"
   \              0x43 0x4A    
   \              0x43 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "$SJSC">`:
   \   00000000   0x24 0x53          DC8 "$SJSC"
   \              0x4A 0x53    
   \              0x43 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BD proc ICXX %d\\r\\n">`:
   \   00000000   0x42 0x44          DC8 "BD proc ICXX %d\015\012"
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x63 0x20    
   \              0x49 0x43    
   \              0x58 0x58    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "txxx len err!!!\\r\\n">`:
   \   00000000   0x74 0x78          DC8 "txxx len err!!!\015\012"
   \              0x78 0x78    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x21 0x21    
   \              0x21 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "$SJXX">`:
   \   00000000   0x24 0x53          DC8 "$SJXX"
   \              0x4A 0x58    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "$ICXX">`:
   \   00000000   0x24 0x49          DC8 "$ICXX"
   \              0x43 0x58    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "$TXXX">`:
   \   00000000   0x24 0x54          DC8 "$TXXX"
   \              0x58 0x58    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BD msg outbuffer0 !!!\\r\\n">`:
   \   00000000   0x42 0x44          DC8 "BD msg outbuffer0 !!!\015\012"
   \              0x20 0x6D    
   \              0x73 0x67    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x30 0x20    
   \              0x21 0x21    
   \              0x21 0x0D    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   ProcessCmd_ICXX
        64   -> sprintf
      32   ProcessCmd_SJXX
        32   -> abs
        32   -> rtc_get_time
        32   -> rtc_set_time
        32   -> time_cmp
     232   ProcessCmd_TXXX
       232   -> DebugMsg
       232   -> ProcessMsg_HUACE
      32   ProcessData_BD
        32   -> DebugMsg
        32   -> ProcessMsg_BD
      24   ProcessMsg_BD
        24   -> ProcessCmd_ICXX
        24   -> ProcessCmd_SJXX
        24   -> ProcessCmd_TXXX
        24   -> strcmp
     288   SendDataToBD
       288   -> SendOutHardware
      16   SetBD_ICJC
        16   -> SendDataToBD
      16   SetBD_SJSC
        16   -> SendDataToBD
     280   SetBD_TXSQ
       280   -> SendDataToBD
       0   bd_time_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "$ICJC">
       8  ?<Constant "$ICXX">
       8  ?<Constant "$SJSC">
       8  ?<Constant "$SJXX">
       8  ?<Constant "$TXSQ">
       8  ?<Constant "$TXXX">
      24  ?<Constant "BD msg outbuffer0 !!!\r\n">
      20  ?<Constant "BD proc ICXX %d\r\n">
      20  ?<Constant "txxx len err!!!\r\n">
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       2  MsgLength
     256  MsgTmp_BD
      48  ProcessCmd_ICXX
     114  ProcessCmd_SJXX
      92  ProcessCmd_TXXX
     426  ProcessData_BD
     116  ProcessMsg_BD
       2  RdSpTmp
       1  RecFlag
     164  SendDataToBD
      36  SetBD_ICJC
      56  SetBD_SJSC
     168  SetBD_TXSQ
      20  bd_para
      48  bd_time_handler

 
   281 bytes in section .bss
   112 bytes in section .rodata
 1 328 bytes in section .text
 
 1 328 bytes of CODE  memory
   112 bytes of CONST memory
   281 bytes of DATA  memory

Errors: none
Warnings: 3
