###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      26/Mar/2017  12:36:44 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\LIS3DH.c               #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\LIS3DH.c -lCN          #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\LIS3DH.l #
#                    st                                                       #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\LIS3DH.o  #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\HuaceApp\LIS3DH.c
      1          /**************************Copyright (C) 2003-2014. All rights reserved*********************************
      2          **                                  上海华测导航科技有限公司
      3          **                                  http://www.huace.cn
      4          **                                  Email:support@huace.cn
      5          **
      6          **--------------文件信息--------------------------------------------------------------------------------
      7          **文   件   名: LIS3DH.c
      8          **创   建   人:
      9          **最后修改日期: 2014年08月12日
     10          **描        述: 电子气泡(加速度传感器)初始化，校正，数据发送
     11          ********************************************************************************************************/
     12          
     13          #include "includes.h"
     14          
     15          #define I2C0_Freq 400000
     16          #define WTH_set 20
     17          #define calibration_set 200

   \                                 In section .bss, align 1
     18          u8_t sensor_Dog = 0;
   \                     sensor_Dog:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     19          u8_t calibration_ok = 0;
   \                     calibration_ok:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          u8_t calibration_num = 0;
   \                     calibration_num:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     21          AxesRaw_add Axes_calibration = {0,0,0};
   \                     Axes_calibration:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     22          AxesRaw_add Axes_last = {0,0,0};
   \                     Axes_last:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
     23          AxesRaw_add Zero_offset = {0,0,0};
   \                     Zero_offset:
   \   00000000                      DS8 12
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          /* Private function prototypes -----------------------------------------------*/
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void I2C_init(en_I2C_unitId I2C_num, u32_t i2cClockFreq)
     31          {
   \                     I2C_init:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     32              I2C_Cmd(I2C_num, DISABLE);
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       I2C_Cmd
     33              PINSEL_ConfigPin (0, 27, 1);
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x211B             MOVS     R1,#+27
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       PINSEL_ConfigPin
     34              PINSEL_ConfigPin (0, 28, 1);
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x211C             MOVS     R1,#+28
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       PINSEL_ConfigPin
     35          
     36              I2C_Init(I2C_num, i2cClockFreq);
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       I2C_Init
     37              /* Enable I2C1 operation */
     38              I2C_Cmd(I2C_num, ENABLE);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x.... 0x....      BL       I2C_Cmd
     39              return;
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     40          }
     41          

   \                                 In section .text, align 2, keep-with-next
     42          status_t readByte( u8_t regAddr,  u8_t* data)
     43          {
   \                     readByte:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x000C             MOVS     R4,R1
     44              I2C_M_SETUP_Type i2cData;
     45          	i2cData.sl_addr7bit = LIS3DH_MEMS_I2C_ADDRESS;
   \   00000006   0x2018             MOVS     R0,#+24
   \   00000008   0x9000             STR      R0,[SP, #+0]
     46          	i2cData.tx_data = &regAddr;
   \   0000000A   0xA80B             ADD      R0,SP,#+44
   \   0000000C   0x9001             STR      R0,[SP, #+4]
     47          	i2cData.tx_length = 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9002             STR      R0,[SP, #+8]
     48          	i2cData.rx_data = data;
   \   00000012   0x9404             STR      R4,[SP, #+16]
     49          	i2cData.rx_length = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9005             STR      R0,[SP, #+20]
     50          	i2cData.retransmissions_max = 3;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9007             STR      R0,[SP, #+28]
     51          	return (status_t)I2C_MasterTransferData(I2C_0, &i2cData, I2C_TRANSFER_POLLING);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       I2C_MasterTransferData
   \   00000026   0xB00C             ADD      SP,SP,#+48
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
     52          }

   \                                 In section .text, align 2, keep-with-next
     53          status_t writeByte( u8_t regAddr, u8_t* data)
     54          {
   \                     writeByte:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     55              I2C_M_SETUP_Type i2cData;
     56          	u8_t data1[2];
     57          	data1[0] = regAddr;
   \   00000008   0xF88D 0x4000      STRB     R4,[SP, #+0]
     58              data1[1] = *data;
   \   0000000C   0x7828             LDRB     R0,[R5, #+0]
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     59          	i2cData.sl_addr7bit = LIS3DH_MEMS_I2C_ADDRESS;
   \   00000012   0x2018             MOVS     R0,#+24
   \   00000014   0x9001             STR      R0,[SP, #+4]
     60          	i2cData.tx_data = data1;
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x9002             STR      R0,[SP, #+8]
     61          	i2cData.tx_length = 2;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     62          	i2cData.rx_data = NULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9005             STR      R0,[SP, #+20]
     63          	i2cData.rx_length = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
     64          	i2cData.retransmissions_max = 3;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0x9008             STR      R0,[SP, #+32]
     65          	return (status_t)I2C_MasterTransferData(I2C_0, &i2cData, I2C_TRANSFER_POLLING);
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       I2C_MasterTransferData
   \   00000034   0xB00D             ADD      SP,SP,#+52
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          status_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data)
     69          {
   \                     LIS3DH_ReadReg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     70              return readByte(Reg, Data);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       readByte
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          status_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data)
     74          {
   \                     LIS3DH_WriteReg:
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     75              return writeByte(WriteAddr, &Data);
   \   00000004   0xA901             ADD      R1,SP,#+4
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x.... 0x....      BL       writeByte
   \   0000000E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     76          }
     77          

   \                                 In section .text, align 2, keep-with-next
     78          status_t LIS3DH_init(void)
     79          {
   \                     LIS3DH_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     80              I2C_init(I2C_0,I2C0_Freq);
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable3  ;; 0x61a80
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       I2C_init
     81              GPIO_SetDir(BRD_SENSOR_INT_PORT,  BRD_SENSOR_INT_MASK, GPIO_DIRECTION_INPUT);
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF45F 0x2180      MOVS     R1,#+262144
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x.... 0x....      BL       GPIO_SetDir
     82          
     83              if( !LIS3DH_SetODR(LIS3DH_ODR_400Hz) )
   \   00000018   0x2007             MOVS     R0,#+7
   \   0000001A   0x.... 0x....      BL       LIS3DH_SetODR
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD101             BNE.N    ??LIS3DH_init_0
     84                  return MEMS_ERROR;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE054             B.N      ??LIS3DH_init_1
     85              if( !LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE) )
   \                     ??LIS3DH_init_0:
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x.... 0x....      BL       LIS3DH_SetAxis
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD101             BNE.N    ??LIS3DH_init_2
     86                  return MEMS_ERROR;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE04D             B.N      ??LIS3DH_init_1
     87              if( !LIS3DH_SetMode(LIS3DH_NORMAL) )
   \                     ??LIS3DH_init_2:
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0x.... 0x....      BL       LIS3DH_SetMode
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??LIS3DH_init_3
     88                  return MEMS_ERROR;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE046             B.N      ??LIS3DH_init_1
     89              if( !LIS3DH_SetFilterDataSel(MEMS_ENABLE) )
   \                     ??LIS3DH_init_3:
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       LIS3DH_SetFilterDataSel
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD101             BNE.N    ??LIS3DH_init_4
     90                  return MEMS_ERROR;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xE03F             B.N      ??LIS3DH_init_1
     91              if( !LIS3DH_SetHPFMode(LIS3DH_HPM_REF_SIGNAL) )
   \                     ??LIS3DH_init_4:
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       LIS3DH_SetHPFMode
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD101             BNE.N    ??LIS3DH_init_5
     92                  return MEMS_ERROR;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE038             B.N      ??LIS3DH_init_1
     93              if( !LIS3DH_SetHPFCutOFF(LIS3DH_HPFCF_2) )
   \                     ??LIS3DH_init_5:
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x.... 0x....      BL       LIS3DH_SetHPFCutOFF
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD101             BNE.N    ??LIS3DH_init_6
     94                  return MEMS_ERROR;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xE031             B.N      ??LIS3DH_init_1
     95              if( !LIS3DH_HPFAOI1Enable(MEMS_ENABLE))
   \                     ??LIS3DH_init_6:
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x.... 0x....      BL       LIS3DH_HPFAOI1Enable
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD101             BNE.N    ??LIS3DH_init_7
     96                  return MEMS_ERROR;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xE02A             B.N      ??LIS3DH_init_1
     97              if( !LIS3DH_SetBDU(MEMS_ENABLE))
   \                     ??LIS3DH_init_7:
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x.... 0x....      BL       LIS3DH_SetBDU
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD101             BNE.N    ??LIS3DH_init_8
     98                  return MEMS_ERROR;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xE023             B.N      ??LIS3DH_init_1
     99              if( !LIS3DH_FIFOModeEnable(LIS3DH_FIFO_BYPASS_MODE) )
   \                     ??LIS3DH_init_8:
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x.... 0x....      BL       LIS3DH_FIFOModeEnable
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD101             BNE.N    ??LIS3DH_init_9
    100                  return MEMS_ERROR;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE01C             B.N      ??LIS3DH_init_1
    101              if( !LIS3DH_SetInt1Pin(LIS3DH_WTM_ON_INT1_ENABLE) )
   \                     ??LIS3DH_init_9:
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x.... 0x....      BL       LIS3DH_SetInt1Pin
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD101             BNE.N    ??LIS3DH_init_10
    102                  return MEMS_ERROR;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE015             B.N      ??LIS3DH_init_1
    103              if( !LIS3DH_SetFullScale(LIS3DH_FULLSCALE_2) )
   \                     ??LIS3DH_init_10:
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x.... 0x....      BL       LIS3DH_SetFullScale
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD101             BNE.N    ??LIS3DH_init_11
    104                  return MEMS_ERROR;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE00E             B.N      ??LIS3DH_init_1
    105              if( !LIS3DH_SetWaterMark(WTH_set) )
   \                     ??LIS3DH_init_11:
   \   000000B2   0x2014             MOVS     R0,#+20
   \   000000B4   0x.... 0x....      BL       LIS3DH_SetWaterMark
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD101             BNE.N    ??LIS3DH_init_12
    106                  return MEMS_ERROR;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xE007             B.N      ??LIS3DH_init_1
    107              if( !LIS3DH_FIFOModeEnable(LIS3DH_FIFO_MODE) )
   \                     ??LIS3DH_init_12:
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0x.... 0x....      BL       LIS3DH_FIFOModeEnable
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD101             BNE.N    ??LIS3DH_init_13
    108                  return MEMS_ERROR;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0xE000             B.N      ??LIS3DH_init_1
    109          
    110              return MEMS_SUCCESS;
   \                     ??LIS3DH_init_13:
   \   000000CE   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_init_1:
   \   000000D0   0xBD02             POP      {R1,PC}          ;; return
    111          }
    112          

   \                                 In section .text, align 2, keep-with-next
    113          status_t data_effect(AxesRaw_t *Acc)
    114          {
   \                     data_effect:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    115              u32_t square_sum = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    116              i16_t *value;
    117              value = (i16_t*)Acc;
   \   00000006   0x0025             MOVS     R5,R4
    118              square_sum += (i32_t)*value * (i32_t)*value;
   \   00000008   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   0000000C   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \   00000010   0xFB01 0x6600      MLA      R6,R1,R0,R6
    119              value = (i16_t*)Acc + 1;
   \   00000014   0x1CA0             ADDS     R0,R4,#+2
   \   00000016   0x0005             MOVS     R5,R0
    120              square_sum += (i32_t)*value * (i32_t)*value;
   \   00000018   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   0000001C   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \   00000020   0xFB01 0x6600      MLA      R6,R1,R0,R6
    121              value = (i16_t*)Acc + 2;
   \   00000024   0x1D20             ADDS     R0,R4,#+4
   \   00000026   0x0005             MOVS     R5,R0
    122              square_sum += (i32_t)*value * (i32_t)*value;
   \   00000028   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   0000002C   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \   00000030   0xFB01 0x6600      MLA      R6,R1,R0,R6
    123              if(abs(square_sum - 268435456) < 26843546 * 2)
   \   00000034   0xF1B6 0x5080      SUBS     R0,R6,#+268435456
   \   00000038   0x.... 0x....      BL       abs
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x3333334
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xDA01             BGE.N    ??data_effect_0
    124                  return MEMS_SUCCESS;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE000             B.N      ??data_effect_1
    125              else
    126                  return MEMS_ERROR;
   \                     ??data_effect_0:
   \   00000048   0x2000             MOVS     R0,#+0
   \                     ??data_effect_1:
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          status_t Acc_to_angle(AxesRaw_add *Acc,Axes_angle *angle)
    130          {
   \                     Acc_to_angle:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    131              float square_sqrt = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    132              i32_t *value;
    133              i32_t *angle_point;
    134              value = (i32_t *)Acc;
   \   0000000A   0x0027             MOVS     R7,R4
    135              angle_point = (i32_t *)angle;
   \   0000000C   0x46A8             MOV      R8,R5
    136              square_sqrt = sqrt((*(value) * *(value))  +  (*(value + 2) * *(value + 2)));
   \   0000000E   0x6838             LDR      R0,[R7, #+0]
   \   00000010   0x6839             LDR      R1,[R7, #+0]
   \   00000012   0x68BA             LDR      R2,[R7, #+8]
   \   00000014   0x68BB             LDR      R3,[R7, #+8]
   \   00000016   0x435A             MULS     R2,R3,R2
   \   00000018   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000001C   0x.... 0x....      BL       __aeabi_i2d
   \   00000020   0x.... 0x....      BL       sqrt
   \   00000024   0x.... 0x....      BL       __aeabi_d2f
   \   00000028   0x0006             MOVS     R6,R0
    137              *(angle_point + 1) = (i32_t )(atanf((float)*(value + 1) / (float)square_sqrt) * 206265);
   \   0000002A   0x6878             LDR      R0,[R7, #+4]
   \   0000002C   0x.... 0x....      BL       __aeabi_i2f
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x.... 0x....      BL       __aeabi_fdiv
   \   00000036   0x.... 0x....      BL       atanf
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x48496e40
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x.... 0x....      BL       __aeabi_f2iz
   \   00000046   0xF8C8 0x0004      STR      R0,[R8, #+4]
    138              square_sqrt = sqrt((*(value + 1) * *(value + 1))  +  (*(value + 2) * *(value + 2)));
   \   0000004A   0x6878             LDR      R0,[R7, #+4]
   \   0000004C   0x6879             LDR      R1,[R7, #+4]
   \   0000004E   0x68BA             LDR      R2,[R7, #+8]
   \   00000050   0x68BB             LDR      R3,[R7, #+8]
   \   00000052   0x435A             MULS     R2,R3,R2
   \   00000054   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000058   0x.... 0x....      BL       __aeabi_i2d
   \   0000005C   0x.... 0x....      BL       sqrt
   \   00000060   0x.... 0x....      BL       __aeabi_d2f
   \   00000064   0x0006             MOVS     R6,R0
    139              *(angle_point) = (i32_t )(atanf((float)*value / (float)square_sqrt) * 206265);
   \   00000066   0x6838             LDR      R0,[R7, #+0]
   \   00000068   0x.... 0x....      BL       __aeabi_i2f
   \   0000006C   0x0031             MOVS     R1,R6
   \   0000006E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000072   0x.... 0x....      BL       atanf
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable3_2  ;; 0x48496e40
   \   0000007A   0x.... 0x....      BL       __aeabi_fmul
   \   0000007E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000082   0xF8C8 0x0000      STR      R0,[R8, #+0]
    140              return MEMS_SUCCESS;
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    141              //return MEMS_ERROR;
    142          }
    143          
    144          
    145          
    146          
    147          /*******************************************************************************
    148          * Function Name  : LIS3DH_GetWHO_AM_I
    149          * Description    : Read identification code by WHO_AM_I register
    150          * Input          : Char to empty by Device identification Value
    151          * Output         : None
    152          * Return         : Status [value of FSS]
    153          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    154          status_t LIS3DH_GetWHO_AM_I(u8_t* val){
   \                     LIS3DH_GetWHO_AM_I:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    155          
    156              if( !LIS3DH_ReadReg(LIS3DH_WHO_AM_I, val) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x200F             MOVS     R0,#+15
   \   00000008   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LIS3DH_GetWHO_AM_I_0
    157                  return MEMS_ERROR;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??LIS3DH_GetWHO_AM_I_1
    158          
    159              return MEMS_SUCCESS;
   \                     ??LIS3DH_GetWHO_AM_I_0:
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetWHO_AM_I_1:
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    160          }
    161          /*******************************************************************************
    162          * Function Name  : LIS3DH_GetStatusAUX
    163          * Description    : Read the AUX status register
    164          * Input          : Char to empty by status register buffer
    165          * Output         : None
    166          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    167          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    168          status_t LIS3DH_GetStatusAUX(u8_t* val) {
   \                     LIS3DH_GetStatusAUX:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    169          
    170              if( !LIS3DH_ReadReg(LIS3DH_STATUS_AUX, val) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LIS3DH_GetStatusAUX_0
    171                  return MEMS_ERROR;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??LIS3DH_GetStatusAUX_1
    172          
    173              return MEMS_SUCCESS;
   \                     ??LIS3DH_GetStatusAUX_0:
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetStatusAUX_1:
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    174          }
    175          /*******************************************************************************
    176          * Function Name  : LIS3DH_GetStatusAUXBIT
    177          * Description    : Read the AUX status register BIT
    178          * Input          : LIS3DH_STATUS_AUX_321OR, LIS3DH_STATUS_AUX_3OR, LIS3DH_STATUS_AUX_2OR, LIS3DH_STATUS_AUX_1OR,
    179          LIS3DH_STATUS_AUX_321DA, LIS3DH_STATUS_AUX_3DA, LIS3DH_STATUS_AUX_2DA, LIS3DH_STATUS_AUX_1DA
    180          * Output         : None
    181          * Return         : Status of BIT [MEMS_ERROR, MEMS_SUCCESS]
    182          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    183          status_t LIS3DH_GetStatusAUXBit(u8_t statusBIT, u8_t* val) {
   \                     LIS3DH_GetStatusAUXBit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    184              u8_t value;
    185          
    186              if( !LIS3DH_ReadReg(LIS3DH_STATUS_AUX, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2007             MOVS     R0,#+7
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetStatusAUXBit_0
    187                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE0A0             B.N      ??LIS3DH_GetStatusAUXBit_1
    188          
    189              if(statusBIT == LIS3DH_STATUS_AUX_321OR){
   \                     ??LIS3DH_GetStatusAUXBit_0:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C80             CMP      R4,#+128
   \   0000001A   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_2
    190                  if(value &= LIS3DH_STATUS_AUX_321OR){
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_3
    191                      *val = MEMS_SET;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x7028             STRB     R0,[R5, #+0]
    192                      return MEMS_SUCCESS;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE090             B.N      ??LIS3DH_GetStatusAUXBit_1
    193                  }
    194                  else{
    195                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_3:
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7028             STRB     R0,[R5, #+0]
    196                      return MEMS_SUCCESS;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE08C             B.N      ??LIS3DH_GetStatusAUXBit_1
    197                  }
    198              }
    199          
    200              if(statusBIT == LIS3DH_STATUS_AUX_3OR){
   \                     ??LIS3DH_GetStatusAUXBit_2:
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C40             CMP      R4,#+64
   \   00000042   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_4
    201                  if(value &= LIS3DH_STATUS_AUX_3OR){
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_5
    202                      *val = MEMS_SET;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x7028             STRB     R0,[R5, #+0]
    203                      return MEMS_SUCCESS;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE07C             B.N      ??LIS3DH_GetStatusAUXBit_1
    204                  }
    205                  else{
    206                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_5:
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x7028             STRB     R0,[R5, #+0]
    207                      return MEMS_SUCCESS;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xE078             B.N      ??LIS3DH_GetStatusAUXBit_1
    208                  }
    209              }
    210          
    211              if(statusBIT == LIS3DH_STATUS_AUX_2OR){
   \                     ??LIS3DH_GetStatusAUXBit_4:
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C20             CMP      R4,#+32
   \   0000006A   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_6
    212                  if(value &= LIS3DH_STATUS_AUX_2OR){
   \   0000006C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000070   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   00000074   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_7
    213                      *val = MEMS_SET;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x7028             STRB     R0,[R5, #+0]
    214                      return MEMS_SUCCESS;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xE068             B.N      ??LIS3DH_GetStatusAUXBit_1
    215                  }
    216                  else{
    217                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_7:
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x7028             STRB     R0,[R5, #+0]
    218                      return MEMS_SUCCESS;
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xE064             B.N      ??LIS3DH_GetStatusAUXBit_1
    219                  }
    220              }
    221          
    222              if(statusBIT == LIS3DH_STATUS_AUX_1OR){
   \                     ??LIS3DH_GetStatusAUXBit_6:
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x2C10             CMP      R4,#+16
   \   00000092   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_8
    223                  if(value &= LIS3DH_STATUS_AUX_1OR){
   \   00000094   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000098   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   0000009C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_9
    224                      *val = MEMS_SET;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x7028             STRB     R0,[R5, #+0]
    225                      return MEMS_SUCCESS;
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0xE054             B.N      ??LIS3DH_GetStatusAUXBit_1
    226                  }
    227                  else{
    228                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_9:
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x7028             STRB     R0,[R5, #+0]
    229                      return MEMS_SUCCESS;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0xE050             B.N      ??LIS3DH_GetStatusAUXBit_1
    230                  }
    231              }
    232          
    233              if(statusBIT == LIS3DH_STATUS_AUX_321DA){
   \                     ??LIS3DH_GetStatusAUXBit_8:
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0x2C08             CMP      R4,#+8
   \   000000BA   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_10
    234                  if(value &= LIS3DH_STATUS_AUX_321DA) {
   \   000000BC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C0   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   000000C4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_11
    235                      *val = MEMS_SET;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x7028             STRB     R0,[R5, #+0]
    236                      return MEMS_SUCCESS;
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0xE040             B.N      ??LIS3DH_GetStatusAUXBit_1
    237                  }
    238                  else{
    239                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_11:
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x7028             STRB     R0,[R5, #+0]
    240                      return MEMS_SUCCESS;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0xE03C             B.N      ??LIS3DH_GetStatusAUXBit_1
    241                  }
    242              }
    243          
    244              if(statusBIT == LIS3DH_STATUS_AUX_3DA){
   \                     ??LIS3DH_GetStatusAUXBit_10:
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x2C04             CMP      R4,#+4
   \   000000E2   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_12
    245                  if(value &= LIS3DH_STATUS_AUX_3DA){
   \   000000E4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E8   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   000000EC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_13
    246                      *val = MEMS_SET;
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0x7028             STRB     R0,[R5, #+0]
    247                      return MEMS_SUCCESS;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0xE02C             B.N      ??LIS3DH_GetStatusAUXBit_1
    248                  }
    249                  else{
    250                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_13:
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x7028             STRB     R0,[R5, #+0]
    251                      return MEMS_SUCCESS;
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0xE028             B.N      ??LIS3DH_GetStatusAUXBit_1
    252                  }
    253              }
    254          
    255              if(statusBIT == LIS3DH_STATUS_AUX_2DA){
   \                     ??LIS3DH_GetStatusAUXBit_12:
   \   00000106   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000108   0x2C02             CMP      R4,#+2
   \   0000010A   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_14
    256                  if(value &= LIS3DH_STATUS_AUX_2DA){
   \   0000010C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000110   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000114   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_15
    257                      *val = MEMS_SET;
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0x7028             STRB     R0,[R5, #+0]
    258                      return MEMS_SUCCESS;
   \   00000122   0x2001             MOVS     R0,#+1
   \   00000124   0xE018             B.N      ??LIS3DH_GetStatusAUXBit_1
    259                  }
    260                  else{
    261                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_15:
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x7028             STRB     R0,[R5, #+0]
    262                      return MEMS_SUCCESS;
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0xE014             B.N      ??LIS3DH_GetStatusAUXBit_1
    263                  }
    264              }
    265          
    266              if(statusBIT == LIS3DH_STATUS_AUX_1DA){
   \                     ??LIS3DH_GetStatusAUXBit_14:
   \   0000012E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000130   0x2C01             CMP      R4,#+1
   \   00000132   0xD110             BNE.N    ??LIS3DH_GetStatusAUXBit_16
    267                  if(value &= LIS3DH_STATUS_AUX_1DA){
   \   00000134   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000138   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000013C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000140   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD003             BEQ.N    ??LIS3DH_GetStatusAUXBit_17
    268                      *val = MEMS_SET;
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0x7028             STRB     R0,[R5, #+0]
    269                      return MEMS_SUCCESS;
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0xE004             B.N      ??LIS3DH_GetStatusAUXBit_1
    270                  }
    271                  else{
    272                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusAUXBit_17:
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x7028             STRB     R0,[R5, #+0]
    273                      return MEMS_SUCCESS;
   \   00000152   0x2001             MOVS     R0,#+1
   \   00000154   0xE000             B.N      ??LIS3DH_GetStatusAUXBit_1
    274                  }
    275              }
    276              return MEMS_ERROR;
   \                     ??LIS3DH_GetStatusAUXBit_16:
   \   00000156   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetStatusAUXBit_1:
   \   00000158   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    277          }
    278          
    279          
    280          /*******************************************************************************
    281          * Function Name  : LIS3DH_SetODR
    282          * Description    : Sets LIS3DH Output Data Rate
    283          * Input          : Output Data Rate
    284          * Output         : None
    285          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    286          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          status_t LIS3DH_SetODR(LIS3DH_ODR_t ov){
   \                     LIS3DH_SetODR:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    288              u8_t value;
    289          
    290              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2020             MOVS     R0,#+32
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetODR_0
    291                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetODR_1
    292          
    293              value &= 0x0f;
   \                     ??LIS3DH_SetODR_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    294              value |= ov<<LIS3DH_ODR_BIT;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1004      ORRS     R0,R0,R4, LSL #+4
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    295          
    296              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2020             MOVS     R0,#+32
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetODR_2
    297                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetODR_1
    298          
    299              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetODR_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetODR_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    300          }
    301          
    302          
    303          /*******************************************************************************
    304          * Function Name  : LIS3DH_SetTemperature
    305          * Description    : Sets LIS3DH Output Temperature
    306          * Input          : MEMS_ENABLE, MEMS_DISABLE
    307          * Output         : None
    308          * Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
    309          functions must be ENABLE
    310          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    311          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    312          status_t LIS3DH_SetTemperature(State_t state){
   \                     LIS3DH_SetTemperature:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    313              u8_t value;
    314          
    315              if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x201F             MOVS     R0,#+31
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetTemperature_0
    316                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetTemperature_1
    317          
    318              value &= 0xBF;
   \                     ??LIS3DH_SetTemperature_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    319              value |= state<<LIS3DH_TEMP_EN;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    320          
    321              if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x201F             MOVS     R0,#+31
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetTemperature_2
    322                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetTemperature_1
    323          
    324              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetTemperature_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetTemperature_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    325          }
    326          
    327          
    328          /*******************************************************************************
    329          * Function Name  : LIS3DH_SetADCAux
    330          * Description    : Sets LIS3DH Output ADC
    331          * Input          : MEMS_ENABLE, MEMS_DISABLE
    332          * Output         : None
    333          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    334          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    335          status_t LIS3DH_SetADCAux(State_t state){
   \                     LIS3DH_SetADCAux:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    336              u8_t value;
    337          
    338              if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x201F             MOVS     R0,#+31
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetADCAux_0
    339                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetADCAux_1
    340          
    341              value &= 0x7F;
   \                     ??LIS3DH_SetADCAux_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    342              value |= state<<LIS3DH_ADC_PD;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x10C4      ORRS     R0,R0,R4, LSL #+7
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    343          
    344              if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x201F             MOVS     R0,#+31
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetADCAux_2
    345                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetADCAux_1
    346          
    347              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetADCAux_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetADCAux_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    348          }
    349          
    350          
    351          /*******************************************************************************
    352          * Function Name  : LIS3DH_GetAuxRaw
    353          * Description    : Read the Aux Values Output Registers
    354          * Input          : Buffer to empty
    355          * Output         : Aux Values Registers buffer
    356          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    357          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    358          status_t LIS3DH_GetAuxRaw(LIS3DH_Aux123Raw_t* buff) {
   \                     LIS3DH_GetAuxRaw:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    359              u8_t valueL;
    360              u8_t valueH;
    361          
    362              if( !LIS3DH_ReadReg(LIS3DH_OUT_1_L, &valueL) )
   \   00000006   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000000A   0x2008             MOVS     R0,#+8
   \   0000000C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_0
    363                  return MEMS_ERROR;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE04B             B.N      ??LIS3DH_GetAuxRaw_1
    364          
    365              if( !LIS3DH_ReadReg(LIS3DH_OUT_1_H, &valueH) )
   \                     ??LIS3DH_GetAuxRaw_0:
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x2009             MOVS     R0,#+9
   \   0000001C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_2
    366                  return MEMS_ERROR;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE043             B.N      ??LIS3DH_GetAuxRaw_1
    367          
    368              buff->AUX_1 = (u16_t)( (valueH << 8) | valueL )/16;
   \                     ??LIS3DH_GetAuxRaw_2:
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000030   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x2110             MOVS     R1,#+16
   \   00000038   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000003C   0x8020             STRH     R0,[R4, #+0]
    369          
    370              if( !LIS3DH_ReadReg(LIS3DH_OUT_2_L, &valueL) )
   \   0000003E   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000042   0x200A             MOVS     R0,#+10
   \   00000044   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_3
    371                  return MEMS_ERROR;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xE02F             B.N      ??LIS3DH_GetAuxRaw_1
    372          
    373              if( !LIS3DH_ReadReg(LIS3DH_OUT_2_H, &valueH) )
   \                     ??LIS3DH_GetAuxRaw_3:
   \   00000050   0xA900             ADD      R1,SP,#+0
   \   00000052   0x200B             MOVS     R0,#+11
   \   00000054   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_4
    374                  return MEMS_ERROR;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE027             B.N      ??LIS3DH_GetAuxRaw_1
    375          
    376              buff->AUX_2 = (u16_t)( (valueH << 8) | valueL )/16;
   \                     ??LIS3DH_GetAuxRaw_4:
   \   00000060   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000064   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000068   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000006C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006E   0x2110             MOVS     R1,#+16
   \   00000070   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000074   0x8060             STRH     R0,[R4, #+2]
    377          
    378              if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
   \   00000076   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000007A   0x200C             MOVS     R0,#+12
   \   0000007C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_5
    379                  return MEMS_ERROR;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xE013             B.N      ??LIS3DH_GetAuxRaw_1
    380          
    381              if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
   \                     ??LIS3DH_GetAuxRaw_5:
   \   00000088   0xA900             ADD      R1,SP,#+0
   \   0000008A   0x200D             MOVS     R0,#+13
   \   0000008C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD101             BNE.N    ??LIS3DH_GetAuxRaw_6
    382                  return MEMS_ERROR;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xE00B             B.N      ??LIS3DH_GetAuxRaw_1
    383          
    384              buff->AUX_3 = (u16_t)( (valueH << 8) | valueL )/16;
   \                     ??LIS3DH_GetAuxRaw_6:
   \   00000098   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000A0   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0x2110             MOVS     R1,#+16
   \   000000A8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000AC   0x80A0             STRH     R0,[R4, #+4]
    385          
    386              return MEMS_SUCCESS;
   \   000000AE   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetAuxRaw_1:
   \   000000B0   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    387          }
    388          
    389          
    390          /*******************************************************************************
    391          * Function Name  : LIS3DH_GetTempRaw
    392          * Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
    393          * Input          : Buffer to empty
    394          * Output         : Temperature Values Registers buffer
    395          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    396          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    397          status_t LIS3DH_GetTempRaw(i8_t* buff) {
   \                     LIS3DH_GetTempRaw:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    398              u8_t valueL;
    399              u8_t valueH;
    400          
    401              if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
   \   00000006   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000000A   0x200C             MOVS     R0,#+12
   \   0000000C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE.N    ??LIS3DH_GetTempRaw_0
    402                  return MEMS_ERROR;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE00B             B.N      ??LIS3DH_GetTempRaw_1
    403          
    404              if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
   \                     ??LIS3DH_GetTempRaw_0:
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x200D             MOVS     R0,#+13
   \   0000001C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??LIS3DH_GetTempRaw_2
    405                  return MEMS_ERROR;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE003             B.N      ??LIS3DH_GetTempRaw_1
    406          
    407              *buff = (i8_t)( valueH );
   \                     ??LIS3DH_GetTempRaw_2:
   \   00000028   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
    408          
    409              return MEMS_SUCCESS;
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetTempRaw_1:
   \   00000030   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    410          }
    411          
    412          
    413          /*******************************************************************************
    414          * Function Name  : LIS3DH_SetMode
    415          * Description    : Sets LIS3DH Operating Mode
    416          * Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
    417          * Output         : None
    418          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    419          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    420          status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
   \                     LIS3DH_SetMode:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    421              u8_t value;
    422              u8_t value2;
    423              static   u8_t ODR_old_value;
    424          
    425              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2020             MOVS     R0,#+32
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetMode_0
    426                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE06B             B.N      ??LIS3DH_SetMode_1
    427          
    428              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
   \                     ??LIS3DH_SetMode_0:
   \   00000016   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000001A   0x2023             MOVS     R0,#+35
   \   0000001C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??LIS3DH_SetMode_2
    429                  return MEMS_ERROR;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE062             B.N      ??LIS3DH_SetMode_1
    430          
    431              if((value & 0xF0)==0)
   \                     ??LIS3DH_SetMode_2:
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0x21F0             MOVS     R1,#+240
   \   0000002E   0x4208             TST      R0,R1
   \   00000030   0xD108             BNE.N    ??LIS3DH_SetMode_3
    432                  value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x....             LDR.N    R1,??DataTable3_3
   \   00000038   0x7809             LDRB     R1,[R1, #+0]
   \   0000003A   0xF011 0x01F0      ANDS     R1,R1,#0xF0
   \   0000003E   0x4308             ORRS     R0,R1,R0
   \   00000040   0xF88D 0x0000      STRB     R0,[SP, #+0]
    433          
    434              switch(md) {
   \                     ??LIS3DH_SetMode_3:
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C00             CMP      R4,#+0
   \   00000048   0xD003             BEQ.N    ??LIS3DH_SetMode_4
   \   0000004A   0x2C02             CMP      R4,#+2
   \   0000004C   0xD00C             BEQ.N    ??LIS3DH_SetMode_5
   \   0000004E   0xD322             BCC.N    ??LIS3DH_SetMode_6
   \   00000050   0xE038             B.N      ??LIS3DH_SetMode_7
    435          
    436              case LIS3DH_POWER_DOWN:
    437                  ODR_old_value = value;
   \                     ??LIS3DH_SetMode_4:
   \   00000052   0x....             LDR.N    R0,??DataTable3_3
   \   00000054   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000058   0x7001             STRB     R1,[R0, #+0]
    438                  value &= 0x0F;
   \   0000005A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005E   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000062   0xF88D 0x0000      STRB     R0,[SP, #+0]
    439                  break;
   \   00000066   0xE02F             B.N      ??LIS3DH_SetMode_8
    440          
    441              case LIS3DH_NORMAL:
    442                  value &= 0xF7;
   \                     ??LIS3DH_SetMode_5:
   \   00000068   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006C   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000070   0xF88D 0x0000      STRB     R0,[SP, #+0]
    443                  value |= (MEMS_RESET<<LIS3DH_LPEN);
   \   00000074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000078   0xF88D 0x0000      STRB     R0,[SP, #+0]
    444                  value2 &= 0xF7;
   \   0000007C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000080   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000084   0xF88D 0x0001      STRB     R0,[SP, #+1]
    445                  value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
   \   00000088   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000008C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000090   0xF88D 0x0001      STRB     R0,[SP, #+1]
    446                  break;
   \   00000094   0xE018             B.N      ??LIS3DH_SetMode_8
    447          
    448              case LIS3DH_LOW_POWER:		
    449                  value &= 0xF7;
   \                     ??LIS3DH_SetMode_6:
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000009E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    450                  value |=  (MEMS_SET<<LIS3DH_LPEN);
   \   000000A2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A6   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000AA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    451                  value2 &= 0xF7;
   \   000000AE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000B2   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   000000B6   0xF88D 0x0001      STRB     R0,[SP, #+1]
    452                  value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
   \   000000BA   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000BE   0xF88D 0x0001      STRB     R0,[SP, #+1]
    453                  break;
   \   000000C2   0xE001             B.N      ??LIS3DH_SetMode_8
    454          
    455              default:
    456                  return MEMS_ERROR;
   \                     ??LIS3DH_SetMode_7:
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0xE012             B.N      ??LIS3DH_SetMode_1
    457              }
    458          
    459              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
   \                     ??LIS3DH_SetMode_8:
   \   000000C8   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000CC   0x2020             MOVS     R0,#+32
   \   000000CE   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD101             BNE.N    ??LIS3DH_SetMode_9
    460                  return MEMS_ERROR;
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xE009             B.N      ??LIS3DH_SetMode_1
    461          
    462              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
   \                     ??LIS3DH_SetMode_9:
   \   000000DA   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000DE   0x2023             MOVS     R0,#+35
   \   000000E0   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD101             BNE.N    ??LIS3DH_SetMode_10
    463                  return MEMS_ERROR;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xE000             B.N      ??LIS3DH_SetMode_1
    464          
    465              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetMode_10:
   \   000000EC   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetMode_1:
   \   000000EE   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    466          }

   \                                 In section .bss, align 1
   \                     ??ODR_old_value:
   \   00000000                      DS8 1
    467          
    468          
    469          /*******************************************************************************
    470          * Function Name  : LIS3DH_SetAxis
    471          * Description    : Enable/Disable LIS3DH Axis
    472          * Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
    473          * Output         : None
    474          * Note           : You MUST use all input variable in the argument, as example
    475          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    476          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    477          status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
   \                     LIS3DH_SetAxis:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    478              u8_t value;
    479          
    480              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2020             MOVS     R0,#+32
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetAxis_0
    481                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE016             B.N      ??LIS3DH_SetAxis_1
    482              value &= 0xF8;
   \                     ??LIS3DH_SetAxis_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00F8      ANDS     R0,R0,#0xF8
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    483              value |= (0x07 & axis);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xF014 0x0107      ANDS     R1,R4,#0x7
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    484          
    485              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
   \   00000030   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000034   0x2020             MOVS     R0,#+32
   \   00000036   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??LIS3DH_SetAxis_2
    486                  return MEMS_ERROR;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE000             B.N      ??LIS3DH_SetAxis_1
    487          
    488              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetAxis_2:
   \   00000042   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetAxis_1:
   \   00000044   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    489          }
    490          
    491          
    492          /*******************************************************************************
    493          * Function Name  : LIS3DH_SetFullScale
    494          * Description    : Sets the LIS3DH FullScale
    495          * Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
    496          * Output         : None
    497          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    498          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    499          status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
   \                     LIS3DH_SetFullScale:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    500              u8_t value;
    501          
    502              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetFullScale_0
    503                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetFullScale_1
    504          
    505              value &= 0xCF;	
   \                     ??LIS3DH_SetFullScale_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00CF      ANDS     R0,R0,#0xCF
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    506              value |= (fs<<LIS3DH_FS);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1004      ORRS     R0,R0,R4, LSL #+4
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    507          
    508              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2023             MOVS     R0,#+35
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetFullScale_2
    509                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetFullScale_1
    510          
    511              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetFullScale_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetFullScale_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    512          }
    513          
    514          
    515          /*******************************************************************************
    516          * Function Name  : LIS3DH_SetBDU
    517          * Description    : Enable/Disable Block Data Update Functionality
    518          * Input          : ENABLE/DISABLE
    519          * Output         : None
    520          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    521          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    522          status_t LIS3DH_SetBDU(State_t bdu) {
   \                     LIS3DH_SetBDU:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    523              u8_t value;
    524          
    525              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetBDU_0
    526                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetBDU_1
    527          
    528              value &= 0x7F;
   \                     ??LIS3DH_SetBDU_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    529              value |= (bdu<<LIS3DH_BDU);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x10C4      ORRS     R0,R0,R4, LSL #+7
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    530          
    531              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2023             MOVS     R0,#+35
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetBDU_2
    532                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetBDU_1
    533          
    534              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetBDU_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetBDU_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    535          }
    536          
    537          
    538          /*******************************************************************************
    539          * Function Name  : LIS3DH_SetBLE
    540          * Description    : Set Endianess (MSB/LSB)
    541          * Input          : BLE_LSB / BLE_MSB
    542          * Output         : None
    543          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    544          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    545          status_t LIS3DH_SetBLE(LIS3DH_Endianess_t ble) {
   \                     LIS3DH_SetBLE:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    546              u8_t value;
    547          
    548              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetBLE_0
    549                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetBLE_1
    550          
    551              value &= 0xBF;	
   \                     ??LIS3DH_SetBLE_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    552              value |= (ble<<LIS3DH_BLE);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    553          
    554              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2023             MOVS     R0,#+35
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetBLE_2
    555                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetBLE_1
    556          
    557              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetBLE_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetBLE_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    558          }
    559          
    560          
    561          /*******************************************************************************
    562          * Function Name  : LIS3DH_SetSelfTest
    563          * Description    : Set Self Test Modality
    564          * Input          : LIS3DH_SELF_TEST_DISABLE/ST_0/ST_1
    565          * Output         : None
    566          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    567          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    568          status_t LIS3DH_SetSelfTest(LIS3DH_SelfTest_t st) {
   \                     LIS3DH_SetSelfTest:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    569              u8_t value;
    570          
    571              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetSelfTest_0
    572                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetSelfTest_1
    573          
    574              value &= 0xF9;
   \                     ??LIS3DH_SetSelfTest_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00F9      ANDS     R0,R0,#0xF9
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    575              value |= (st<<LIS3DH_ST);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x0044      ORRS     R0,R0,R4, LSL #+1
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    576          
    577              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2023             MOVS     R0,#+35
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetSelfTest_2
    578                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetSelfTest_1
    579          
    580              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetSelfTest_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetSelfTest_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    581          }
    582          
    583          
    584          /*******************************************************************************
    585          * Function Name  : LIS3DH_HPFClick
    586          * Description    : Enable/Disable High Pass Filter for click
    587          * Input          : MEMS_ENABLE/MEMS_DISABLE
    588          * Output         : None
    589          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    590          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    591          status_t LIS3DH_HPFClickEnable(State_t hpfe) {
   \                     LIS3DH_HPFClickEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    592              u8_t value;
    593          
    594              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_HPFClickEnable_0
    595                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_HPFClickEnable_1
    596          
    597              value &= 0xFB;
   \                     ??LIS3DH_HPFClickEnable_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    598              value |= (hpfe<<LIS3DH_HPCLICK);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x0084      ORRS     R0,R0,R4, LSL #+2
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    599          
    600              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_HPFClickEnable_2
    601                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_HPFClickEnable_1
    602          
    603              return MEMS_SUCCESS;
   \                     ??LIS3DH_HPFClickEnable_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_HPFClickEnable_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    604          }
    605          
    606          
    607          /*******************************************************************************
    608          * Function Name  : LIS3DH_HPFAOI1
    609          * Description    : Enable/Disable High Pass Filter for AOI on INT_1
    610          * Input          : MEMS_ENABLE/MEMS_DISABLE
    611          * Output         : None
    612          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    613          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    614          status_t LIS3DH_HPFAOI1Enable(State_t hpfe) {
   \                     LIS3DH_HPFAOI1Enable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    615              u8_t value;
    616          
    617              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_HPFAOI1Enable_0
    618                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE014             B.N      ??LIS3DH_HPFAOI1Enable_1
    619          
    620              value &= 0xFE;
   \                     ??LIS3DH_HPFAOI1Enable_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    621              value |= (hpfe<<LIS3DH_HPIS1);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x4320             ORRS     R0,R4,R0
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    622          
    623              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   0000002C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000030   0x2021             MOVS     R0,#+33
   \   00000032   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??LIS3DH_HPFAOI1Enable_2
    624                  return MEMS_ERROR;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE000             B.N      ??LIS3DH_HPFAOI1Enable_1
    625          
    626              return MEMS_SUCCESS;
   \                     ??LIS3DH_HPFAOI1Enable_2:
   \   0000003E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_HPFAOI1Enable_1:
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    627          }
    628          
    629          
    630          /*******************************************************************************
    631          * Function Name  : LIS3DH_HPFAOI2
    632          * Description    : Enable/Disable High Pass Filter for AOI on INT_2
    633          * Input          : MEMS_ENABLE/MEMS_DISABLE
    634          * Output         : None
    635          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    636          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    637          status_t LIS3DH_HPFAOI2Enable(State_t hpfe) {
   \                     LIS3DH_HPFAOI2Enable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    638              u8_t value;
    639          
    640              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_HPFAOI2Enable_0
    641                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_HPFAOI2Enable_1
    642          
    643              value &= 0xFD;
   \                     ??LIS3DH_HPFAOI2Enable_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    644              value |= (hpfe<<LIS3DH_HPIS2);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x0044      ORRS     R0,R0,R4, LSL #+1
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    645          
    646              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_HPFAOI2Enable_2
    647                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_HPFAOI2Enable_1
    648          
    649              return MEMS_SUCCESS;
   \                     ??LIS3DH_HPFAOI2Enable_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_HPFAOI2Enable_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    650          }
    651          
    652          
    653          /*******************************************************************************
    654          * Function Name  : LIS3DH_SetHPFMode
    655          * Description    : Set High Pass Filter Modality
    656          * Input          : LIS3DH_HPM_NORMAL_MODE_RES/LIS3DH_HPM_REF_SIGNAL/
    657          LIS3DH_HPM_NORMAL_MODE/LIS3DH_HPM_AUTORESET_INT
    658          * Output         : None
    659          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    660          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    661          status_t LIS3DH_SetHPFMode(LIS3DH_HPFMode_t hpm) {
   \                     LIS3DH_SetHPFMode:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    662              u8_t value;
    663          
    664              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetHPFMode_0
    665                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetHPFMode_1
    666          
    667              value &= 0x3F;
   \                     ??LIS3DH_SetHPFMode_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    668              value |= (hpm<<LIS3DH_HPM);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    669          
    670              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetHPFMode_2
    671                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetHPFMode_1
    672          
    673              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetHPFMode_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetHPFMode_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    674          }
    675          
    676          
    677          /*******************************************************************************
    678          * Function Name  : LIS3DH_SetHPFCutOFF
    679          * Description    : Set High Pass CUT OFF Freq
    680          * Input          : HPFCF [0,3]
    681          * Output         : None
    682          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    683          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    684          status_t LIS3DH_SetHPFCutOFF(LIS3DH_HPFCutOffFreq_t hpf) {
   \                     LIS3DH_SetHPFCutOFF:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    685              u8_t value;
    686          
    687              if (hpf > 3)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xDB01             BLT.N    ??LIS3DH_SetHPFCutOFF_0
    688                  return MEMS_ERROR;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE01D             B.N      ??LIS3DH_SetHPFCutOFF_1
    689          
    690              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \                     ??LIS3DH_SetHPFCutOFF_0:
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2021             MOVS     R0,#+33
   \   00000014   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetHPFCutOFF_2
    691                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE015             B.N      ??LIS3DH_SetHPFCutOFF_1
    692          
    693              value &= 0xCF;
   \                     ??LIS3DH_SetHPFCutOFF_2:
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0xF010 0x00CF      ANDS     R0,R0,#0xCF
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    694              value |= (hpf<<LIS3DH_HPCF);
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0xEA50 0x1004      ORRS     R0,R0,R4, LSL #+4
   \   00000034   0xF88D 0x0000      STRB     R0,[SP, #+0]
    695          
    696              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   00000038   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000003C   0x2021             MOVS     R0,#+33
   \   0000003E   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD101             BNE.N    ??LIS3DH_SetHPFCutOFF_3
    697                  return MEMS_ERROR;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE000             B.N      ??LIS3DH_SetHPFCutOFF_1
    698          
    699              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetHPFCutOFF_3:
   \   0000004A   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetHPFCutOFF_1:
   \   0000004C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    700          
    701          }
    702          
    703          
    704          /*******************************************************************************
    705          * Function Name  : LIS3DH_SetFilterDataSel
    706          * Description    : Set Filter Data Selection bypassed or sent to FIFO OUT register
    707          * Input          : MEMS_SET, MEMS_RESET
    708          * Output         : None
    709          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    710          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    711          status_t LIS3DH_SetFilterDataSel(State_t state) {
   \                     LIS3DH_SetFilterDataSel:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    712              u8_t value;
    713          
    714              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG2, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetFilterDataSel_0
    715                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetFilterDataSel_1
    716          
    717              value &= 0xF7;
   \                     ??LIS3DH_SetFilterDataSel_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    718              value |= (state<<LIS3DH_FDS);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x00C4      ORRS     R0,R0,R4, LSL #+3
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    719          
    720              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG2, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2021             MOVS     R0,#+33
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetFilterDataSel_2
    721                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetFilterDataSel_1
    722          
    723              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetFilterDataSel_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetFilterDataSel_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    724          
    725          }
    726          
    727          
    728          /*******************************************************************************
    729          * Function Name  : LIS3DH_SetInt1Pin
    730          * Description    : Set Interrupt1 pin Function
    731          * Input          :  LIS3DH_CLICK_ON_PIN_INT1_ENABLE/DISABLE    | LIS3DH_I1_INT1_ON_PIN_INT1_ENABLE/DISABLE |
    732          LIS3DH_I1_INT2_ON_PIN_INT1_ENABLE/DISABLE  | LIS3DH_I1_DRDY1_ON_INT1_ENABLE/DISABLE    |
    733          LIS3DH_I1_DRDY2_ON_INT1_ENABLE/DISABLE     | LIS3DH_WTM_ON_INT1_ENABLE/DISABLE         |
    734          LIS3DH_INT1_OVERRUN_ENABLE/DISABLE
    735          * example        : SetInt1Pin(LIS3DH_CLICK_ON_PIN_INT1_ENABLE | LIS3DH_I1_INT1_ON_PIN_INT1_ENABLE |
    736          LIS3DH_I1_INT2_ON_PIN_INT1_DISABLE | LIS3DH_I1_DRDY1_ON_INT1_ENABLE | LIS3DH_I1_DRDY2_ON_INT1_ENABLE |
    737          LIS3DH_WTM_ON_INT1_DISABLE | LIS3DH_INT1_OVERRUN_DISABLE   )
    738          * Note           : To enable Interrupt signals on INT1 Pad (You MUST use all input variable in the argument, as example)
    739          * Output         : None
    740          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    741          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    742          status_t LIS3DH_SetInt1Pin(LIS3DH_IntPinConf_t pinConf) {
   \                     LIS3DH_SetInt1Pin:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    743              u8_t value;
    744          
    745              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG3, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2022             MOVS     R0,#+34
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetInt1Pin_0
    746                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE011             B.N      ??LIS3DH_SetInt1Pin_1
    747          
    748              value &= 0x00;
   \                     ??LIS3DH_SetInt1Pin_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    749              value |= pinConf;
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0x4320             ORRS     R0,R4,R0
   \   00000022   0xF88D 0x0000      STRB     R0,[SP, #+0]
    750          
    751              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG3, value) )
   \   00000026   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000002A   0x2022             MOVS     R0,#+34
   \   0000002C   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE.N    ??LIS3DH_SetInt1Pin_2
    752                  return MEMS_ERROR;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE000             B.N      ??LIS3DH_SetInt1Pin_1
    753          
    754              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetInt1Pin_2:
   \   00000038   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetInt1Pin_1:
   \   0000003A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    755          }
    756          
    757          
    758          /*******************************************************************************
    759          * Function Name  : LIS3DH_SetInt2Pin
    760          * Description    : Set Interrupt2 pin Function
    761          * Input          : LIS3DH_CLICK_ON_PIN_INT2_ENABLE/DISABLE   | LIS3DH_I2_INT1_ON_PIN_INT2_ENABLE/DISABLE |
    762          LIS3DH_I2_INT2_ON_PIN_INT2_ENABLE/DISABLE | LIS3DH_I2_BOOT_ON_INT2_ENABLE/DISABLE |
    763          LIS3DH_INT_ACTIVE_HIGH/LOW
    764          * example        : LIS3DH_SetInt2Pin(LIS3DH_CLICK_ON_PIN_INT2_ENABLE/DISABLE | LIS3DH_I2_INT1_ON_PIN_INT2_ENABLE/DISABLE |
    765          LIS3DH_I2_INT2_ON_PIN_INT2_ENABLE/DISABLE | LIS3DH_I2_BOOT_ON_INT2_ENABLE/DISABLE |
    766          LIS3DH_INT_ACTIVE_HIGH/LOW)
    767          * Note           : To enable Interrupt signals on INT2 Pad (You MUST use all input variable in the argument, as example)
    768          * Output         : None
    769          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    770          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    771          status_t LIS3DH_SetInt2Pin(LIS3DH_IntPinConf_t pinConf) {
   \                     LIS3DH_SetInt2Pin:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    772              u8_t value;
    773          
    774              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG6, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2025             MOVS     R0,#+37
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetInt2Pin_0
    775                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE011             B.N      ??LIS3DH_SetInt2Pin_1
    776          
    777              value &= 0x00;
   \                     ??LIS3DH_SetInt2Pin_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    778              value |= pinConf;
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0x4320             ORRS     R0,R4,R0
   \   00000022   0xF88D 0x0000      STRB     R0,[SP, #+0]
    779          
    780              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG6, value) )
   \   00000026   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000002A   0x2025             MOVS     R0,#+37
   \   0000002C   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE.N    ??LIS3DH_SetInt2Pin_2
    781                  return MEMS_ERROR;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE000             B.N      ??LIS3DH_SetInt2Pin_1
    782          
    783              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetInt2Pin_2:
   \   00000038   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetInt2Pin_1:
   \   0000003A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    784          }
    785          
    786          
    787          /*******************************************************************************
    788          * Function Name  : LIS3DH_SetClickCFG
    789          * Description    : Set Click Interrupt config Function
    790          * Input          : LIS3DH_ZD_ENABLE/DISABLE | LIS3DH_ZS_ENABLE/DISABLE  | LIS3DH_YD_ENABLE/DISABLE  |
    791          LIS3DH_YS_ENABLE/DISABLE | LIS3DH_XD_ENABLE/DISABLE  | LIS3DH_XS_ENABLE/DISABLE
    792          * example        : LIS3DH_SetClickCFG( LIS3DH_ZD_ENABLE | LIS3DH_ZS_DISABLE | LIS3DH_YD_ENABLE |
    793          LIS3DH_YS_DISABLE | LIS3DH_XD_ENABLE | LIS3DH_XS_ENABLE)
    794          * Note           : You MUST use all input variable in the argument, as example
    795          * Output         : None
    796          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    797          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    798          status_t LIS3DH_SetClickCFG(u8_t status) {
   \                     LIS3DH_SetClickCFG:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    799              u8_t value;
    800          
    801              if( !LIS3DH_ReadReg(LIS3DH_CLICK_CFG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2038             MOVS     R0,#+56
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetClickCFG_0
    802                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE014             B.N      ??LIS3DH_SetClickCFG_1
    803          
    804              value &= 0xC0;
   \                     ??LIS3DH_SetClickCFG_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    805              value |= status;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x4320             ORRS     R0,R4,R0
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    806          
    807              if( !LIS3DH_WriteReg(LIS3DH_CLICK_CFG, value) )
   \   0000002C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000030   0x2038             MOVS     R0,#+56
   \   00000032   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??LIS3DH_SetClickCFG_2
    808                  return MEMS_ERROR;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE000             B.N      ??LIS3DH_SetClickCFG_1
    809          
    810              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetClickCFG_2:
   \   0000003E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetClickCFG_1:
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    811          }
    812          
    813          
    814          /*******************************************************************************
    815          * Function Name  : LIS3DH_SetClickTHS
    816          * Description    : Set Click Interrupt threshold
    817          * Input          : Click-click Threshold value [0-127]
    818          * Output         : None
    819          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    820          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    821          status_t LIS3DH_SetClickTHS(u8_t ths) {
   \                     LIS3DH_SetClickTHS:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    822          
    823              if(ths>127)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0xDB01             BLT.N    ??LIS3DH_SetClickTHS_0
    824                  return MEMS_ERROR;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE009             B.N      ??LIS3DH_SetClickTHS_1
    825          
    826              if( !LIS3DH_WriteReg(LIS3DH_CLICK_THS, ths) )
   \                     ??LIS3DH_SetClickTHS_0:
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x203A             MOVS     R0,#+58
   \   00000014   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetClickTHS_2
    827                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??LIS3DH_SetClickTHS_1
    828          
    829              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetClickTHS_2:
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetClickTHS_1:
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    830          }
    831          
    832          
    833          /*******************************************************************************
    834          * Function Name  : LIS3DH_SetClickLIMIT
    835          * Description    : Set Click Interrupt Time Limit
    836          * Input          : Click-click Time Limit value [0-127]
    837          * Output         : None
    838          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    839          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    840          status_t LIS3DH_SetClickLIMIT(u8_t t_limit) {
   \                     LIS3DH_SetClickLIMIT:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    841          
    842              if(t_limit>127)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0xDB01             BLT.N    ??LIS3DH_SetClickLIMIT_0
    843                  return MEMS_ERROR;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE009             B.N      ??LIS3DH_SetClickLIMIT_1
    844          
    845              if( !LIS3DH_WriteReg(LIS3DH_TIME_LIMIT, t_limit) )
   \                     ??LIS3DH_SetClickLIMIT_0:
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x203B             MOVS     R0,#+59
   \   00000014   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetClickLIMIT_2
    846                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??LIS3DH_SetClickLIMIT_1
    847          
    848              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetClickLIMIT_2:
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetClickLIMIT_1:
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    849          }
    850          
    851          
    852          /*******************************************************************************
    853          * Function Name  : LIS3DH_SetClickLATENCY
    854          * Description    : Set Click Interrupt Time Latency
    855          * Input          : Click-click Time Latency value [0-255]
    856          * Output         : None
    857          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    858          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    859          status_t LIS3DH_SetClickLATENCY(u8_t t_latency) {
   \                     LIS3DH_SetClickLATENCY:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    860          
    861              if( !LIS3DH_WriteReg(LIS3DH_TIME_LATENCY, t_latency) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x203C             MOVS     R0,#+60
   \   0000000A   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetClickLATENCY_0
    862                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE000             B.N      ??LIS3DH_SetClickLATENCY_1
    863          
    864              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetClickLATENCY_0:
   \   00000016   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetClickLATENCY_1:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    865          }
    866          
    867          
    868          /*******************************************************************************
    869          * Function Name  : LIS3DH_SetClickWINDOW
    870          * Description    : Set Click Interrupt Time Window
    871          * Input          : Click-click Time Window value [0-255]
    872          * Output         : None
    873          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    874          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    875          status_t LIS3DH_SetClickWINDOW(u8_t t_window) {
   \                     LIS3DH_SetClickWINDOW:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    876          
    877              if( !LIS3DH_WriteReg(LIS3DH_TIME_WINDOW, t_window) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0x203D             MOVS     R0,#+61
   \   0000000A   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetClickWINDOW_0
    878                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE000             B.N      ??LIS3DH_SetClickWINDOW_1
    879          
    880              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetClickWINDOW_0:
   \   00000016   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetClickWINDOW_1:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    881          }
    882          
    883          
    884          /*******************************************************************************
    885          * Function Name  : LIS3DH_GetClickResponse
    886          * Description    : Get Click Interrupt Response by CLICK_SRC REGISTER
    887          * Input          : char to empty by Click Response Typedef
    888          * Output         : None
    889          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    890          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    891          status_t LIS3DH_GetClickResponse(u8_t* res) {
   \                     LIS3DH_GetClickResponse:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    892              u8_t value;
    893          
    894              if( !LIS3DH_ReadReg(LIS3DH_CLICK_SRC, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2039             MOVS     R0,#+57
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetClickResponse_0
    895                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE07A             B.N      ??LIS3DH_GetClickResponse_1
    896          
    897              value &= 0x7F;
   \                     ??LIS3DH_GetClickResponse_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    898          
    899              if((value & LIS3DH_IA)==0) {
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x0640             LSLS     R0,R0,#+25
   \   00000028   0xD403             BMI.N    ??LIS3DH_GetClickResponse_2
    900                  *res = LIS3DH_NO_CLICK;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
    901                  return MEMS_SUCCESS;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE06C             B.N      ??LIS3DH_GetClickResponse_1
    902              }
    903              else {
    904                  if (value & LIS3DH_DCLICK){
   \                     ??LIS3DH_GetClickResponse_2:
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0x0680             LSLS     R0,R0,#+26
   \   00000038   0xD533             BPL.N    ??LIS3DH_GetClickResponse_3
    905                      if (value & LIS3DH_CLICK_SIGN){
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x0700             LSLS     R0,R0,#+28
   \   00000040   0xD517             BPL.N    ??LIS3DH_GetClickResponse_4
    906                          if (value & LIS3DH_CLICK_Z) {
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0x0740             LSLS     R0,R0,#+29
   \   00000048   0xD503             BPL.N    ??LIS3DH_GetClickResponse_5
    907                              *res = LIS3DH_DCLICK_Z_N;
   \   0000004A   0x202C             MOVS     R0,#+44
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
    908                              return MEMS_SUCCESS;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xE05C             B.N      ??LIS3DH_GetClickResponse_1
    909                          }
    910                          if (value & LIS3DH_CLICK_Y) {
   \                     ??LIS3DH_GetClickResponse_5:
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x0780             LSLS     R0,R0,#+30
   \   00000058   0xD503             BPL.N    ??LIS3DH_GetClickResponse_6
    911                              *res = LIS3DH_DCLICK_Y_N;
   \   0000005A   0x202A             MOVS     R0,#+42
   \   0000005C   0x7020             STRB     R0,[R4, #+0]
    912                              return MEMS_SUCCESS;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xE054             B.N      ??LIS3DH_GetClickResponse_1
    913                          }
    914                          if (value & LIS3DH_CLICK_X) {
   \                     ??LIS3DH_GetClickResponse_6:
   \   00000062   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000066   0x07C0             LSLS     R0,R0,#+31
   \   00000068   0xD54F             BPL.N    ??LIS3DH_GetClickResponse_7
    915                              *res = LIS3DH_DCLICK_X_N;
   \   0000006A   0x2029             MOVS     R0,#+41
   \   0000006C   0x7020             STRB     R0,[R4, #+0]
    916                              return MEMS_SUCCESS;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xE04C             B.N      ??LIS3DH_GetClickResponse_1
    917                          }
    918                      }
    919                      else{
    920                          if (value & LIS3DH_CLICK_Z) {
   \                     ??LIS3DH_GetClickResponse_4:
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0x0740             LSLS     R0,R0,#+29
   \   00000078   0xD503             BPL.N    ??LIS3DH_GetClickResponse_8
    921                              *res = LIS3DH_DCLICK_Z_P;
   \   0000007A   0x2024             MOVS     R0,#+36
   \   0000007C   0x7020             STRB     R0,[R4, #+0]
    922                              return MEMS_SUCCESS;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0xE044             B.N      ??LIS3DH_GetClickResponse_1
    923                          }
    924                          if (value & LIS3DH_CLICK_Y) {
   \                     ??LIS3DH_GetClickResponse_8:
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0x0780             LSLS     R0,R0,#+30
   \   00000088   0xD503             BPL.N    ??LIS3DH_GetClickResponse_9
    925                              *res = LIS3DH_DCLICK_Y_P;
   \   0000008A   0x2022             MOVS     R0,#+34
   \   0000008C   0x7020             STRB     R0,[R4, #+0]
    926                              return MEMS_SUCCESS;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xE03C             B.N      ??LIS3DH_GetClickResponse_1
    927                          }
    928                          if (value & LIS3DH_CLICK_X) {
   \                     ??LIS3DH_GetClickResponse_9:
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x07C0             LSLS     R0,R0,#+31
   \   00000098   0xD537             BPL.N    ??LIS3DH_GetClickResponse_7
    929                              *res = LIS3DH_DCLICK_X_P;
   \   0000009A   0x2021             MOVS     R0,#+33
   \   0000009C   0x7020             STRB     R0,[R4, #+0]
    930                              return MEMS_SUCCESS;
   \   0000009E   0x2001             MOVS     R0,#+1
   \   000000A0   0xE034             B.N      ??LIS3DH_GetClickResponse_1
    931                          }
    932                      }
    933                  }
    934                  else{
    935                      if (value & LIS3DH_CLICK_SIGN){
   \                     ??LIS3DH_GetClickResponse_3:
   \   000000A2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A6   0x0700             LSLS     R0,R0,#+28
   \   000000A8   0xD517             BPL.N    ??LIS3DH_GetClickResponse_10
    936                          if (value & LIS3DH_CLICK_Z) {
   \   000000AA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AE   0x0740             LSLS     R0,R0,#+29
   \   000000B0   0xD503             BPL.N    ??LIS3DH_GetClickResponse_11
    937                              *res = LIS3DH_SCLICK_Z_N;
   \   000000B2   0x201C             MOVS     R0,#+28
   \   000000B4   0x7020             STRB     R0,[R4, #+0]
    938                              return MEMS_SUCCESS;
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0xE028             B.N      ??LIS3DH_GetClickResponse_1
    939                          }
    940                          if (value & LIS3DH_CLICK_Y) {
   \                     ??LIS3DH_GetClickResponse_11:
   \   000000BA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BE   0x0780             LSLS     R0,R0,#+30
   \   000000C0   0xD503             BPL.N    ??LIS3DH_GetClickResponse_12
    941                              *res = LIS3DH_SCLICK_Y_N;
   \   000000C2   0x201A             MOVS     R0,#+26
   \   000000C4   0x7020             STRB     R0,[R4, #+0]
    942                              return MEMS_SUCCESS;
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0xE020             B.N      ??LIS3DH_GetClickResponse_1
    943                          }
    944                          if (value & LIS3DH_CLICK_X) {
   \                     ??LIS3DH_GetClickResponse_12:
   \   000000CA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000CE   0x07C0             LSLS     R0,R0,#+31
   \   000000D0   0xD51B             BPL.N    ??LIS3DH_GetClickResponse_7
    945                              *res = LIS3DH_SCLICK_X_N;
   \   000000D2   0x2019             MOVS     R0,#+25
   \   000000D4   0x7020             STRB     R0,[R4, #+0]
    946                              return MEMS_SUCCESS;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0xE018             B.N      ??LIS3DH_GetClickResponse_1
    947                          }
    948                      }
    949                      else{
    950                          if (value & LIS3DH_CLICK_Z) {
   \                     ??LIS3DH_GetClickResponse_10:
   \   000000DA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000DE   0x0740             LSLS     R0,R0,#+29
   \   000000E0   0xD503             BPL.N    ??LIS3DH_GetClickResponse_13
    951                              *res = LIS3DH_SCLICK_Z_P;
   \   000000E2   0x2014             MOVS     R0,#+20
   \   000000E4   0x7020             STRB     R0,[R4, #+0]
    952                              return MEMS_SUCCESS;
   \   000000E6   0x2001             MOVS     R0,#+1
   \   000000E8   0xE010             B.N      ??LIS3DH_GetClickResponse_1
    953                          }
    954                          if (value & LIS3DH_CLICK_Y) {
   \                     ??LIS3DH_GetClickResponse_13:
   \   000000EA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000EE   0x0780             LSLS     R0,R0,#+30
   \   000000F0   0xD503             BPL.N    ??LIS3DH_GetClickResponse_14
    955                              *res = LIS3DH_SCLICK_Y_P;
   \   000000F2   0x2012             MOVS     R0,#+18
   \   000000F4   0x7020             STRB     R0,[R4, #+0]
    956                              return MEMS_SUCCESS;
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0xE008             B.N      ??LIS3DH_GetClickResponse_1
    957                          }
    958                          if (value & LIS3DH_CLICK_X) {
   \                     ??LIS3DH_GetClickResponse_14:
   \   000000FA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000FE   0x07C0             LSLS     R0,R0,#+31
   \   00000100   0xD503             BPL.N    ??LIS3DH_GetClickResponse_7
    959                              *res = LIS3DH_SCLICK_X_P;
   \   00000102   0x2011             MOVS     R0,#+17
   \   00000104   0x7020             STRB     R0,[R4, #+0]
    960                              return MEMS_SUCCESS;
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0xE000             B.N      ??LIS3DH_GetClickResponse_1
    961                          }
    962                      }
    963                  }
    964              }
    965              return MEMS_ERROR;
   \                     ??LIS3DH_GetClickResponse_7:
   \   0000010A   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetClickResponse_1:
   \   0000010C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    966          }
    967          
    968          
    969          /*******************************************************************************
    970          * Function Name  : LIS3DH_Int1LatchEnable
    971          * Description    : Enable Interrupt 1 Latching function
    972          * Input          : ENABLE/DISABLE
    973          * Output         : None
    974          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    975          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    976          status_t LIS3DH_Int1LatchEnable(State_t latch) {
   \                     LIS3DH_Int1LatchEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    977              u8_t value;
    978          
    979              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2024             MOVS     R0,#+36
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_Int1LatchEnable_0
    980                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_Int1LatchEnable_1
    981          
    982              value &= 0xF7;
   \                     ??LIS3DH_Int1LatchEnable_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    983              value |= latch<<LIS3DH_LIR_INT1;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x00C4      ORRS     R0,R0,R4, LSL #+3
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    984          
    985              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2024             MOVS     R0,#+36
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_Int1LatchEnable_2
    986                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_Int1LatchEnable_1
    987          
    988              return MEMS_SUCCESS;
   \                     ??LIS3DH_Int1LatchEnable_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_Int1LatchEnable_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    989          }
    990          
    991          
    992          /*******************************************************************************
    993          * Function Name  : LIS3DH_ResetInt1Latch
    994          * Description    : Reset Interrupt 1 Latching function
    995          * Input          : None
    996          * Output         : None
    997          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
    998          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    999          status_t LIS3DH_ResetInt1Latch(void) {
   \                     LIS3DH_ResetInt1Latch:
   \   00000000   0xB580             PUSH     {R7,LR}
   1000              u8_t value;
   1001          
   1002              if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0x2031             MOVS     R0,#+49
   \   00000006   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??LIS3DH_ResetInt1Latch_0
   1003                  return MEMS_ERROR;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE000             B.N      ??LIS3DH_ResetInt1Latch_1
   1004          
   1005              return MEMS_SUCCESS;
   \                     ??LIS3DH_ResetInt1Latch_0:
   \   00000012   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_ResetInt1Latch_1:
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
   1006          }
   1007          
   1008          
   1009          /*******************************************************************************
   1010          * Function Name  : LIS3DH_SetIntConfiguration
   1011          * Description    : Interrupt 1 Configuration (without LIS3DH_6D_INT)
   1012          * Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
   1013          * Output         : None
   1014          * Note           : You MUST use all input variable in the argument, as example
   1015          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1016          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1017          status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
   \                     LIS3DH_SetIntConfiguration:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1018              u8_t value;
   1019          
   1020              if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetIntConfiguration_0
   1021                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE014             B.N      ??LIS3DH_SetIntConfiguration_1
   1022          
   1023              value &= 0x40;
   \                     ??LIS3DH_SetIntConfiguration_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1024              value |= ic;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x4320             ORRS     R0,R4,R0
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1025          
   1026              if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
   \   0000002C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000030   0x2030             MOVS     R0,#+48
   \   00000032   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??LIS3DH_SetIntConfiguration_2
   1027                  return MEMS_ERROR;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE000             B.N      ??LIS3DH_SetIntConfiguration_1
   1028          
   1029              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetIntConfiguration_2:
   \   0000003E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetIntConfiguration_1:
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1030          }
   1031          
   1032          
   1033          /*******************************************************************************
   1034          * Function Name  : LIS3DH_SetIntMode
   1035          * Description    : Interrupt 1 Configuration mode (OR, 6D Movement, AND, 6D Position)
   1036          * Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
   1037          LIS3DH_INT_MODE_6D_POSITION
   1038          * Output         : None
   1039          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1040          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1041          status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
   \                     LIS3DH_SetIntMode:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1042              u8_t value;
   1043          
   1044              if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2030             MOVS     R0,#+48
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetIntMode_0
   1045                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetIntMode_1
   1046          
   1047              value &= 0x3F;
   \                     ??LIS3DH_SetIntMode_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1048              value |= (int_mode<<LIS3DH_INT_6D);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1049          
   1050              if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x2030             MOVS     R0,#+48
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetIntMode_2
   1051                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetIntMode_1
   1052          
   1053              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetIntMode_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetIntMode_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1054          }
   1055          
   1056          
   1057          /*******************************************************************************
   1058          * Function Name  : LIS3DH_SetInt6D4DConfiguration
   1059          * Description    : 6D, 4D Interrupt Configuration
   1060          * Input          : LIS3DH_INT1_6D_ENABLE, LIS3DH_INT1_4D_ENABLE, LIS3DH_INT1_6D_4D_DISABLE
   1061          * Output         : None
   1062          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1063          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1064          status_t LIS3DH_SetInt6D4DConfiguration(LIS3DH_INT_6D_4D_t ic) {
   \                     LIS3DH_SetInt6D4DConfiguration:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1065              u8_t value;
   1066              u8_t value2;
   1067          
   1068              if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
   \   00000006   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000000A   0x2030             MOVS     R0,#+48
   \   0000000C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_0
   1069                  return MEMS_ERROR;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE065             B.N      ??LIS3DH_SetInt6D4DConfiguration_1
   1070              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value2) )
   \                     ??LIS3DH_SetInt6D4DConfiguration_0:
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x2024             MOVS     R0,#+36
   \   0000001C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_2
   1071                  return MEMS_ERROR;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE05D             B.N      ??LIS3DH_SetInt6D4DConfiguration_1
   1072          
   1073              if(ic == LIS3DH_INT1_6D_ENABLE){
   \                     ??LIS3DH_SetInt6D4DConfiguration_2:
   \   00000028   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   0x2C01             CMP      R4,#+1
   \   0000002C   0xD115             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_3
   1074                  value &= 0xBF;
   \   0000002E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000032   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000036   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1075                  value |= (MEMS_ENABLE<<LIS3DH_INT_6D);
   \   0000003A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000003E   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000042   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1076                  value2 &= 0xFB;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1077                  value2 |= (MEMS_DISABLE<<LIS3DH_D4D_INT1);
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1078              }
   1079          
   1080              if(ic == LIS3DH_INT1_4D_ENABLE){
   \                     ??LIS3DH_SetInt6D4DConfiguration_3:
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C02             CMP      R4,#+2
   \   0000005E   0xD117             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_4
   1081                  value &= 0xBF;
   \   00000060   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000064   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000068   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1082                  value |= (MEMS_ENABLE<<LIS3DH_INT_6D);
   \   0000006C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000070   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000074   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1083                  value2 &= 0xFB;
   \   00000078   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007C   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   00000080   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1084                  value2 |= (MEMS_ENABLE<<LIS3DH_D4D_INT1);
   \   00000084   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000088   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000008C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1085              }
   1086          
   1087              if(ic == LIS3DH_INT1_6D_4D_DISABLE){
   \                     ??LIS3DH_SetInt6D4DConfiguration_4:
   \   00000090   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000092   0x2C00             CMP      R4,#+0
   \   00000094   0xD113             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_5
   1088                  value &= 0xBF;
   \   00000096   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000009A   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000009E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1089                  value |= (MEMS_DISABLE<<LIS3DH_INT_6D);
   \   000000A2   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000A6   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1090                  value2 &= 0xFB;
   \   000000AA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000AE   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \   000000B2   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1091                  value2 |= (MEMS_DISABLE<<LIS3DH_D4D_INT1);
   \   000000B6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BA   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1092              }
   1093          
   1094              if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
   \                     ??LIS3DH_SetInt6D4DConfiguration_5:
   \   000000BE   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000C2   0x2030             MOVS     R0,#+48
   \   000000C4   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD101             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_6
   1095                  return MEMS_ERROR;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0xE009             B.N      ??LIS3DH_SetInt6D4DConfiguration_1
   1096              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value2) )
   \                     ??LIS3DH_SetInt6D4DConfiguration_6:
   \   000000D0   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000D4   0x2024             MOVS     R0,#+36
   \   000000D6   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD101             BNE.N    ??LIS3DH_SetInt6D4DConfiguration_7
   1097                  return MEMS_ERROR;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0xE000             B.N      ??LIS3DH_SetInt6D4DConfiguration_1
   1098          
   1099              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetInt6D4DConfiguration_7:
   \   000000E2   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetInt6D4DConfiguration_1:
   \   000000E4   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1100          }
   1101          
   1102          
   1103          /*******************************************************************************
   1104          * Function Name  : LIS3DH_Get6DPosition
   1105          * Description    : 6D, 4D Interrupt Position Detect
   1106          * Input          : Byte to empty by POSITION_6D_t Typedef
   1107          * Output         : None
   1108          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1109          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1110          status_t LIS3DH_Get6DPosition(u8_t* val){
   \                     LIS3DH_Get6DPosition:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1111              u8_t value;
   1112          
   1113              if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_Get6DPosition_0
   1114                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE026             B.N      ??LIS3DH_Get6DPosition_1
   1115          
   1116              value &= 0x7F;
   \                     ??LIS3DH_Get6DPosition_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1117          
   1118              switch (value){
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x2841             CMP      R0,#+65
   \   00000028   0xD010             BEQ.N    ??LIS3DH_Get6DPosition_2
   \   0000002A   0x2842             CMP      R0,#+66
   \   0000002C   0xD00B             BEQ.N    ??LIS3DH_Get6DPosition_3
   \   0000002E   0x2844             CMP      R0,#+68
   \   00000030   0xD006             BEQ.N    ??LIS3DH_Get6DPosition_4
   \   00000032   0x2848             CMP      R0,#+72
   \   00000034   0xD00D             BEQ.N    ??LIS3DH_Get6DPosition_5
   \   00000036   0x2850             CMP      R0,#+80
   \   00000038   0xD011             BEQ.N    ??LIS3DH_Get6DPosition_6
   \   0000003A   0x2860             CMP      R0,#+96
   \   0000003C   0xD00C             BEQ.N    ??LIS3DH_Get6DPosition_7
   \   0000003E   0xE010             B.N      ??LIS3DH_Get6DPosition_8
   1119              case LIS3DH_UP_SX:
   1120                  *val = LIS3DH_UP_SX;
   \                     ??LIS3DH_Get6DPosition_4:
   \   00000040   0x2044             MOVS     R0,#+68
   \   00000042   0x7020             STRB     R0,[R4, #+0]
   1121                  break;
   \   00000044   0xE00D             B.N      ??LIS3DH_Get6DPosition_8
   1122              case LIS3DH_UP_DX:
   1123                  *val = LIS3DH_UP_DX;
   \                     ??LIS3DH_Get6DPosition_3:
   \   00000046   0x2042             MOVS     R0,#+66
   \   00000048   0x7020             STRB     R0,[R4, #+0]
   1124                  break;
   \   0000004A   0xE00A             B.N      ??LIS3DH_Get6DPosition_8
   1125              case LIS3DH_DW_SX:
   1126                  *val = LIS3DH_DW_SX;
   \                     ??LIS3DH_Get6DPosition_2:
   \   0000004C   0x2041             MOVS     R0,#+65
   \   0000004E   0x7020             STRB     R0,[R4, #+0]
   1127                  break;
   \   00000050   0xE007             B.N      ??LIS3DH_Get6DPosition_8
   1128              case LIS3DH_DW_DX:
   1129                  *val = LIS3DH_DW_DX;
   \                     ??LIS3DH_Get6DPosition_5:
   \   00000052   0x2048             MOVS     R0,#+72
   \   00000054   0x7020             STRB     R0,[R4, #+0]
   1130                  break;
   \   00000056   0xE004             B.N      ??LIS3DH_Get6DPosition_8
   1131              case LIS3DH_TOP:
   1132                  *val = LIS3DH_TOP;
   \                     ??LIS3DH_Get6DPosition_7:
   \   00000058   0x2060             MOVS     R0,#+96
   \   0000005A   0x7020             STRB     R0,[R4, #+0]
   1133                  break;
   \   0000005C   0xE001             B.N      ??LIS3DH_Get6DPosition_8
   1134              case LIS3DH_BOTTOM:
   1135                  *val = LIS3DH_BOTTOM;
   \                     ??LIS3DH_Get6DPosition_6:
   \   0000005E   0x2050             MOVS     R0,#+80
   \   00000060   0x7020             STRB     R0,[R4, #+0]
   1136                  break;
   1137              }
   1138          
   1139              return MEMS_SUCCESS;
   \                     ??LIS3DH_Get6DPosition_8:
   \   00000062   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_Get6DPosition_1:
   \   00000064   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1140          }
   1141          
   1142          
   1143          /*******************************************************************************
   1144          * Function Name  : LIS3DH_SetInt1Threshold
   1145          * Description    : Sets Interrupt 1 Threshold
   1146          * Input          : Threshold = [0,31]
   1147          * Output         : None
   1148          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1149          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1150          status_t LIS3DH_SetInt1Threshold(u8_t ths) {
   \                     LIS3DH_SetInt1Threshold:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1151              if (ths > 127)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0xDB01             BLT.N    ??LIS3DH_SetInt1Threshold_0
   1152                  return MEMS_ERROR;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE009             B.N      ??LIS3DH_SetInt1Threshold_1
   1153          
   1154              if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
   \                     ??LIS3DH_SetInt1Threshold_0:
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x2032             MOVS     R0,#+50
   \   00000014   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetInt1Threshold_2
   1155                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??LIS3DH_SetInt1Threshold_1
   1156          
   1157              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetInt1Threshold_2:
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetInt1Threshold_1:
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
   1158          }
   1159          
   1160          
   1161          /*******************************************************************************
   1162          * Function Name  : LIS3DH_SetInt1Duration
   1163          * Description    : Sets Interrupt 1 Duration
   1164          * Input          : Duration value
   1165          * Output         : None
   1166          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1167          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1168          status_t LIS3DH_SetInt1Duration(LIS3DH_Int1Conf_t id) {
   \                     LIS3DH_SetInt1Duration:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1169          
   1170              if (id > 127)
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C80             CMP      R4,#+128
   \   00000008   0xDB01             BLT.N    ??LIS3DH_SetInt1Duration_0
   1171                  return MEMS_ERROR;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE009             B.N      ??LIS3DH_SetInt1Duration_1
   1172          
   1173              if( !LIS3DH_WriteReg(LIS3DH_INT1_DURATION, id) )
   \                     ??LIS3DH_SetInt1Duration_0:
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x2033             MOVS     R0,#+51
   \   00000014   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetInt1Duration_2
   1174                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE000             B.N      ??LIS3DH_SetInt1Duration_1
   1175          
   1176              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetInt1Duration_2:
   \   00000020   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetInt1Duration_1:
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
   1177          }
   1178          
   1179          
   1180          /*******************************************************************************
   1181          * Function Name  : LIS3DH_FIFOModeEnable
   1182          * Description    : Sets Fifo Modality
   1183          * Input          : LIS3DH_FIFO_DISABLE, LIS3DH_FIFO_BYPASS_MODE, LIS3DH_FIFO_MODE,
   1184          LIS3DH_FIFO_STREAM_MODE, LIS3DH_FIFO_TRIGGER_MODE
   1185          * Output         : None
   1186          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1187          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1188          status_t LIS3DH_FIFOModeEnable(LIS3DH_FifoMode_t fm) {
   \                     LIS3DH_FIFOModeEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1189              u8_t value;
   1190          
   1191              if(fm == LIS3DH_FIFO_DISABLE) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xD131             BNE.N    ??LIS3DH_FIFOModeEnable_0
   1192                  if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x202E             MOVS     R0,#+46
   \   00000010   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_1
   1193                      return MEMS_ERROR;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE11E             B.N      ??LIS3DH_FIFOModeEnable_2
   1194          
   1195                  value &= 0x1F;
   \                     ??LIS3DH_FIFOModeEnable_1:
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1196                  value |= (LIS3DH_FIFO_BYPASS_MODE<<LIS3DH_FM);
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1197          
   1198                  if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )           //fifo mode bypass
   \   00000030   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000034   0x202E             MOVS     R0,#+46
   \   00000036   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_3
   1199                      return MEMS_ERROR;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE10B             B.N      ??LIS3DH_FIFOModeEnable_2
   1200                  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \                     ??LIS3DH_FIFOModeEnable_3:
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x2024             MOVS     R0,#+36
   \   00000046   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_4
   1201                      return MEMS_ERROR;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE103             B.N      ??LIS3DH_FIFOModeEnable_2
   1202          
   1203                  value &= 0xBF;
   \                     ??LIS3DH_FIFOModeEnable_4:
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000005A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1204          
   1205                  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )               //fifo disable
   \   0000005E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000062   0x2024             MOVS     R0,#+36
   \   00000064   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_0
   1206                      return MEMS_ERROR;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xE0F4             B.N      ??LIS3DH_FIFOModeEnable_2
   1207              }
   1208          
   1209              if(fm == LIS3DH_FIFO_BYPASS_MODE)   {
   \                     ??LIS3DH_FIFOModeEnable_0:
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x2C00             CMP      R4,#+0
   \   00000074   0xD139             BNE.N    ??LIS3DH_FIFOModeEnable_5
   1210                  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \   00000076   0xA900             ADD      R1,SP,#+0
   \   00000078   0x2024             MOVS     R0,#+36
   \   0000007A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_6
   1211                      return MEMS_ERROR;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xE0E9             B.N      ??LIS3DH_FIFOModeEnable_2
   1212          
   1213                  value &= 0xBF;
   \                     ??LIS3DH_FIFOModeEnable_6:
   \   00000086   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008A   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   0000008E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1214                  value |= MEMS_SET<<LIS3DH_FIFO_EN;
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000009A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1215          
   1216                  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )               //fifo enable
   \   0000009E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000A2   0x2024             MOVS     R0,#+36
   \   000000A4   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_7
   1217                      return MEMS_ERROR;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE0D4             B.N      ??LIS3DH_FIFOModeEnable_2
   1218                  if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \                     ??LIS3DH_FIFOModeEnable_7:
   \   000000B0   0xA900             ADD      R1,SP,#+0
   \   000000B2   0x202E             MOVS     R0,#+46
   \   000000B4   0x.... 0x....      BL       LIS3DH_ReadReg
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_8
   1219                      return MEMS_ERROR;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xE0CC             B.N      ??LIS3DH_FIFOModeEnable_2
   1220          
   1221                  value &= 0x1f;
   \                     ??LIS3DH_FIFOModeEnable_8:
   \   000000C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C4   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   000000C8   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1222                  value |= (fm<<LIS3DH_FM);                     //fifo mode configuration
   \   000000CC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D0   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   000000D4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1223          
   1224                  if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   000000D8   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000DC   0x202E             MOVS     R0,#+46
   \   000000DE   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_5
   1225                      return MEMS_ERROR;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xE0B7             B.N      ??LIS3DH_FIFOModeEnable_2
   1226              }
   1227          
   1228              if(fm == LIS3DH_FIFO_MODE)   {
   \                     ??LIS3DH_FIFOModeEnable_5:
   \   000000EA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EC   0x2C01             CMP      R4,#+1
   \   000000EE   0xD139             BNE.N    ??LIS3DH_FIFOModeEnable_9
   1229                  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \   000000F0   0xA900             ADD      R1,SP,#+0
   \   000000F2   0x2024             MOVS     R0,#+36
   \   000000F4   0x.... 0x....      BL       LIS3DH_ReadReg
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_10
   1230                      return MEMS_ERROR;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0xE0AC             B.N      ??LIS3DH_FIFOModeEnable_2
   1231          
   1232                  value &= 0xBF;
   \                     ??LIS3DH_FIFOModeEnable_10:
   \   00000100   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000104   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000108   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1233                  value |= MEMS_SET<<LIS3DH_FIFO_EN;
   \   0000010C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000110   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000114   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1234          
   1235                  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )               //fifo enable
   \   00000118   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000011C   0x2024             MOVS     R0,#+36
   \   0000011E   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_11
   1236                      return MEMS_ERROR;
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0xE097             B.N      ??LIS3DH_FIFOModeEnable_2
   1237                  if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \                     ??LIS3DH_FIFOModeEnable_11:
   \   0000012A   0xA900             ADD      R1,SP,#+0
   \   0000012C   0x202E             MOVS     R0,#+46
   \   0000012E   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_12
   1238                      return MEMS_ERROR;
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0xE08F             B.N      ??LIS3DH_FIFOModeEnable_2
   1239          
   1240                  value &= 0x1f;
   \                     ??LIS3DH_FIFOModeEnable_12:
   \   0000013A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000013E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000142   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1241                  value |= (fm<<LIS3DH_FM);                      //fifo mode configuration
   \   00000146   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000014A   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   0000014E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1242          
   1243                  if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   00000152   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000156   0x202E             MOVS     R0,#+46
   \   00000158   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_9
   1244                      return MEMS_ERROR;
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0xE07A             B.N      ??LIS3DH_FIFOModeEnable_2
   1245              }
   1246          
   1247              if(fm == LIS3DH_FIFO_STREAM_MODE)   {
   \                     ??LIS3DH_FIFOModeEnable_9:
   \   00000164   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000166   0x2C02             CMP      R4,#+2
   \   00000168   0xD139             BNE.N    ??LIS3DH_FIFOModeEnable_13
   1248                  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \   0000016A   0xA900             ADD      R1,SP,#+0
   \   0000016C   0x2024             MOVS     R0,#+36
   \   0000016E   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_14
   1249                      return MEMS_ERROR;
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0xE06F             B.N      ??LIS3DH_FIFOModeEnable_2
   1250          
   1251                  value &= 0xBF;
   \                     ??LIS3DH_FIFOModeEnable_14:
   \   0000017A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000017E   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   00000182   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1252                  value |= MEMS_SET<<LIS3DH_FIFO_EN;
   \   00000186   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000018A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000018E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1253          
   1254                  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )               //fifo enable
   \   00000192   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000196   0x2024             MOVS     R0,#+36
   \   00000198   0x.... 0x....      BL       LIS3DH_WriteReg
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_15
   1255                      return MEMS_ERROR;
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0xE05A             B.N      ??LIS3DH_FIFOModeEnable_2
   1256                  if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \                     ??LIS3DH_FIFOModeEnable_15:
   \   000001A4   0xA900             ADD      R1,SP,#+0
   \   000001A6   0x202E             MOVS     R0,#+46
   \   000001A8   0x.... 0x....      BL       LIS3DH_ReadReg
   \   000001AC   0x2800             CMP      R0,#+0
   \   000001AE   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_16
   1257                      return MEMS_ERROR;
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0xE052             B.N      ??LIS3DH_FIFOModeEnable_2
   1258          
   1259                  value &= 0x1f;
   \                     ??LIS3DH_FIFOModeEnable_16:
   \   000001B4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001B8   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   000001BC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1260                  value |= (fm<<LIS3DH_FM);                      //fifo mode configuration
   \   000001C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001C4   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   000001C8   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1261          
   1262                  if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   000001CC   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001D0   0x202E             MOVS     R0,#+46
   \   000001D2   0x.... 0x....      BL       LIS3DH_WriteReg
   \   000001D6   0x2800             CMP      R0,#+0
   \   000001D8   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_13
   1263                      return MEMS_ERROR;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0xE03D             B.N      ??LIS3DH_FIFOModeEnable_2
   1264              }
   1265          
   1266              if(fm == LIS3DH_FIFO_TRIGGER_MODE)   {
   \                     ??LIS3DH_FIFOModeEnable_13:
   \   000001DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001E0   0x2C03             CMP      R4,#+3
   \   000001E2   0xD139             BNE.N    ??LIS3DH_FIFOModeEnable_17
   1267                  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG5, &value) )
   \   000001E4   0xA900             ADD      R1,SP,#+0
   \   000001E6   0x2024             MOVS     R0,#+36
   \   000001E8   0x.... 0x....      BL       LIS3DH_ReadReg
   \   000001EC   0x2800             CMP      R0,#+0
   \   000001EE   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_18
   1268                      return MEMS_ERROR;
   \   000001F0   0x2000             MOVS     R0,#+0
   \   000001F2   0xE032             B.N      ??LIS3DH_FIFOModeEnable_2
   1269          
   1270                  value &= 0xBF;
   \                     ??LIS3DH_FIFOModeEnable_18:
   \   000001F4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001F8   0xF010 0x00BF      ANDS     R0,R0,#0xBF
   \   000001FC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1271                  value |= MEMS_SET<<LIS3DH_FIFO_EN;
   \   00000200   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000204   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000208   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1272          
   1273                  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG5, value) )               //fifo enable
   \   0000020C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000210   0x2024             MOVS     R0,#+36
   \   00000212   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000216   0x2800             CMP      R0,#+0
   \   00000218   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_19
   1274                      return MEMS_ERROR;
   \   0000021A   0x2000             MOVS     R0,#+0
   \   0000021C   0xE01D             B.N      ??LIS3DH_FIFOModeEnable_2
   1275                  if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \                     ??LIS3DH_FIFOModeEnable_19:
   \   0000021E   0xA900             ADD      R1,SP,#+0
   \   00000220   0x202E             MOVS     R0,#+46
   \   00000222   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_20
   1276                      return MEMS_ERROR;
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0xE015             B.N      ??LIS3DH_FIFOModeEnable_2
   1277          
   1278                  value &= 0x1f;
   \                     ??LIS3DH_FIFOModeEnable_20:
   \   0000022E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000232   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000236   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1279                  value |= (fm<<LIS3DH_FM);                      //fifo mode configuration
   \   0000023A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000023E   0xEA50 0x1084      ORRS     R0,R0,R4, LSL #+6
   \   00000242   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1280          
   1281                  if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   00000246   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000024A   0x202E             MOVS     R0,#+46
   \   0000024C   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000250   0x2800             CMP      R0,#+0
   \   00000252   0xD101             BNE.N    ??LIS3DH_FIFOModeEnable_17
   1282                      return MEMS_ERROR;
   \   00000254   0x2000             MOVS     R0,#+0
   \   00000256   0xE000             B.N      ??LIS3DH_FIFOModeEnable_2
   1283              }
   1284          
   1285              return MEMS_SUCCESS;
   \                     ??LIS3DH_FIFOModeEnable_17:
   \   00000258   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_FIFOModeEnable_2:
   \   0000025A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1286          }
   1287          
   1288          
   1289          /*******************************************************************************
   1290          * Function Name  : LIS3DH_SetTriggerInt
   1291          * Description    : Trigger event liked to trigger signal INT1/INT2
   1292          * Input          : LIS3DH_TRIG_INT1/LIS3DH_TRIG_INT2
   1293          * Output         : None
   1294          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1295          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1296          status_t LIS3DH_SetTriggerInt(LIS3DH_TrigInt_t tr) {
   \                     LIS3DH_SetTriggerInt:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1297              u8_t value;
   1298          
   1299              if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x202E             MOVS     R0,#+46
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetTriggerInt_0
   1300                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE015             B.N      ??LIS3DH_SetTriggerInt_1
   1301          
   1302              value &= 0xDF;
   \                     ??LIS3DH_SetTriggerInt_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1303              value |= (tr<<LIS3DH_TR);
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0xEA50 0x1044      ORRS     R0,R0,R4, LSL #+5
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1304          
   1305              if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   0000002E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000032   0x202E             MOVS     R0,#+46
   \   00000034   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD101             BNE.N    ??LIS3DH_SetTriggerInt_2
   1306                  return MEMS_ERROR;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE000             B.N      ??LIS3DH_SetTriggerInt_1
   1307          
   1308              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetTriggerInt_2:
   \   00000040   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetTriggerInt_1:
   \   00000042   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1309          }
   1310          
   1311          
   1312          /*******************************************************************************
   1313          * Function Name  : LIS3DH_SetWaterMark
   1314          * Description    : Sets Watermark Value
   1315          * Input          : Watermark = [0,31]
   1316          * Output         : None
   1317          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1318          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1319          status_t LIS3DH_SetWaterMark(u8_t wtm) {
   \                     LIS3DH_SetWaterMark:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1320              u8_t value;
   1321          
   1322              if(wtm > 31)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C20             CMP      R4,#+32
   \   0000000A   0xDB01             BLT.N    ??LIS3DH_SetWaterMark_0
   1323                  return MEMS_ERROR;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE01C             B.N      ??LIS3DH_SetWaterMark_1
   1324          
   1325              if( !LIS3DH_ReadReg(LIS3DH_FIFO_CTRL_REG, &value) )
   \                     ??LIS3DH_SetWaterMark_0:
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x202E             MOVS     R0,#+46
   \   00000014   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??LIS3DH_SetWaterMark_2
   1326                  return MEMS_ERROR;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE014             B.N      ??LIS3DH_SetWaterMark_1
   1327          
   1328              value &= 0xE0;
   \                     ??LIS3DH_SetWaterMark_2:
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0xF010 0x00E0      ANDS     R0,R0,#0xE0
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1329              value |= wtm;
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0x4320             ORRS     R0,R4,R0
   \   00000032   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1330          
   1331              if( !LIS3DH_WriteReg(LIS3DH_FIFO_CTRL_REG, value) )
   \   00000036   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000003A   0x202E             MOVS     R0,#+46
   \   0000003C   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD101             BNE.N    ??LIS3DH_SetWaterMark_3
   1332                  return MEMS_ERROR;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE000             B.N      ??LIS3DH_SetWaterMark_1
   1333          
   1334              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetWaterMark_3:
   \   00000048   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetWaterMark_1:
   \   0000004A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1335          }
   1336          
   1337          
   1338          /*******************************************************************************
   1339          * Function Name  : LIS3DH_GetStatusReg
   1340          * Description    : Read the status register
   1341          * Input          : char to empty by Status Reg Value
   1342          * Output         : None
   1343          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1344          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1345          status_t LIS3DH_GetStatusReg(u8_t* val) {
   \                     LIS3DH_GetStatusReg:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1346              if( !LIS3DH_ReadReg(LIS3DH_STATUS_REG, val) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x2027             MOVS     R0,#+39
   \   00000008   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LIS3DH_GetStatusReg_0
   1347                  return MEMS_ERROR;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??LIS3DH_GetStatusReg_1
   1348          
   1349              return MEMS_SUCCESS;
   \                     ??LIS3DH_GetStatusReg_0:
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetStatusReg_1:
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   1350          }
   1351          
   1352          
   1353          /*******************************************************************************
   1354          * Function Name  : LIS3DH_GetStatusBIT
   1355          * Description    : Read the status register BIT
   1356          * Input          : LIS3DH_STATUS_REG_ZYXOR, LIS3DH_STATUS_REG_ZOR, LIS3DH_STATUS_REG_YOR, LIS3DH_STATUS_REG_XOR,
   1357          LIS3DH_STATUS_REG_ZYXDA, LIS3DH_STATUS_REG_ZDA, LIS3DH_STATUS_REG_YDA, LIS3DH_STATUS_REG_XDA,
   1358          LIS3DH_DATAREADY_BIT
   1359          val: Byte to be filled with the status bit	
   1360          * Output         : status register BIT
   1361          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1362          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1363          status_t LIS3DH_GetStatusBit(u8_t statusBIT, u8_t* val) {
   \                     LIS3DH_GetStatusBit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1364              u8_t value;
   1365          
   1366              if( !LIS3DH_ReadReg(LIS3DH_STATUS_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2027             MOVS     R0,#+39
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetStatusBit_0
   1367                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE09C             B.N      ??LIS3DH_GetStatusBit_1
   1368          
   1369              switch (statusBIT){
   \                     ??LIS3DH_GetStatusBit_0:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xF000 0x8086      BEQ.W    ??LIS3DH_GetStatusBit_2
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD072             BEQ.N    ??LIS3DH_GetStatusBit_3
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xD05F             BEQ.N    ??LIS3DH_GetStatusBit_4
   \   00000028   0x2808             CMP      R0,#+8
   \   0000002A   0xD04C             BEQ.N    ??LIS3DH_GetStatusBit_5
   \   0000002C   0x2810             CMP      R0,#+16
   \   0000002E   0xD039             BEQ.N    ??LIS3DH_GetStatusBit_6
   \   00000030   0x2820             CMP      R0,#+32
   \   00000032   0xD026             BEQ.N    ??LIS3DH_GetStatusBit_7
   \   00000034   0x2840             CMP      R0,#+64
   \   00000036   0xD013             BEQ.N    ??LIS3DH_GetStatusBit_8
   \   00000038   0x2880             CMP      R0,#+128
   \   0000003A   0xF040 0x8088      BNE.W    ??LIS3DH_GetStatusBit_9
   1370              case LIS3DH_STATUS_REG_ZYXOR:
   1371                  if(value &= LIS3DH_STATUS_REG_ZYXOR){
   \                     ??LIS3DH_GetStatusBit_10:
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   00000046   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_11
   1372                      *val = MEMS_SET;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x7028             STRB     R0,[R5, #+0]
   1373                      return MEMS_SUCCESS;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE07B             B.N      ??LIS3DH_GetStatusBit_1
   1374                  }
   1375                  else{
   1376                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_11:
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x7028             STRB     R0,[R5, #+0]
   1377                      return MEMS_SUCCESS;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE077             B.N      ??LIS3DH_GetStatusBit_1
   1378                  }
   1379              case LIS3DH_STATUS_REG_ZOR:
   1380                  if(value &= LIS3DH_STATUS_REG_ZOR){
   \                     ??LIS3DH_GetStatusBit_8:
   \   00000060   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000064   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   00000068   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_12
   1381                      *val = MEMS_SET;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x7028             STRB     R0,[R5, #+0]
   1382                      return MEMS_SUCCESS;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xE06A             B.N      ??LIS3DH_GetStatusBit_1
   1383                  }
   1384                  else{
   1385                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_12:
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x7028             STRB     R0,[R5, #+0]
   1386                      return MEMS_SUCCESS;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0xE066             B.N      ??LIS3DH_GetStatusBit_1
   1387                  }
   1388              case LIS3DH_STATUS_REG_YOR:
   1389                  if(value &= LIS3DH_STATUS_REG_YOR){
   \                     ??LIS3DH_GetStatusBit_7:
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   0000008A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_13
   1390                      *val = MEMS_SET;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x7028             STRB     R0,[R5, #+0]
   1391                      return MEMS_SUCCESS;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0xE059             B.N      ??LIS3DH_GetStatusBit_1
   1392                  }
   1393                  else{
   1394                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_13:
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x7028             STRB     R0,[R5, #+0]
   1395                      return MEMS_SUCCESS;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0xE055             B.N      ??LIS3DH_GetStatusBit_1
   1396                  }
   1397              case LIS3DH_STATUS_REG_XOR:
   1398                  if(value &= LIS3DH_STATUS_REG_XOR){
   \                     ??LIS3DH_GetStatusBit_6:
   \   000000A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A8   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   000000AC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_14
   1399                      *val = MEMS_SET;
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x7028             STRB     R0,[R5, #+0]
   1400                      return MEMS_SUCCESS;
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0xE048             B.N      ??LIS3DH_GetStatusBit_1
   1401                  }
   1402                  else{
   1403                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_14:
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x7028             STRB     R0,[R5, #+0]
   1404                      return MEMS_SUCCESS;
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE044             B.N      ??LIS3DH_GetStatusBit_1
   1405                  }
   1406              case LIS3DH_STATUS_REG_ZYXDA:
   1407                  if(value &= LIS3DH_STATUS_REG_ZYXDA){
   \                     ??LIS3DH_GetStatusBit_5:
   \   000000C6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000CA   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   000000CE   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_15
   1408                      *val = MEMS_SET;
   \   000000D8   0x2001             MOVS     R0,#+1
   \   000000DA   0x7028             STRB     R0,[R5, #+0]
   1409                      return MEMS_SUCCESS;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xE037             B.N      ??LIS3DH_GetStatusBit_1
   1410                  }
   1411                  else{
   1412                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_15:
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x7028             STRB     R0,[R5, #+0]
   1413                      return MEMS_SUCCESS;
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0xE033             B.N      ??LIS3DH_GetStatusBit_1
   1414                  }
   1415              case LIS3DH_STATUS_REG_ZDA:
   1416                  if(value &= LIS3DH_STATUS_REG_ZDA){
   \                     ??LIS3DH_GetStatusBit_4:
   \   000000E8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000EC   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   000000F0   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000F4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_16
   1417                      *val = MEMS_SET;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x7028             STRB     R0,[R5, #+0]
   1418                      return MEMS_SUCCESS;
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0xE026             B.N      ??LIS3DH_GetStatusBit_1
   1419                  }
   1420                  else{
   1421                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_16:
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x7028             STRB     R0,[R5, #+0]
   1422                      return MEMS_SUCCESS;
   \   00000106   0x2001             MOVS     R0,#+1
   \   00000108   0xE022             B.N      ??LIS3DH_GetStatusBit_1
   1423                  }
   1424              case LIS3DH_STATUS_REG_YDA:
   1425                  if(value &= LIS3DH_STATUS_REG_YDA){
   \                     ??LIS3DH_GetStatusBit_3:
   \   0000010A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000010E   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   00000112   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000116   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_17
   1426                      *val = MEMS_SET;
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0x7028             STRB     R0,[R5, #+0]
   1427                      return MEMS_SUCCESS;
   \   00000120   0x2001             MOVS     R0,#+1
   \   00000122   0xE015             B.N      ??LIS3DH_GetStatusBit_1
   1428                  }
   1429                  else{
   1430                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_17:
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x7028             STRB     R0,[R5, #+0]
   1431                      return MEMS_SUCCESS;
   \   00000128   0x2001             MOVS     R0,#+1
   \   0000012A   0xE011             B.N      ??LIS3DH_GetStatusBit_1
   1432                  }
   1433              case LIS3DH_STATUS_REG_XDA:
   1434                  if(value &= LIS3DH_STATUS_REG_XDA){
   \                     ??LIS3DH_GetStatusBit_2:
   \   0000012C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000130   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000134   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD003             BEQ.N    ??LIS3DH_GetStatusBit_18
   1435                      *val = MEMS_SET;
   \   0000013E   0x2001             MOVS     R0,#+1
   \   00000140   0x7028             STRB     R0,[R5, #+0]
   1436                      return MEMS_SUCCESS;
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0xE004             B.N      ??LIS3DH_GetStatusBit_1
   1437                  }
   1438                  else{
   1439                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetStatusBit_18:
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x7028             STRB     R0,[R5, #+0]
   1440                      return MEMS_SUCCESS;
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0xE000             B.N      ??LIS3DH_GetStatusBit_1
   1441                  }
   1442          
   1443              }
   1444              return MEMS_ERROR;
   \                     ??LIS3DH_GetStatusBit_9:
   \   0000014E   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetStatusBit_1:
   \   00000150   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1445          }
   1446          
   1447          
   1448          /*******************************************************************************
   1449          * Function Name  : LIS3DH_GetAccAxesRaw
   1450          * Description    : Read the Acceleration Values Output Registers
   1451          * Input          : buffer to empity by AxesRaw_t Typedef
   1452          * Output         : None
   1453          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1454          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1455          status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
   \                     LIS3DH_GetAccAxesRaw:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1456              i16_t value;
   1457              u8_t *valueL = (u8_t *)(&value);
   \   00000006   0xAD00             ADD      R5,SP,#+0
   1458              u8_t *valueH = ((u8_t *)(&value)+1);
   \   00000008   0xF10D 0x0601      ADD      R6,SP,#+1
   1459          
   1460              if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x2028             MOVS     R0,#+40
   \   00000010   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_0
   1461                  return MEMS_ERROR;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE031             B.N      ??LIS3DH_GetAccAxesRaw_1
   1462          
   1463              if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
   \                     ??LIS3DH_GetAccAxesRaw_0:
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0x2029             MOVS     R0,#+41
   \   00000020   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_2
   1464                  return MEMS_ERROR;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE029             B.N      ??LIS3DH_GetAccAxesRaw_1
   1465          
   1466              buff->AXIS_X = value;
   \                     ??LIS3DH_GetAccAxesRaw_2:
   \   0000002C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000030   0x8020             STRH     R0,[R4, #+0]
   1467          
   1468              if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x202A             MOVS     R0,#+42
   \   00000036   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_3
   1469                  return MEMS_ERROR;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE01E             B.N      ??LIS3DH_GetAccAxesRaw_1
   1470          
   1471              if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
   \                     ??LIS3DH_GetAccAxesRaw_3:
   \   00000042   0x0031             MOVS     R1,R6
   \   00000044   0x202B             MOVS     R0,#+43
   \   00000046   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_4
   1472                  return MEMS_ERROR;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE016             B.N      ??LIS3DH_GetAccAxesRaw_1
   1473          
   1474              buff->AXIS_Y = value;
   \                     ??LIS3DH_GetAccAxesRaw_4:
   \   00000052   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000056   0x8060             STRH     R0,[R4, #+2]
   1475          
   1476              if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
   \   00000058   0x0029             MOVS     R1,R5
   \   0000005A   0x202C             MOVS     R0,#+44
   \   0000005C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_5
   1477                  return MEMS_ERROR;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xE00B             B.N      ??LIS3DH_GetAccAxesRaw_1
   1478          
   1479              if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
   \                     ??LIS3DH_GetAccAxesRaw_5:
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x202D             MOVS     R0,#+45
   \   0000006C   0x.... 0x....      BL       LIS3DH_ReadReg
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD101             BNE.N    ??LIS3DH_GetAccAxesRaw_6
   1480                  return MEMS_ERROR;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE003             B.N      ??LIS3DH_GetAccAxesRaw_1
   1481          
   1482              buff->AXIS_Z = value;
   \                     ??LIS3DH_GetAccAxesRaw_6:
   \   00000078   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000007C   0x80A0             STRH     R0,[R4, #+4]
   1483          
   1484              return MEMS_SUCCESS;
   \   0000007E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetAccAxesRaw_1:
   \   00000080   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   1485          }
   1486          
   1487          
   1488          /*******************************************************************************
   1489          * Function Name  : LIS3DH_GetInt1Src
   1490          * Description    : Reset Interrupt 1 Latching function
   1491          * Input          : Char to empty by Int1 source value
   1492          * Output         : None
   1493          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1494          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1495          status_t LIS3DH_GetInt1Src(u8_t* val) {
   \                     LIS3DH_GetInt1Src:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1496          
   1497              if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, val) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x2031             MOVS     R0,#+49
   \   00000008   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LIS3DH_GetInt1Src_0
   1498                  return MEMS_ERROR;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??LIS3DH_GetInt1Src_1
   1499          
   1500              return MEMS_SUCCESS;
   \                     ??LIS3DH_GetInt1Src_0:
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetInt1Src_1:
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   1501          }
   1502          
   1503          
   1504          /*******************************************************************************
   1505          * Function Name  : LIS3DH_GetInt1SrcBit
   1506          * Description    : Reset Interrupt 1 Latching function
   1507          * Input          : statusBIT: LIS3DH_INT_SRC_IA, LIS3DH_INT_SRC_ZH, LIS3DH_INT_SRC_ZL.....
   1508          *                  val: Byte to be filled with the status bit
   1509          * Output         : None
   1510          * Return         : Status of BIT [MEMS_ERROR, MEMS_SUCCESS]
   1511          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1512          status_t LIS3DH_GetInt1SrcBit(u8_t statusBIT, u8_t* val) {
   \                     LIS3DH_GetInt1SrcBit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1513              u8_t value;
   1514          
   1515              if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2031             MOVS     R0,#+49
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetInt1SrcBit_0
   1516                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE08C             B.N      ??LIS3DH_GetInt1SrcBit_1
   1517          
   1518              if(statusBIT == LIS3DH_INT1_SRC_IA){
   \                     ??LIS3DH_GetInt1SrcBit_0:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C40             CMP      R4,#+64
   \   0000001A   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_2
   1519                  if(value &= LIS3DH_INT1_SRC_IA){
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_3
   1520                      *val = MEMS_SET;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x7028             STRB     R0,[R5, #+0]
   1521                      return MEMS_SUCCESS;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE07C             B.N      ??LIS3DH_GetInt1SrcBit_1
   1522                  }
   1523                  else{
   1524                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_3:
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7028             STRB     R0,[R5, #+0]
   1525                      return MEMS_SUCCESS;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE078             B.N      ??LIS3DH_GetInt1SrcBit_1
   1526                  }
   1527              }
   1528          
   1529              if(statusBIT == LIS3DH_INT1_SRC_ZH){
   \                     ??LIS3DH_GetInt1SrcBit_2:
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C20             CMP      R4,#+32
   \   00000042   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_4
   1530                  if(value &= LIS3DH_INT1_SRC_ZH){
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x0020      ANDS     R0,R0,#0x20
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_5
   1531                      *val = MEMS_SET;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x7028             STRB     R0,[R5, #+0]
   1532                      return MEMS_SUCCESS;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE068             B.N      ??LIS3DH_GetInt1SrcBit_1
   1533                  }
   1534                  else{
   1535                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_5:
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x7028             STRB     R0,[R5, #+0]
   1536                      return MEMS_SUCCESS;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xE064             B.N      ??LIS3DH_GetInt1SrcBit_1
   1537                  }
   1538              }
   1539          
   1540              if(statusBIT == LIS3DH_INT1_SRC_ZL){
   \                     ??LIS3DH_GetInt1SrcBit_4:
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C10             CMP      R4,#+16
   \   0000006A   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_6
   1541                  if(value &= LIS3DH_INT1_SRC_ZL){
   \   0000006C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000070   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   00000074   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_7
   1542                      *val = MEMS_SET;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x7028             STRB     R0,[R5, #+0]
   1543                      return MEMS_SUCCESS;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xE054             B.N      ??LIS3DH_GetInt1SrcBit_1
   1544                  }
   1545                  else{
   1546                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_7:
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x7028             STRB     R0,[R5, #+0]
   1547                      return MEMS_SUCCESS;
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xE050             B.N      ??LIS3DH_GetInt1SrcBit_1
   1548                  }
   1549              }
   1550          
   1551              if(statusBIT == LIS3DH_INT1_SRC_YH){
   \                     ??LIS3DH_GetInt1SrcBit_6:
   \   0000008E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000090   0x2C08             CMP      R4,#+8
   \   00000092   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_8
   1552                  if(value &= LIS3DH_INT1_SRC_YH){
   \   00000094   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000098   0xF010 0x0008      ANDS     R0,R0,#0x8
   \   0000009C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_9
   1553                      *val = MEMS_SET;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x7028             STRB     R0,[R5, #+0]
   1554                      return MEMS_SUCCESS;
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0xE040             B.N      ??LIS3DH_GetInt1SrcBit_1
   1555                  }
   1556                  else{
   1557                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_9:
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x7028             STRB     R0,[R5, #+0]
   1558                      return MEMS_SUCCESS;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0xE03C             B.N      ??LIS3DH_GetInt1SrcBit_1
   1559                  }
   1560              }
   1561          
   1562              if(statusBIT == LIS3DH_INT1_SRC_YL){
   \                     ??LIS3DH_GetInt1SrcBit_8:
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0x2C04             CMP      R4,#+4
   \   000000BA   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_10
   1563                  if(value &= LIS3DH_INT1_SRC_YL){
   \   000000BC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C0   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   000000C4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_11
   1564                      *val = MEMS_SET;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x7028             STRB     R0,[R5, #+0]
   1565                      return MEMS_SUCCESS;
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0xE02C             B.N      ??LIS3DH_GetInt1SrcBit_1
   1566                  }
   1567                  else{
   1568                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_11:
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x7028             STRB     R0,[R5, #+0]
   1569                      return MEMS_SUCCESS;
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0xE028             B.N      ??LIS3DH_GetInt1SrcBit_1
   1570                  }
   1571              }
   1572              if(statusBIT == LIS3DH_INT1_SRC_XH){
   \                     ??LIS3DH_GetInt1SrcBit_10:
   \   000000DE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E0   0x2C02             CMP      R4,#+2
   \   000000E2   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_12
   1573                  if(value &= LIS3DH_INT1_SRC_XH){
   \   000000E4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000E8   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   000000EC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000F0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_13
   1574                      *val = MEMS_SET;
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0x7028             STRB     R0,[R5, #+0]
   1575                      return MEMS_SUCCESS;
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0xE018             B.N      ??LIS3DH_GetInt1SrcBit_1
   1576                  }
   1577                  else{
   1578                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_13:
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x7028             STRB     R0,[R5, #+0]
   1579                      return MEMS_SUCCESS;
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0xE014             B.N      ??LIS3DH_GetInt1SrcBit_1
   1580                  }
   1581              }
   1582          
   1583              if(statusBIT == LIS3DH_INT1_SRC_XL){
   \                     ??LIS3DH_GetInt1SrcBit_12:
   \   00000106   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000108   0x2C01             CMP      R4,#+1
   \   0000010A   0xD110             BNE.N    ??LIS3DH_GetInt1SrcBit_14
   1584                  if(value &= LIS3DH_INT1_SRC_XL){
   \   0000010C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000110   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000114   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD003             BEQ.N    ??LIS3DH_GetInt1SrcBit_15
   1585                      *val = MEMS_SET;
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0x7028             STRB     R0,[R5, #+0]
   1586                      return MEMS_SUCCESS;
   \   00000122   0x2001             MOVS     R0,#+1
   \   00000124   0xE004             B.N      ??LIS3DH_GetInt1SrcBit_1
   1587                  }
   1588                  else{
   1589                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetInt1SrcBit_15:
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x7028             STRB     R0,[R5, #+0]
   1590                      return MEMS_SUCCESS;
   \   0000012A   0x2001             MOVS     R0,#+1
   \   0000012C   0xE000             B.N      ??LIS3DH_GetInt1SrcBit_1
   1591                  }
   1592              }
   1593              return MEMS_ERROR;
   \                     ??LIS3DH_GetInt1SrcBit_14:
   \   0000012E   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetInt1SrcBit_1:
   \   00000130   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1594          }
   1595          
   1596          
   1597          /*******************************************************************************
   1598          * Function Name  : LIS3DH_GetFifoSourceReg
   1599          * Description    : Read Fifo source Register
   1600          * Input          : Byte to empty by FIFO source register value
   1601          * Output         : None
   1602          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1603          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1604          status_t LIS3DH_GetFifoSourceReg(u8_t* val) {
   \                     LIS3DH_GetFifoSourceReg:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1605          
   1606              if( !LIS3DH_ReadReg(LIS3DH_FIFO_SRC_REG, val) )
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x202F             MOVS     R0,#+47
   \   00000008   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LIS3DH_GetFifoSourceReg_0
   1607                  return MEMS_ERROR;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE000             B.N      ??LIS3DH_GetFifoSourceReg_1
   1608          
   1609              return MEMS_SUCCESS;
   \                     ??LIS3DH_GetFifoSourceReg_0:
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetFifoSourceReg_1:
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   1610          }
   1611          
   1612          
   1613          /*******************************************************************************
   1614          * Function Name  : LIS3DH_GetFifoSourceBit
   1615          * Description    : Read Fifo WaterMark source bit
   1616          * Input          : statusBIT: LIS3DH_FIFO_SRC_WTM, LIS3DH_FIFO_SRC_OVRUN, LIS3DH_FIFO_SRC_EMPTY
   1617          *				   val: Byte to fill  with the bit value
   1618          * Output         : None
   1619          * Return         : Status of BIT [MEMS_ERROR, MEMS_SUCCESS]
   1620          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1621          status_t LIS3DH_GetFifoSourceBit(u8_t statusBIT,  u8_t* val){
   \                     LIS3DH_GetFifoSourceBit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1622              u8_t value;
   1623          
   1624              if( !LIS3DH_ReadReg(LIS3DH_FIFO_SRC_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x202F             MOVS     R0,#+47
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetFifoSourceBit_0
   1625                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE041             B.N      ??LIS3DH_GetFifoSourceBit_1
   1626          
   1627          
   1628              if(statusBIT == LIS3DH_FIFO_SRC_WTM){
   \                     ??LIS3DH_GetFifoSourceBit_0:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C80             CMP      R4,#+128
   \   0000001A   0xD110             BNE.N    ??LIS3DH_GetFifoSourceBit_2
   1629                  if(value &= LIS3DH_FIFO_SRC_WTM){
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0xF010 0x0080      ANDS     R0,R0,#0x80
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD003             BEQ.N    ??LIS3DH_GetFifoSourceBit_3
   1630                      *val = MEMS_SET;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x7028             STRB     R0,[R5, #+0]
   1631                      return MEMS_SUCCESS;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE031             B.N      ??LIS3DH_GetFifoSourceBit_1
   1632                  }
   1633                  else{
   1634                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetFifoSourceBit_3:
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7028             STRB     R0,[R5, #+0]
   1635                      return MEMS_SUCCESS;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE02D             B.N      ??LIS3DH_GetFifoSourceBit_1
   1636                  }
   1637              }
   1638          
   1639              if(statusBIT == LIS3DH_FIFO_SRC_OVRUN){
   \                     ??LIS3DH_GetFifoSourceBit_2:
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C40             CMP      R4,#+64
   \   00000042   0xD110             BNE.N    ??LIS3DH_GetFifoSourceBit_4
   1640                  if(value &= LIS3DH_FIFO_SRC_OVRUN){
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0xF010 0x0040      ANDS     R0,R0,#0x40
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD003             BEQ.N    ??LIS3DH_GetFifoSourceBit_5
   1641                      *val = MEMS_SET;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x7028             STRB     R0,[R5, #+0]
   1642                      return MEMS_SUCCESS;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE01D             B.N      ??LIS3DH_GetFifoSourceBit_1
   1643                  }
   1644                  else{
   1645                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetFifoSourceBit_5:
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x7028             STRB     R0,[R5, #+0]
   1646                      return MEMS_SUCCESS;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xE019             B.N      ??LIS3DH_GetFifoSourceBit_1
   1647                  }
   1648              }
   1649              if(statusBIT == LIS3DH_FIFO_SRC_EMPTY){
   \                     ??LIS3DH_GetFifoSourceBit_4:
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C20             CMP      R4,#+32
   \   0000006A   0xD115             BNE.N    ??LIS3DH_GetFifoSourceBit_6
   1650                  if(value &= statusBIT == LIS3DH_FIFO_SRC_EMPTY){
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x2C20             CMP      R4,#+32
   \   00000070   0xD101             BNE.N    ??LIS3DH_GetFifoSourceBit_7
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0xE000             B.N      ??LIS3DH_GetFifoSourceBit_8
   \                     ??LIS3DH_GetFifoSourceBit_7:
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetFifoSourceBit_8:
   \   00000078   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000007C   0x4008             ANDS     R0,R0,R1
   \   0000007E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD003             BEQ.N    ??LIS3DH_GetFifoSourceBit_9
   1651                      *val = MEMS_SET;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x7028             STRB     R0,[R5, #+0]
   1652                      return MEMS_SUCCESS;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xE004             B.N      ??LIS3DH_GetFifoSourceBit_1
   1653                  }
   1654                  else{
   1655                      *val = MEMS_RESET;
   \                     ??LIS3DH_GetFifoSourceBit_9:
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x7028             STRB     R0,[R5, #+0]
   1656                      return MEMS_SUCCESS;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0xE000             B.N      ??LIS3DH_GetFifoSourceBit_1
   1657                  }
   1658              }
   1659              return MEMS_ERROR;
   \                     ??LIS3DH_GetFifoSourceBit_6:
   \   00000098   0x2000             MOVS     R0,#+0
   \                     ??LIS3DH_GetFifoSourceBit_1:
   \   0000009A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1660          }
   1661          
   1662          
   1663          /*******************************************************************************
   1664          * Function Name  : LIS3DH_GetFifoSourceFSS
   1665          * Description    : Read current number of unread samples stored in FIFO
   1666          * Input          : Byte to empty by FIFO unread sample value
   1667          * Output         : None
   1668          * Return         : Status [value of FSS]
   1669          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1670          status_t LIS3DH_GetFifoSourceFSS(u8_t* val){
   \                     LIS3DH_GetFifoSourceFSS:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1671              u8_t value;
   1672          
   1673              if( !LIS3DH_ReadReg(LIS3DH_FIFO_SRC_REG, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x202F             MOVS     R0,#+47
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_GetFifoSourceFSS_0
   1674                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE009             B.N      ??LIS3DH_GetFifoSourceFSS_1
   1675          
   1676              value &= 0x1F;
   \                     ??LIS3DH_GetFifoSourceFSS_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1677          
   1678              *val = value;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x7020             STRB     R0,[R4, #+0]
   1679          
   1680              return MEMS_SUCCESS;
   \   00000028   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_GetFifoSourceFSS_1:
   \   0000002A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1681          }
   1682          
   1683          
   1684          /*******************************************************************************
   1685          * Function Name  : LIS3DH_SetSPIInterface
   1686          * Description    : Set SPI mode: 3 Wire Interface OR 4 Wire Interface
   1687          * Input          : LIS3DH_SPI_3_WIRE, LIS3DH_SPI_4_WIRE
   1688          * Output         : None
   1689          * Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
   1690          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1691          status_t LIS3DH_SetSPIInterface(LIS3DH_SPIMode_t spi) {
   \                     LIS3DH_SetSPIInterface:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1692              u8_t value;
   1693          
   1694              if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2023             MOVS     R0,#+35
   \   0000000A   0x.... 0x....      BL       LIS3DH_ReadReg
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??LIS3DH_SetSPIInterface_0
   1695                  return MEMS_ERROR;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE014             B.N      ??LIS3DH_SetSPIInterface_1
   1696          
   1697              value &= 0xFE;
   \                     ??LIS3DH_SetSPIInterface_0:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1698              value |= spi<<LIS3DH_SIM;
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x4320             ORRS     R0,R4,R0
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1699          
   1700              if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
   \   0000002C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000030   0x2023             MOVS     R0,#+35
   \   00000032   0x.... 0x....      BL       LIS3DH_WriteReg
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??LIS3DH_SetSPIInterface_2
   1701                  return MEMS_ERROR;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE000             B.N      ??LIS3DH_SetSPIInterface_1
   1702          
   1703              return MEMS_SUCCESS;
   \                     ??LIS3DH_SetSPIInterface_2:
   \   0000003E   0x2001             MOVS     R0,#+1
   \                     ??LIS3DH_SetSPIInterface_1:
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1704          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x03333334         DC32     0x3333334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x48496E40         DC32     0x48496e40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ??ODR_old_value
   1705          /******************* (C) COPYRIGHT 2012 STMicroelectronics *****END OF FILE****/
   1706          
   1707          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   Acc_to_angle
        24   -> __aeabi_d2f
        24   -> __aeabi_f2iz
        24   -> __aeabi_fdiv
        24   -> __aeabi_fmul
        24   -> __aeabi_i2d
        24   -> __aeabi_i2f
        24   -> atanf
        24   -> sqrt
      16   I2C_init
        16   -> I2C_Cmd
        16   -> I2C_Init
        16   -> PINSEL_ConfigPin
      16   LIS3DH_FIFOModeEnable
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_Get6DPosition
        16   -> LIS3DH_ReadReg
      24   LIS3DH_GetAccAxesRaw
        24   -> LIS3DH_ReadReg
      16   LIS3DH_GetAuxRaw
        16   -> LIS3DH_ReadReg
      16   LIS3DH_GetClickResponse
        16   -> LIS3DH_ReadReg
      16   LIS3DH_GetFifoSourceBit
        16   -> LIS3DH_ReadReg
      16   LIS3DH_GetFifoSourceFSS
        16   -> LIS3DH_ReadReg
       8   LIS3DH_GetFifoSourceReg
         8   -> LIS3DH_ReadReg
       8   LIS3DH_GetInt1Src
         8   -> LIS3DH_ReadReg
      16   LIS3DH_GetInt1SrcBit
        16   -> LIS3DH_ReadReg
       8   LIS3DH_GetStatusAUX
         8   -> LIS3DH_ReadReg
      16   LIS3DH_GetStatusAUXBit
        16   -> LIS3DH_ReadReg
      16   LIS3DH_GetStatusBit
        16   -> LIS3DH_ReadReg
       8   LIS3DH_GetStatusReg
         8   -> LIS3DH_ReadReg
      16   LIS3DH_GetTempRaw
        16   -> LIS3DH_ReadReg
       8   LIS3DH_GetWHO_AM_I
         8   -> LIS3DH_ReadReg
      16   LIS3DH_HPFAOI1Enable
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_HPFAOI2Enable
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_HPFClickEnable
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_Int1LatchEnable
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_ReadReg
        16   -> readByte
       8   LIS3DH_ResetInt1Latch
         8   -> LIS3DH_ReadReg
      16   LIS3DH_SetADCAux
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetAxis
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetBDU
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetBLE
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetClickCFG
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
       8   LIS3DH_SetClickLATENCY
         8   -> LIS3DH_WriteReg
       8   LIS3DH_SetClickLIMIT
         8   -> LIS3DH_WriteReg
       8   LIS3DH_SetClickTHS
         8   -> LIS3DH_WriteReg
       8   LIS3DH_SetClickWINDOW
         8   -> LIS3DH_WriteReg
      16   LIS3DH_SetFilterDataSel
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetFullScale
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetHPFCutOFF
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetHPFMode
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
       8   LIS3DH_SetInt1Duration
         8   -> LIS3DH_WriteReg
      16   LIS3DH_SetInt1Pin
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
       8   LIS3DH_SetInt1Threshold
         8   -> LIS3DH_WriteReg
      16   LIS3DH_SetInt2Pin
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetInt6D4DConfiguration
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetIntConfiguration
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetIntMode
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetMode
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetODR
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetSPIInterface
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetSelfTest
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetTemperature
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetTriggerInt
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_SetWaterMark
        16   -> LIS3DH_ReadReg
        16   -> LIS3DH_WriteReg
      16   LIS3DH_WriteReg
        16   -> writeByte
       8   LIS3DH_init
         8   -> GPIO_SetDir
         8   -> I2C_init
         8   -> LIS3DH_FIFOModeEnable
         8   -> LIS3DH_HPFAOI1Enable
         8   -> LIS3DH_SetAxis
         8   -> LIS3DH_SetBDU
         8   -> LIS3DH_SetFilterDataSel
         8   -> LIS3DH_SetFullScale
         8   -> LIS3DH_SetHPFCutOFF
         8   -> LIS3DH_SetHPFMode
         8   -> LIS3DH_SetInt1Pin
         8   -> LIS3DH_SetMode
         8   -> LIS3DH_SetODR
         8   -> LIS3DH_SetWaterMark
      16   data_effect
        16   -> abs
      56   readByte
        56   -> I2C_MasterTransferData
      64   writeByte
        64   -> I2C_MasterTransferData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
     140  Acc_to_angle
      12  Axes_calibration
      12  Axes_last
      58  I2C_init
     604  LIS3DH_FIFOModeEnable
     102  LIS3DH_Get6DPosition
     130  LIS3DH_GetAccAxesRaw
     178  LIS3DH_GetAuxRaw
     270  LIS3DH_GetClickResponse
     156  LIS3DH_GetFifoSourceBit
      44  LIS3DH_GetFifoSourceFSS
      24  LIS3DH_GetFifoSourceReg
      24  LIS3DH_GetInt1Src
     306  LIS3DH_GetInt1SrcBit
      24  LIS3DH_GetStatusAUX
     346  LIS3DH_GetStatusAUXBit
     338  LIS3DH_GetStatusBit
      24  LIS3DH_GetStatusReg
      50  LIS3DH_GetTempRaw
      24  LIS3DH_GetWHO_AM_I
      66  LIS3DH_HPFAOI1Enable
      68  LIS3DH_HPFAOI2Enable
      68  LIS3DH_HPFClickEnable
      68  LIS3DH_Int1LatchEnable
      18  LIS3DH_ReadReg
      22  LIS3DH_ResetInt1Latch
      68  LIS3DH_SetADCAux
      70  LIS3DH_SetAxis
      68  LIS3DH_SetBDU
      68  LIS3DH_SetBLE
      66  LIS3DH_SetClickCFG
      26  LIS3DH_SetClickLATENCY
      36  LIS3DH_SetClickLIMIT
      36  LIS3DH_SetClickTHS
      26  LIS3DH_SetClickWINDOW
      68  LIS3DH_SetFilterDataSel
      68  LIS3DH_SetFullScale
      78  LIS3DH_SetHPFCutOFF
      68  LIS3DH_SetHPFMode
      36  LIS3DH_SetInt1Duration
      60  LIS3DH_SetInt1Pin
      36  LIS3DH_SetInt1Threshold
      60  LIS3DH_SetInt2Pin
     230  LIS3DH_SetInt6D4DConfiguration
      66  LIS3DH_SetIntConfiguration
      68  LIS3DH_SetIntMode
     240  LIS3DH_SetMode
      68  LIS3DH_SetODR
      66  LIS3DH_SetSPIInterface
      68  LIS3DH_SetSelfTest
      68  LIS3DH_SetTemperature
      68  LIS3DH_SetTriggerInt
      76  LIS3DH_SetWaterMark
      16  LIS3DH_WriteReg
     210  LIS3DH_init
       1  ODR_old_value
      12  Zero_offset
       1  calibration_num
       1  calibration_ok
      76  data_effect
      42  readByte
       1  sensor_Dog
      56  writeByte

 
    40 bytes in section .bss
 5 524 bytes in section .text
 
 5 524 bytes of CODE memory
    40 bytes of DATA memory

Errors: none
Warnings: none
