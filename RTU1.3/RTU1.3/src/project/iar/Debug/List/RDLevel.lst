###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      26/Mar/2017  12:36:37 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\bsp\RDLevel\RDLevel.c           #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\bsp\RDLevel\RDLevel.c -lCN      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\RDLevel. #
#                    lst                                                      #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\RDLevel.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\bsp\RDLevel\RDLevel.c
      1          #include "includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      2          

   \                                 In section .rodata, align 4
      3          const uint8_t RDLever_cmd1[]  = {0x01, 0x03, 0x00, 0x01, 0x00, 0x02, 0x95, 0xcb};	//地址01，空高，单位mm
   \                     RDLever_cmd1:
   \   00000000   0x01 0x03          DC8 1, 3, 0, 1, 0, 2, 149, 203
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x95 0xCB    

   \                                 In section .rodata, align 4
      4          const uint8_t RDLever_cmd1s[] = {0x01, 0x03, 0x00, 0x03, 0x00, 0x02, 0x34, 0x0b};	//地址01，液位高，单位mm
   \                     RDLever_cmd1s:
   \   00000000   0x01 0x03          DC8 1, 3, 0, 3, 0, 2, 52, 11
   \              0x00 0x03    
   \              0x00 0x02    
   \              0x34 0x0B    
      5          

   \                                 In section .rodata, align 4
      6          const uint8_t RDLever_cmd2[]  = {0x02, 0x03, 0x00, 0x01, 0x00, 0x02, 0x95, 0xf8};	//地址02，空高，单位mm
   \                     RDLever_cmd2:
   \   00000000   0x02 0x03          DC8 2, 3, 0, 1, 0, 2, 149, 248
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x95 0xF8    

   \                                 In section .rodata, align 4
      7          const uint8_t RDLever_cmd2s[] = {0x02, 0x03, 0x00, 0x03, 0x00, 0x02, 0x34, 0x38};	//地址02，液位高，单位mm
   \                     RDLever_cmd2s:
   \   00000000   0x02 0x03          DC8 2, 3, 0, 3, 0, 2, 52, 56
   \              0x00 0x03    
   \              0x00 0x02    
   \              0x34 0x38    
      8          

   \                                 In section .rodata, align 4
      9          const uint8_t RDLever_cmd3[]  = {0x03, 0x03, 0x00, 0x01, 0x00, 0x02, 0x94, 0x29};	//地址03，空高，单位mm
   \                     RDLever_cmd3:
   \   00000000   0x03 0x03          DC8 3, 3, 0, 1, 0, 2, 148, 41
   \              0x00 0x01    
   \              0x00 0x02    
   \              0x94 0x29    

   \                                 In section .rodata, align 4
     10          const uint8_t RDLever_cmd3s[] = {0x03, 0x03, 0x00, 0x03, 0x00, 0x02, 0x35, 0xe9};	//地址03，液位高，单位mm
   \                     RDLever_cmd3s:
   \   00000000   0x03 0x03          DC8 3, 3, 0, 3, 0, 2, 53, 233
   \              0x00 0x03    
   \              0x00 0x02    
   \              0x35 0xE9    
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void RDLevel_quiry(uint32_t addr, float para0)
     13          {
   \                     RDLevel_quiry:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     14            const uint8_t * p_cmd;
     15            if(para0 == 1)		//液位高
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   0000000C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000010   0xD10F             BNE.N    ??RDLevel_quiry_0
     16            {
     17          	  if(addr == 1)
   \   00000012   0x2C01             CMP      R4,#+1
   \   00000014   0xD102             BNE.N    ??RDLevel_quiry_1
     18          	  {
     19          		p_cmd = RDLever_cmd1s;
   \   00000016   0x....             LDR.N    R0,??DataTable1
   \   00000018   0x0006             MOVS     R6,R0
   \   0000001A   0xE01A             B.N      ??RDLevel_quiry_2
     20          	  }
     21          	  else if( addr == 2)
   \                     ??RDLevel_quiry_1:
   \   0000001C   0x2C02             CMP      R4,#+2
   \   0000001E   0xD102             BNE.N    ??RDLevel_quiry_3
     22          	  {
     23          		p_cmd = RDLever_cmd2s;
   \   00000020   0x....             LDR.N    R0,??DataTable1_1
   \   00000022   0x0006             MOVS     R6,R0
   \   00000024   0xE015             B.N      ??RDLevel_quiry_2
     24          	  }
     25          	  else if( addr == 3)
   \                     ??RDLevel_quiry_3:
   \   00000026   0x2C03             CMP      R4,#+3
   \   00000028   0xD102             BNE.N    ??RDLevel_quiry_4
     26          	  {
     27          		p_cmd = RDLever_cmd3s;
   \   0000002A   0x....             LDR.N    R0,??DataTable1_2
   \   0000002C   0x0006             MOVS     R6,R0
   \   0000002E   0xE010             B.N      ??RDLevel_quiry_2
     28          	  }
     29          	  else 
     30          	  {
     31          		return;
   \                     ??RDLevel_quiry_4:
   \   00000030   0xE02C             B.N      ??RDLevel_quiry_5
     32          	  }
     33            }
     34            else		//空高
     35            {
     36          	  if(addr == 1)
   \                     ??RDLevel_quiry_0:
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD102             BNE.N    ??RDLevel_quiry_6
     37          	  {
     38          		p_cmd = RDLever_cmd1;
   \   00000036   0x....             LDR.N    R0,??DataTable1_3
   \   00000038   0x0006             MOVS     R6,R0
   \   0000003A   0xE00A             B.N      ??RDLevel_quiry_2
     39          	  }
     40          	  else if( addr == 2)
   \                     ??RDLevel_quiry_6:
   \   0000003C   0x2C02             CMP      R4,#+2
   \   0000003E   0xD102             BNE.N    ??RDLevel_quiry_7
     41          	  {
     42          		p_cmd = RDLever_cmd2;
   \   00000040   0x....             LDR.N    R0,??DataTable1_4
   \   00000042   0x0006             MOVS     R6,R0
   \   00000044   0xE005             B.N      ??RDLevel_quiry_2
     43          	  }
     44          	  else if( addr == 3)
   \                     ??RDLevel_quiry_7:
   \   00000046   0x2C03             CMP      R4,#+3
   \   00000048   0xD102             BNE.N    ??RDLevel_quiry_8
     45          	  {
     46          		p_cmd = RDLever_cmd3;
   \   0000004A   0x....             LDR.N    R0,??DataTable1_5
   \   0000004C   0x0006             MOVS     R6,R0
   \   0000004E   0xE000             B.N      ??RDLevel_quiry_2
     47          	  }
     48          	  else 
     49          	  {
     50          		return;
   \                     ??RDLevel_quiry_8:
   \   00000050   0xE01C             B.N      ??RDLevel_quiry_5
     51          	  }
     52            }
     53            
     54            
     55            GPIO_OutputValue(RS485_OE_PORT,RS485_OE_PIN,1);
   \                     ??RDLevel_quiry_2:
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      BL       GPIO_OutputValue
     56            
     57            SendOutHardware(RDLEVEL_PORT_ID, (uint8_t *)p_cmd, 8);
   \   0000005E   0x2208             MOVS     R2,#+8
   \   00000060   0x0031             MOVS     R1,R6
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x.... 0x....      BL       SendOutHardware
     58          
     59            while( CmcCommandEmpty_gps == FALSE);
   \                     ??RDLevel_quiry_9:
   \   00000068   0x....             LDR.N    R0,??DataTable1_6
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD0FB             BEQ.N    ??RDLevel_quiry_9
     60          
     61            //OSTimeDly(1);//5ms
     62            int i ;
     63            for( i = 0; i < 2000;i ++)
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x0007             MOVS     R7,R0
   \                     ??RDLevel_quiry_10:
   \   00000074   0xF5B7 0x6FFA      CMP      R7,#+2000
   \   00000078   0xDA02             BGE.N    ??RDLevel_quiry_11
     64            {
     65              i++;
   \   0000007A   0x1C7F             ADDS     R7,R7,#+1
     66            }
   \   0000007C   0x1C7F             ADDS     R7,R7,#+1
   \   0000007E   0xE7F9             B.N      ??RDLevel_quiry_10
     67            
     68            GPIO_OutputValue(RS485_OE_PORT,RS485_OE_PIN,0);
   \                     ??RDLevel_quiry_11:
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0xF45F 0x2100      MOVS     R1,#+524288
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       GPIO_OutputValue
     69          }
   \                     ??RDLevel_quiry_5:
   \   0000008C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     70          
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void RDLevel_process(uint8_t* p_pkg,uint32_t len,uint8_t flag)
     73          {
   \                     RDLevel_process:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB090             SUB      SP,SP,#+64
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
     74          	UINT8 	RDLevel_addr = 0;
   \   0000000C   0x2700             MOVS     R7,#+0
     75          	UINT32	num1;
     76          
     77          	/** CRC16 校验 **/
     78          
     79          	/** 状态灯 **/
     80          	
     81          	g_RtuStatus.led_dwload = 1;
   \   0000000E   0x....             LDR.N    R0,??DataTable1_7
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xF880 0x1037      STRB     R1,[R0, #+55]
     82          	g_RtuStatus.dist = 1;//传感器OK
   \   00000016   0x....             LDR.N    R0,??DataTable1_7
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x72C1             STRB     R1,[R0, #+11]
     83          	
     84          	/** 数据保存 **/
     85            
     86          	struct DATA_STRUCT dat;
     87          	
     88          	dat.type = RDLE;
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0xF88D 0x000F      STRB     R0,[SP, #+15]
     89          	RDLevel_addr = p_pkg[0];
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
   \   00000024   0x0007             MOVS     R7,R0
     90          	num1 = (p_pkg[3] << 24) + (p_pkg[4] << 16) + (p_pkg[5] << 8) + p_pkg[6];
   \   00000026   0x78E0             LDRB     R0,[R4, #+3]
   \   00000028   0x7921             LDRB     R1,[R4, #+4]
   \   0000002A   0x0409             LSLS     R1,R1,#+16
   \   0000002C   0xEB11 0x6000      ADDS     R0,R1,R0, LSL #+24
   \   00000030   0x7961             LDRB     R1,[R4, #+5]
   \   00000032   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000036   0x79A1             LDRB     R1,[R4, #+6]
   \   00000038   0x1808             ADDS     R0,R1,R0
   \   0000003A   0x4680             MOV      R8,R0
     91          	
     92          	sprintf(rs485_para.data,"%s,%d,%d,%d",rs485_para.sname,RDLevel_addr+80,num1,(char)rs485_para.para0); 
   \   0000003C   0x....             LDR.N    R0,??DataTable1_8
   \   0000003E   0x6900             LDR      R0,[R0, #+16]
   \   00000040   0x.... 0x....      BL       __aeabi_f2iz
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000004C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004E   0xF117 0x0350      ADDS     R3,R7,#+80
   \   00000052   0x....             LDR.N    R2,??DataTable1_9
   \   00000054   0x....             LDR.N    R1,??DataTable1_10
   \   00000056   0x....             LDR.N    R0,??DataTable1_11
   \   00000058   0x.... 0x....      BL       sprintf
     93          	
     94          	if(flag == 1)
   \   0000005C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005E   0x2E01             CMP      R6,#+1
   \   00000060   0xD133             BNE.N    ??RDLevel_process_0
     95          	{
     96          	  struct TIME_STRUCT time_now;
     97          	  
     98          	  rtc_get_time(&time_now);
   \   00000062   0xA800             ADD      R0,SP,#+0
   \   00000064   0x.... 0x....      BL       rtc_get_time
     99          	  
    100          	  if((time_now.y < 2015) || (time_now.y > 2100))
   \   00000068   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000006C   0xF240 0x71DF      MOVW     R1,#+2015
   \   00000070   0x4288             CMP      R0,R1
   \   00000072   0xDB05             BLT.N    ??RDLevel_process_1
   \   00000074   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000078   0xF640 0x0135      MOVW     R1,#+2101
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xDB00             BLT.N    ??RDLevel_process_2
    101          	  {
    102          		return;
   \                     ??RDLevel_process_1:
   \   00000080   0xE023             B.N      ??RDLevel_process_3
    103          	  }
    104          	  
    105          	  dat.y = time_now.y;
   \                     ??RDLevel_process_2:
   \   00000082   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000086   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    106          	  dat.m = time_now.m;
   \   0000008A   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000008E   0xF88D 0x000A      STRB     R0,[SP, #+10]
    107          	  dat.d = time_now.d;
   \   00000092   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000096   0xF88D 0x000B      STRB     R0,[SP, #+11]
    108          	  dat.H = time_now.H;
   \   0000009A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000009E   0xF88D 0x000C      STRB     R0,[SP, #+12]
    109          	  dat.M = time_now.M;
   \   000000A2   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000000A6   0xF88D 0x000D      STRB     R0,[SP, #+13]
    110          	  dat.S = time_now.S;
   \   000000AA   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000AE   0xF88D 0x000E      STRB     R0,[SP, #+14]
    111          	  
    112          	  memcpy(dat.data,rs485_para.data,sizeof(dat.data));
   \   000000B2   0x222A             MOVS     R2,#+42
   \   000000B4   0x....             LDR.N    R1,??DataTable1_11
   \   000000B6   0xA804             ADD      R0,SP,#+16
   \   000000B8   0x.... 0x....      BL       memcpy
    113          	  
    114          	  g_RtuStatus.led_dwload = 1;
   \   000000BC   0x....             LDR.N    R0,??DataTable1_7
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0xF880 0x1037      STRB     R1,[R0, #+55]
    115          	  file_write(&dat);
   \   000000C4   0xA802             ADD      R0,SP,#+8
   \   000000C6   0x.... 0x....      BL       file_write
    116          	  //SaveConfig();		//debug
    117          	}
    118          }
   \                     ??RDLevel_process_0:
   \                     ??RDLevel_process_3:
   \   000000CA   0xB010             ADD      SP,SP,#+64
   \   000000CC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     RDLever_cmd1s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     RDLever_cmd2s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     RDLever_cmd3s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     RDLever_cmd1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     RDLever_cmd2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     RDLever_cmd3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     CmcCommandEmpty_gps

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     g_RtuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     rs485_para

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     rs485_para+0x20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     `?<Constant "%s,%d,%d,%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     rs485_para+0x35

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s,%d,%d,%d">`:
   \   00000000   0x25 0x73          DC8 "%s,%d,%d,%d"
   \              0x2C 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x64 0x00    
    119          
    120          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   RDLevel_process
        88   -> __aeabi_f2iz
        88   -> file_write
        88   -> memcpy
        88   -> rtc_get_time
        88   -> sprintf
      24   RDLevel_quiry
        24   -> GPIO_OutputValue
        24   -> SendOutHardware
        24   -> __aeabi_cfcmpeq
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%s,%d,%d,%d">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     208  RDLevel_process
     142  RDLevel_quiry
       8  RDLever_cmd1
       8  RDLever_cmd1s
       8  RDLever_cmd2
       8  RDLever_cmd2s
       8  RDLever_cmd3
       8  RDLever_cmd3s
      22  memcpy

 
  60 bytes in section .rodata
 420 bytes in section .text
 
 398 bytes of CODE  memory (+ 22 bytes shared)
  60 bytes of CONST memory

Errors: none
Warnings: 1
