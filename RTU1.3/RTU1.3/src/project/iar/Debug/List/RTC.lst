###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      20/Mar/2017  17:18:17 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC.c                   #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC.c -lCN              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\RTC.lst  #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\RTC.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC.c
      1          #include "RTC.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x....             LDR.N    R2,??DataTable8  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x....             LDR.N    R2,??DataTable8_1  ;; 0xe000e180
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
      2          #include "RTC_DS1339.h"
      3          #include "Global.h"
      4          

   \                                 In section .bss, align 1
      5          HARDWARE_VERSION HardvareVersion;
   \                     HardvareVersion:
   \   00000000                      DS8 1
      6          

   \                                 In section .text, align 2, keep-with-next
      7          void rtc_lpc1778_init(void)
      8          {
   \                     rtc_lpc1778_init:
   \   00000000   0xB580             PUSH     {R7,LR}
      9            if( LPC_RTC->GPREG0 != 0xAAAA5555)
   \   00000002   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40024044
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable8_3  ;; 0xaaaa5555
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD01D             BEQ.N    ??rtc_lpc1778_init_0
     10            {
     11              LPC_RTC->GPREG0 = 0xAAAA5555;
   \   0000000C   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40024044
   \   0000000E   0x....             LDR.N    R1,??DataTable8_3  ;; 0xaaaa5555
   \   00000010   0x6001             STR      R1,[R0, #+0]
     12              
     13              RTC_Init(LPC_RTC);
   \   00000012   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000014   0x.... 0x....      BL       RTC_Init
     14          
     15              RTC_ResetClockTickCounter(LPC_RTC);
   \   00000018   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000001A   0x.... 0x....      BL       RTC_ResetClockTickCounter
     16              
     17              RTC_Cmd(LPC_RTC, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000022   0x.... 0x....      BL       RTC_Cmd
     18              
     19              RTC_SetTime (LPC_RTC, RTC_TIMETYPE_YEAR, 0);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2107             MOVS     R1,#+7
   \   0000002A   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000002C   0x.... 0x....      BL       RTC_SetTime
     20              
     21              LPC_RTC->GPREG1 = 0;//addr_wr
   \   00000030   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40024048
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x6001             STR      R1,[R0, #+0]
     22              LPC_RTC->GPREG2 = 0;//addr_rd
   \   00000036   0x....             LDR.N    R0,??DataTable8_6  ;; 0x4002404c
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
     23              LPC_RTC->GPREG3 = 0;//rain_count_acc
   \   0000003C   0x....             LDR.N    R0,??DataTable8_7  ;; 0x40024050
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6001             STR      R1,[R0, #+0]
     24              LPC_RTC->GPREG4 = 0;//reserv
   \   00000042   0x....             LDR.N    R0,??DataTable8_8  ;; 0x40024054
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x6001             STR      R1,[R0, #+0]
     25            }
     26          
     27            g_RtuConfig.addr_wr = LPC_RTC->GPREG1;
   \                     ??rtc_lpc1778_init_0:
   \   00000048   0x....             LDR.N    R0,??DataTable8_9
   \   0000004A   0x....             LDR.N    R1,??DataTable8_5  ;; 0x40024048
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0x6181             STR      R1,[R0, #+24]
     28            g_RtuConfig.addr_rd = LPC_RTC->GPREG2;
   \   00000050   0x....             LDR.N    R0,??DataTable8_9
   \   00000052   0x....             LDR.N    R1,??DataTable8_6  ;; 0x4002404c
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x61C1             STR      R1,[R0, #+28]
     29            
     30          //  /** 中断配置 **/
     31          // 
     32          //  RTC_CntIncrIntConfig (LPC_RTC, RTC_TIMETYPE_HOUR, ENABLE);
     33          //  
     34          //  NVIC_EnableIRQ(RTC_IRQn);
     35          }
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          void rtc_lpc1778_get_time(struct TIME_STRUCT * time)
     38          {
   \                     rtc_lpc1778_get_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     39            time->S = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_SECOND);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000008   0x.... 0x....      BL       RTC_GetTime
   \   0000000C   0x71A0             STRB     R0,[R4, #+6]
     40            time->M = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_MINUTE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000012   0x.... 0x....      BL       RTC_GetTime
   \   00000016   0x7160             STRB     R0,[R4, #+5]
     41            time->H = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_HOUR);
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000001C   0x.... 0x....      BL       RTC_GetTime
   \   00000020   0x7120             STRB     R0,[R4, #+4]
     42            time->d = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_DAYOFMONTH);
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000026   0x.... 0x....      BL       RTC_GetTime
   \   0000002A   0x70E0             STRB     R0,[R4, #+3]
     43            time->m = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_MONTH);
   \   0000002C   0x2106             MOVS     R1,#+6
   \   0000002E   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000030   0x.... 0x....      BL       RTC_GetTime
   \   00000034   0x70A0             STRB     R0,[R4, #+2]
     44            time->y = RTC_GetTime (LPC_RTC, RTC_TIMETYPE_YEAR);
   \   00000036   0x2107             MOVS     R1,#+7
   \   00000038   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000003A   0x.... 0x....      BL       RTC_GetTime
   \   0000003E   0x8020             STRH     R0,[R4, #+0]
     45          }
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void rtc_lpc1778_set_time(struct TIME_STRUCT * time)
     48          {
   \                     rtc_lpc1778_set_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     49            NVIC_DisableIRQ(RTC_IRQn);
   \   00000004   0x2011             MOVS     R0,#+17
   \   00000006   0x.... 0x....      BL       NVIC_DisableIRQ
     50            
     51            RTC_ClearIntPending(LPC_RTC, RTC_INT_ALARM|RTC_INT_COUNTER_INCREASE);
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000000E   0x.... 0x....      BL       RTC_ClearIntPending
     52            
     53            RTC_Init(LPC_RTC);
   \   00000012   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000014   0x.... 0x....      BL       RTC_Init
     54          
     55            RTC_ResetClockTickCounter(LPC_RTC);
   \   00000018   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000001A   0x.... 0x....      BL       RTC_ResetClockTickCounter
     56            
     57            RTC_Cmd(LPC_RTC, ENABLE);
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000022   0x.... 0x....      BL       RTC_Cmd
     58            
     59            /* Set current time for RTC */
     60          
     61            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_SECOND,      time->S);
   \   00000026   0x79A2             LDRB     R2,[R4, #+6]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000002C   0x.... 0x....      BL       RTC_SetTime
     62            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_MINUTE,      time->M);
   \   00000030   0x7962             LDRB     R2,[R4, #+5]
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000036   0x.... 0x....      BL       RTC_SetTime
     63            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_HOUR,        time->H);
   \   0000003A   0x7922             LDRB     R2,[R4, #+4]
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000040   0x.... 0x....      BL       RTC_SetTime
     64            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_DAYOFMONTH,  time->d);
   \   00000044   0x78E2             LDRB     R2,[R4, #+3]
   \   00000046   0x2104             MOVS     R1,#+4
   \   00000048   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000004A   0x.... 0x....      BL       RTC_SetTime
     65            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_MONTH,       time->m);
   \   0000004E   0x78A2             LDRB     R2,[R4, #+2]
   \   00000050   0x2106             MOVS     R1,#+6
   \   00000052   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   00000054   0x.... 0x....      BL       RTC_SetTime
     66            RTC_SetTime (LPC_RTC, RTC_TIMETYPE_YEAR,        time->y);
   \   00000058   0x8822             LDRH     R2,[R4, #+0]
   \   0000005A   0x2107             MOVS     R1,#+7
   \   0000005C   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40024000
   \   0000005E   0x.... 0x....      BL       RTC_SetTime
     67            
     68            NVIC_EnableIRQ(RTC_IRQn);
   \   00000062   0x2011             MOVS     R0,#+17
   \   00000064   0x.... 0x....      BL       NVIC_EnableIRQ
     69          }
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
     70          
     71          //void RTC_IRQHandler(void)
     72          //{
     73          //  if(RTC_GetIntPending(LPC_RTC, RTC_INT_COUNTER_INCREASE))
     74          //  {//整点中断
     75          //    // g_RtuConfig.addr_rd g_RtuConfig.addr_wr  指针保存标志置位
     76          //    g_RtuStatus.dog_save_conf = DOG_SAVE_CONF_TIME;
     77          //  }
     78          //  
     79          //  RTC_ClearIntPending(LPC_RTC, RTC_INT_ALARM|RTC_INT_COUNTER_INCREASE);
     80          //}
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void rtc_init(void)
     83          {
   \                     rtc_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     84          	if(rtc_ds1339_init() == SUCCESS)
   \   00000002   0x.... 0x....      BL       rtc_ds1339_init
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD105             BNE.N    ??rtc_init_0
     85          	{
     86          		HardvareVersion = V13;
   \   0000000A   0x....             LDR.N    R0,??DataTable8_10
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
     87          		rtc_lpc1778_init();
   \   00000010   0x.... 0x....      BL       rtc_lpc1778_init
   \   00000014   0xE004             B.N      ??rtc_init_1
     88          	}
     89          	else
     90          	{
     91          		HardvareVersion = V11;
   \                     ??rtc_init_0:
   \   00000016   0x....             LDR.N    R0,??DataTable8_10
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
     92          		rtc_lpc1778_init();
   \   0000001C   0x.... 0x....      BL       rtc_lpc1778_init
     93          	}
     94          }
   \                     ??rtc_init_1:
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void rtc_log(void)
     97          {
   \                     rtc_log:
   \   00000000   0xB580             PUSH     {R7,LR}
     98          	if(HardvareVersion == V13)
   \   00000002   0x....             LDR.N    R0,??DataTable8_10
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD103             BNE.N    ??rtc_log_0
     99          		DebugMsg("External RTC\r\n");
   \   0000000A   0x....             LDR.N    R0,??DataTable8_11
   \   0000000C   0x.... 0x....      BL       DebugMsg
   \   00000010   0xE002             B.N      ??rtc_log_1
    100          	else
    101          		DebugMsg("Internal RTC\r\n");
   \                     ??rtc_log_0:
   \   00000012   0x....             LDR.N    R0,??DataTable8_12
   \   00000014   0x.... 0x....      BL       DebugMsg
    102          }
   \                     ??rtc_log_1:
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void rtc_get_time(struct TIME_STRUCT * time)
    105          {
   \                     rtc_get_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    106          	if(HardvareVersion == V13)
   \   00000004   0x....             LDR.N    R0,??DataTable8_10
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD103             BNE.N    ??rtc_get_time_0
    107          		rtc_ds1339_get_time(time);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       rtc_ds1339_get_time
   \   00000012   0xE002             B.N      ??rtc_get_time_1
    108          	else
    109          		rtc_lpc1778_get_time(time);	
   \                     ??rtc_get_time_0:
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       rtc_lpc1778_get_time
    110          }
   \                     ??rtc_get_time_1:
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    111          

   \                                 In section .text, align 2, keep-with-next
    112          void rtc_set_time(struct TIME_STRUCT * time)
    113          {
   \                     rtc_set_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    114          	if(HardvareVersion == V13)
   \   00000004   0x....             LDR.N    R0,??DataTable8_10
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD103             BNE.N    ??rtc_set_time_0
    115          		rtc_ds1339_set_time(time);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       rtc_ds1339_set_time
   \   00000012   0xE002             B.N      ??rtc_set_time_1
    116          	else
    117          		rtc_lpc1778_set_time(time);	
   \                     ??rtc_set_time_0:
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       rtc_lpc1778_set_time
    118          }
   \                     ??rtc_set_time_1:
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40024044         DC32     0x40024044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0xAAAA5555         DC32     0xaaaa5555

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40024000         DC32     0x40024000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x40024048         DC32     0x40024048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x4002404C         DC32     0x4002404c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x40024050         DC32     0x40024050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x40024054         DC32     0x40024054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     g_RtuConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     HardvareVersion

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     `?<Constant "External RTC\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     `?<Constant "Internal RTC\\r\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "External RTC\\r\\n">`:
   \   00000000   0x45 0x78          DC8 "External RTC\015\012"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x52    
   \              0x54 0x43    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Internal RTC\\r\\n">`:
   \   00000000   0x49 0x6E          DC8 "Internal RTC\015\012"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x52    
   \              0x54 0x43    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   NVIC_DisableIRQ
       4   NVIC_EnableIRQ
       8   rtc_get_time
         8   -> rtc_ds1339_get_time
         8   -> rtc_lpc1778_get_time
       8   rtc_init
         8   -> rtc_ds1339_init
         8   -> rtc_lpc1778_init
       8   rtc_log
         8   -> DebugMsg
       8   rtc_lpc1778_get_time
         8   -> RTC_GetTime
       8   rtc_lpc1778_init
         8   -> RTC_Cmd
         8   -> RTC_Init
         8   -> RTC_ResetClockTickCounter
         8   -> RTC_SetTime
       8   rtc_lpc1778_set_time
         8   -> NVIC_DisableIRQ
         8   -> NVIC_EnableIRQ
         8   -> RTC_ClearIntPending
         8   -> RTC_Cmd
         8   -> RTC_Init
         8   -> RTC_ResetClockTickCounter
         8   -> RTC_SetTime
       8   rtc_set_time
         8   -> rtc_ds1339_set_time
         8   -> rtc_lpc1778_set_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "External RTC\r\n">
      16  ?<Constant "Internal RTC\r\n">
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
       1  HardvareVersion
      24  NVIC_DisableIRQ
      24  NVIC_EnableIRQ
      28  rtc_get_time
      34  rtc_init
      26  rtc_log
      66  rtc_lpc1778_get_time
      90  rtc_lpc1778_init
     106  rtc_lpc1778_set_time
      28  rtc_set_time

 
   1 byte  in section .bss
  32 bytes in section .rodata
 478 bytes in section .text
 
 478 bytes of CODE  memory
  32 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
