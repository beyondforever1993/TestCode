###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      20/Mar/2017  17:17:55 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC_DS1339.c            #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC_DS1339.c -lCN       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\RTC_DS13 #
#                    39.lst                                                   #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\RTC_DS133 #
#                    9.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\bsp\RTC\RTC_DS1339.c
      1          #include "RTC_DS1339.h"
      2          #include <ucos_ii.h>
      3          
      4          #define DS1339_MEMS_I2C_ADDRESS		(0xd0>>1)
      5          
      6          /* RTC registers don't differ much, except for the century flag */
      7          #define DS1339_REG_SECS		0x00	/* 00-59 */
      8          #define DS1339_REG_MIN		0x01	/* 00-59 */
      9          #define DS1339_REG_HOUR		0x02	/* 00-23, or 1-12{am,pm} */
     10          #define DS1339_REG_WDAY		0x03	/* 01-07 */
     11          #define DS1339_REG_MDAY		0x04	/* 01-31 */
     12          #define DS1339_REG_MONTH	0x05	/* 01-12 */
     13          #	define DS1339_BIT_CENTURY	0x80	/* in REG_MONTH */
     14          #define DS1339_REG_YEAR		0x06	/* 00-99 */
     15          

   \                                 In section .bss, align 1
     16          UINT8 GetTmLock = 0;
   \                     GetTmLock:
   \   00000000                      DS8 1
     17          
     18          static Status DS1339_readByte( UINT8 regAddr,  UINT8* data);
     19          static Status DS1339_writeByte( UINT8 regAddr, UINT8* data);
     20          static unsigned bcd2bin(unsigned char val);
     21          static unsigned char bin2bcd(unsigned val);
     22          

   \                                 In section .text, align 2, keep-with-next
     23          static void DS1339_I2C_init(void)		//I2C_init(I2C_0,I2C0_Freq);
     24          {
   \                     DS1339_I2C_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     25              I2C_Cmd(I2C_1, DISABLE);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       I2C_Cmd
     26              PINSEL_ConfigPin (BRD_RTC_I2C_SDA_PORT, BRD_RTC_I2C_SDA_PIN, 3);
   \   0000000A   0x2203             MOVS     R2,#+3
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       PINSEL_ConfigPin
     27              PINSEL_ConfigPin (BRD_RTC_I2C_SCL_PORT, BRD_RTC_I2C_SCL_PIN, 3);
   \   00000014   0x2203             MOVS     R2,#+3
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       PINSEL_ConfigPin
     28          	
     29          	PINSEL_SetOpenDrainMode(0, 0, ENABLE);
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       PINSEL_SetOpenDrainMode
     30          	PINSEL_SetOpenDrainMode(0, 1, ENABLE);
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       PINSEL_SetOpenDrainMode
     31          	PINSEL_SetPinMode(0, 0, PINSEL_BASICMODE_PLAINOUT);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       PINSEL_SetPinMode
     32          	PINSEL_SetPinMode(0, 1, PINSEL_BASICMODE_PLAINOUT);	
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       PINSEL_SetPinMode
     33          
     34              I2C_Init(I2C_1, 400000);
   \   00000046   0x....             LDR.N    R1,??DataTable1  ;; 0x61a80
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       I2C_Init
     35              /* Enable I2C1 operation */
     36              I2C_Cmd(I2C_1, ENABLE);
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       I2C_Cmd
     37              return;
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
     38          }
     39          

   \                                 In section .text, align 2, keep-with-next
     40          Status rtc_ds1339_init(void)	
     41          {
   \                     rtc_ds1339_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     42          	Status res;
     43          	UINT8 charger = 0xaa;
   \   00000004   0x20AA             MOVS     R0,#+170
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
     44          	
     45          	DS1339_I2C_init();
   \   0000000A   0x.... 0x....      BL       DS1339_I2C_init
     46          	
     47          	res = DS1339_writeByte(0x10, &charger);
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0x.... 0x....      BL       DS1339_writeByte
   \   00000016   0x0004             MOVS     R4,R0
     48          	
     49          	return res;
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          static Status DS1339_readByte( UINT8 regAddr,  UINT8* data)
     53          {
   \                     DS1339_readByte:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x000C             MOVS     R4,R1
     54              I2C_M_SETUP_Type i2cData;
     55          	i2cData.sl_addr7bit = DS1339_MEMS_I2C_ADDRESS;
   \   00000006   0x2068             MOVS     R0,#+104
   \   00000008   0x9000             STR      R0,[SP, #+0]
     56          	i2cData.tx_data = &regAddr;
   \   0000000A   0xA80B             ADD      R0,SP,#+44
   \   0000000C   0x9001             STR      R0,[SP, #+4]
     57          	i2cData.tx_length = 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9002             STR      R0,[SP, #+8]
     58          	i2cData.rx_data = data;
   \   00000012   0x9404             STR      R4,[SP, #+16]
     59          	i2cData.rx_length = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9005             STR      R0,[SP, #+20]
     60          	i2cData.retransmissions_max = 3;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9007             STR      R0,[SP, #+28]
     61          	return I2C_MasterTransferData(I2C_1, &i2cData, I2C_TRANSFER_POLLING);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       I2C_MasterTransferData
   \   00000026   0xB00C             ADD      SP,SP,#+48
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          static Status DS1339_writeByte( UINT8 regAddr, UINT8* data)
     65          {
   \                     DS1339_writeByte:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     66              I2C_M_SETUP_Type i2cData;
     67          	UINT8 data1[2];
     68          	data1[0] = regAddr;
   \   00000008   0xF88D 0x4000      STRB     R4,[SP, #+0]
     69              data1[1] = *data;
   \   0000000C   0x7828             LDRB     R0,[R5, #+0]
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     70          	i2cData.sl_addr7bit = DS1339_MEMS_I2C_ADDRESS;
   \   00000012   0x2068             MOVS     R0,#+104
   \   00000014   0x9001             STR      R0,[SP, #+4]
     71          	i2cData.tx_data = data1;
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x9002             STR      R0,[SP, #+8]
     72          	i2cData.tx_length = 2;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     73          	i2cData.rx_data = NULL;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9005             STR      R0,[SP, #+20]
     74          	i2cData.rx_length = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
     75          	i2cData.retransmissions_max = 3;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0x9008             STR      R0,[SP, #+32]
     76          	return I2C_MasterTransferData(I2C_1, &i2cData, I2C_TRANSFER_POLLING);
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       I2C_MasterTransferData
   \   00000034   0xB00D             ADD      SP,SP,#+52
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
     77          }
     78          

   \                                 In section .text, align 2, keep-with-next
     79          Status rtc_ds1339_get_time(struct TIME_STRUCT * time)
     80          {
   \                     rtc_ds1339_get_time:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     81          	UINT8 Reg;
     82          	Status res;
     83          	UINT8 tm_temp[7] = {0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xC006             STM      R0!,{R1,R2}
   \   0000000C   0x3808             SUBS     R0,R0,#+8
     84          
     85              while(GetTmLock == 1)
   \                     ??rtc_ds1339_get_time_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable1_1
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD106             BNE.N    ??rtc_ds1339_get_time_1
     86              {
     87                  OSTimeDlyHMSM(0, 0, 0, 5);
   \   00000016   0x2305             MOVS     R3,#+5
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000022   0xE7F4             B.N      ??rtc_ds1339_get_time_0
     88              }
     89              
     90              GetTmLock = 1;
   \                     ??rtc_ds1339_get_time_1:
   \   00000024   0x....             LDR.N    R0,??DataTable1_1
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x7001             STRB     R1,[R0, #+0]
     91          	
     92          	for(Reg=0;Reg<7;Reg++)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0005             MOVS     R5,R0
   \                     ??rtc_ds1339_get_time_2:
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D07             CMP      R5,#+7
   \   00000032   0xDA12             BGE.N    ??rtc_ds1339_get_time_3
     93          	{
     94          		res = DS1339_readByte(Reg, &tm_temp[Reg]);
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0xA800             ADD      R0,SP,#+0
   \   00000038   0x1829             ADDS     R1,R5,R0
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       DS1339_readByte
   \   00000042   0x0006             MOVS     R6,R0
     95          		if(res == ERROR)
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x2E00             CMP      R6,#+0
   \   00000048   0xD105             BNE.N    ??rtc_ds1339_get_time_4
     96          		{
     97          			GetTmLock = 0;
   \   0000004A   0x....             LDR.N    R0,??DataTable1_1
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
     98          			return res;
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xE02F             B.N      ??rtc_ds1339_get_time_5
     99          		}
    100          	}
   \                     ??rtc_ds1339_get_time_4:
   \   00000056   0x1C6D             ADDS     R5,R5,#+1
   \   00000058   0xE7E9             B.N      ??rtc_ds1339_get_time_2
    101          	
    102          	time->S = bcd2bin(tm_temp[DS1339_REG_SECS] & 0x7f);
   \                     ??rtc_ds1339_get_time_3:
   \   0000005A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005E   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000062   0x.... 0x....      BL       bcd2bin
   \   00000066   0x71A0             STRB     R0,[R4, #+6]
    103          	time->M = bcd2bin(tm_temp[DS1339_REG_MIN] & 0x7f);
   \   00000068   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000006C   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \   00000070   0x.... 0x....      BL       bcd2bin
   \   00000074   0x7160             STRB     R0,[R4, #+5]
    104          	time->H = bcd2bin(tm_temp[DS1339_REG_HOUR] & 0x3f);
   \   00000076   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000007A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000007E   0x.... 0x....      BL       bcd2bin
   \   00000082   0x7120             STRB     R0,[R4, #+4]
    105          	time->d = bcd2bin(tm_temp[DS1339_REG_MDAY] & 0x3f);
   \   00000084   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000088   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000008C   0x.... 0x....      BL       bcd2bin
   \   00000090   0x70E0             STRB     R0,[R4, #+3]
    106          	time->m = bcd2bin(tm_temp[DS1339_REG_MONTH] & 0x1f);
   \   00000092   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000096   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000009A   0x.... 0x....      BL       bcd2bin
   \   0000009E   0x70A0             STRB     R0,[R4, #+2]
    107          	time->y = bcd2bin(tm_temp[DS1339_REG_YEAR]) + 2000;
   \   000000A0   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000A4   0x.... 0x....      BL       bcd2bin
   \   000000A8   0xF510 0x60FA      ADDS     R0,R0,#+2000
   \   000000AC   0x8020             STRH     R0,[R4, #+0]
    108          	
    109          	GetTmLock = 0;
   \   000000AE   0x....             LDR.N    R0,??DataTable1_1
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x7001             STRB     R1,[R0, #+0]
    110          	
    111          	return SUCCESS;
   \   000000B4   0x2001             MOVS     R0,#+1
   \                     ??rtc_ds1339_get_time_5:
   \   000000B6   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    112          }
    113          

   \                                 In section .text, align 2, keep-with-next
    114          Status rtc_ds1339_set_time(struct TIME_STRUCT * time)
    115          {
   \                     rtc_ds1339_set_time:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    116          	UINT8 buf[7] = {0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xC006             STM      R0!,{R1,R2}
   \   0000000C   0x3808             SUBS     R0,R0,#+8
    117          	UINT8 Reg;
    118          	Status res;
    119          	
    120          	buf[DS1339_REG_SECS] = 	bin2bcd(time->S);
   \   0000000E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000010   0x.... 0x....      BL       bin2bcd
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
    121          	buf[DS1339_REG_MIN] = 	bin2bcd(time->M);
   \   00000018   0x7960             LDRB     R0,[R4, #+5]
   \   0000001A   0x.... 0x....      BL       bin2bcd
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    122          	buf[DS1339_REG_HOUR] = 	bin2bcd(time->H);
   \   00000022   0x7920             LDRB     R0,[R4, #+4]
   \   00000024   0x.... 0x....      BL       bin2bcd
   \   00000028   0xF88D 0x0002      STRB     R0,[SP, #+2]
    123          	buf[DS1339_REG_MDAY] = 	bin2bcd(time->d);
   \   0000002C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000002E   0x.... 0x....      BL       bin2bcd
   \   00000032   0xF88D 0x0004      STRB     R0,[SP, #+4]
    124          	buf[DS1339_REG_MONTH] = bin2bcd(time->m);
   \   00000036   0x78A0             LDRB     R0,[R4, #+2]
   \   00000038   0x.... 0x....      BL       bin2bcd
   \   0000003C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    125          	/* assume 20YY not 19YY */
    126          	buf[DS1339_REG_YEAR] = bin2bcd(time->y - 2000);	
   \   00000040   0x8820             LDRH     R0,[R4, #+0]
   \   00000042   0xF5B0 0x60FA      SUBS     R0,R0,#+2000
   \   00000046   0x.... 0x....      BL       bin2bcd
   \   0000004A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    127          
    128          	buf[DS1339_REG_MONTH] |= DS1339_BIT_CENTURY;		//mark
   \   0000004E   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000052   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000056   0xF88D 0x0005      STRB     R0,[SP, #+5]
    129          	
    130          	for(Reg=0;Reg<7;Reg++)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x0005             MOVS     R5,R0
   \                     ??rtc_ds1339_set_time_0:
   \   0000005E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   0x2D07             CMP      R5,#+7
   \   00000062   0xDA12             BGE.N    ??rtc_ds1339_set_time_1
    131          	{
    132          		if(Reg == DS1339_REG_WDAY)		//星期不控制
   \   00000064   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   0x2D03             CMP      R5,#+3
   \   00000068   0xD00D             BEQ.N    ??rtc_ds1339_set_time_2
    133          			continue;
    134          		res = DS1339_writeByte(Reg, &buf[Reg]);
   \                     ??rtc_ds1339_set_time_3:
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x1829             ADDS     R1,R5,R0
   \   00000070   0x0028             MOVS     R0,R5
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x.... 0x....      BL       DS1339_writeByte
   \   00000078   0x0006             MOVS     R6,R0
    135          		if(res == ERROR)
   \   0000007A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007C   0x2E00             CMP      R6,#+0
   \   0000007E   0xD102             BNE.N    ??rtc_ds1339_set_time_2
    136          			return res;
   \   00000080   0x0030             MOVS     R0,R6
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0xE002             B.N      ??rtc_ds1339_set_time_4
    137          	}
   \                     ??rtc_ds1339_set_time_2:
   \   00000086   0x1C6D             ADDS     R5,R5,#+1
   \   00000088   0xE7E9             B.N      ??rtc_ds1339_set_time_0
    138          	
    139          	return SUCCESS;
   \                     ??rtc_ds1339_set_time_1:
   \   0000008A   0x2001             MOVS     R0,#+1
   \                     ??rtc_ds1339_set_time_4:
   \   0000008C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          static unsigned bcd2bin(unsigned char val)
    143          {
    144          	return (val & 0x0f) + (val >> 4) * 10;
   \                     bcd2bin:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0xF010 0x010F      ANDS     R1,R0,#0xF
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x0900             LSRS     R0,R0,#+4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x220A             MOVS     R2,#+10
   \   0000000E   0xFB02 0x1000      MLA      R0,R2,R0,R1
   \   00000012   0x4770             BX       LR               ;; return
    145          }
    146          

   \                                 In section .text, align 2, keep-with-next
    147          static unsigned char bin2bcd(unsigned val)
    148          {
    149          	return ((val / 10) << 4) + val % 10;
   \                     bin2bcd:
   \   00000000   0x210A             MOVS     R1,#+10
   \   00000002   0x220A             MOVS     R2,#+10
   \   00000004   0xFBB0 0xF2F2      UDIV     R2,R0,R2
   \   00000008   0xEB10 0x1202      ADDS     R2,R0,R2, LSL #+4
   \   0000000C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000010   0xFB01 0x2010      MLS      R0,R1,R0,R2
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    150          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     GetTmLock

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DS1339_I2C_init
         8   -> I2C_Cmd
         8   -> I2C_Init
         8   -> PINSEL_ConfigPin
         8   -> PINSEL_SetOpenDrainMode
         8   -> PINSEL_SetPinMode
      56   DS1339_readByte
        56   -> I2C_MasterTransferData
      64   DS1339_writeByte
        64   -> I2C_MasterTransferData
       0   bcd2bin
       0   bin2bcd
      24   rtc_ds1339_get_time
        24   -> DS1339_readByte
        24   -> OSTimeDlyHMSM
        24   -> bcd2bin
      16   rtc_ds1339_init
        16   -> DS1339_I2C_init
        16   -> DS1339_writeByte
      24   rtc_ds1339_set_time
        24   -> DS1339_writeByte
        24   -> bin2bcd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0}>
       8  ?<Constant {0}>_1
       4  ??DataTable1
       4  ??DataTable1_1
      88  DS1339_I2C_init
      42  DS1339_readByte
      56  DS1339_writeByte
       1  GetTmLock
      20  bcd2bin
      24  bin2bcd
     184  rtc_ds1339_get_time
      30  rtc_ds1339_init
     142  rtc_ds1339_set_time

 
   1 byte  in section .bss
  16 bytes in section .rodata
 594 bytes in section .text
 
 594 bytes of CODE  memory
  16 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
