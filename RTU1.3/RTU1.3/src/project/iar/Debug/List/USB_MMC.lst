###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      05/Apr/2017  15:06:13 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.3\USB\USB_MMC.C                   #
#    Command line =  D:\wangfan2\桌面\RTU_1.3\USB\USB_MMC.C -lCN              #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.3\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.3\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.3\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.3\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.3\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\USB_MMC. #
#                    lst                                                      #
#    Object file  =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\USB_MMC.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.3\USB\USB_MMC.C
      1          /***
      2           * @file		Mci_CidCard.c
      3           * @purpose		This example describes how to using UART in IrDA mode
      4           * @version		1.0
      5           * @date		06. October. 2010
      6           * @author		NXP MCU SW Application Team
      7           *---------------------------------------------------------------------
      8           * Software that is described herein is for illustrative purposes only
      9           * which provides customers with programming information regarding the
     10           * products. This software is supplied "AS IS" without any warranties.
     11           * NXP Semiconductors assumes no responsibility or liability for the
     12           * use of the software, conveys no license or title under any patent,
     13           * copyright, or mask work right to the product. NXP Semiconductors
     14           * reserves the right to make changes in the software without
     15           * notification. NXP Semiconductors also make no representation or
     16           * warranty that such application will be suitable for the specified
     17           * use without further testing or modification.
     18           **********************************************************************/
     19          //#include "includes.h"
     20          #include "lpc177x_8x.h"
     21          #include "system_LPC177x_8x.h"
     22          #include "lpc_types.h"
     23          #include "core_cm3.h"
     24          //#include "lpc177x_8x_mci.h"
     25          #include "lpc177x_8x_timer.h"
     26          #include "usb_cnfg.h"
     27          #include "usb_desc.h"
     28          #include "usb_hw.h"
     29          #include "usb_t9.h"
     30          #include "usb_hooks.h"
     31          #include "usb_dev_desc.h"
     32          #include "usb_hooks.h"
     33          #include "usb_buffer.h"
     34          
     35          #include "scsi_ll.h"
     36          #include "scsi.h"
     37          #include "scsi_cmd.h"
     38          
     39          #include "disk.h"
     40          #include "lun.h"
     41          #include  "ucos_ii.h"
     42          #include "sd_dsk_desc.h"
     43          #include "sd_spi_mode.h"
     44          #include "sd_ll_spi1.h"
     45          #include "debug_frmwrk.h"
     46          
     47          #include "global.h"
     48          
     49          
     50          #define TIMER0_TICK_PER_SEC   2
     51          #define UPDATE_SHOW_DLY       ((Int32U)(0.5 * TIMER0_TICK_PER_SEC))

   \                                 In section .bss, align 4
     52          volatile Boolean TickFlag = FALSE;
   \                     TickFlag:
   \   00000000                      DS8 4
     53          
     54          #pragma location="USB_DMA_RAM"
     55          #pragma data_alignment=4

   \                                 In section USB_DMA_RAM, align 4
     56          __no_init unsigned char Lun0Buffer[512];
   \                     Lun0Buffer:
   \   00000000                      DS8 512
     57          
     58          /*variable for clitical section entry control*/

   \                                 In section .bss, align 4
     59          unsigned int CriticalSecCntr;
   \                     CriticalSecCntr:
   \   00000000                      DS8 4
     60          /* test_5555 **/

   \                                 In section .bss, align 4
     61          uint8_t buf_test[1024];
   \                     buf_test:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
     62          uint32_t test_i;
   \                     test_i:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     63          static uint32_t test_cnt ;
   \                     test_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     64          FIL file_test;
   \                     file_test:
   \   00000000                      DS8 548

   \                                 In section .text, align 4, keep-with-next
     65          void func_ff_test(void)
     66          {
   \                     func_ff_test:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     67            UINT bw;
     68            FRESULT res;
     69            /* test_5555 **/
     70            for( test_i = 0; test_i <1023;test_i ++)
   \   00000004   0x481C             LDR.N    R0,??func_ff_test_0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6001             STR      R1,[R0, #+0]
   \                     ??func_ff_test_1:
   \   0000000A   0x481B             LDR.N    R0,??func_ff_test_0
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF240 0x31FF      MOVW     R1,#+1023
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD211             BCS.N    ??func_ff_test_2
     71            {
     72              buf_test[test_i] = '0'+ test_i%10;
   \   00000016   0x4818             LDR.N    R0,??func_ff_test_0
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x210A             MOVS     R1,#+10
   \   0000001C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000020   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000024   0x3030             ADDS     R0,R0,#+48
   \   00000026   0x4914             LDR.N    R1,??func_ff_test_0
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x4A14             LDR.N    R2,??func_ff_test_0+0x4
   \   0000002C   0x5488             STRB     R0,[R1, R2]
     73            }
   \   0000002E   0x4812             LDR.N    R0,??func_ff_test_0
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x4910             LDR.N    R1,??func_ff_test_0
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE7E7             B.N      ??func_ff_test_1
     74            buf_test[1023] = 0;
   \                     ??func_ff_test_2:
   \   0000003A   0x4810             LDR.N    R0,??func_ff_test_0+0x4
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF880 0x13FF      STRB     R1,[R0, #+1023]
     75          
     76            /** test_5555 **/
     77            res = f_open(&file_test, "test_20150121.txt", (FA_READ|FA_WRITE));
   \   00000042   0x2203             MOVS     R2,#+3
   \   00000044   0x490E             LDR.N    R1,??func_ff_test_0+0x8
   \   00000046   0x480F             LDR.N    R0,??func_ff_test_0+0xC
   \   00000048   0x.... 0x....      BL       f_open
   \   0000004C   0x0004             MOVS     R4,R0
     78          
     79            if( (uint32_t)(file_test.fs) == 0)
     80            {
     81          //    while(1);
     82            }
     83            if( res != FR_OK)
     84            {
     85          //    while(1);
     86            }
     87            f_lseek(&file_test,file_test.fsize);
   \   0000004E   0x480D             LDR.N    R0,??func_ff_test_0+0xC
   \   00000050   0x68C1             LDR      R1,[R0, #+12]
   \   00000052   0x480C             LDR.N    R0,??func_ff_test_0+0xC
   \   00000054   0x.... 0x....      BL       f_lseek
     88              if( (uint32_t)(file_test.fs) == 0)
     89            {
     90          //    while(1);
     91            }
     92            f_write(&file_test,buf_test,sizeof buf_test,&bw);
   \   00000058   0xAB00             ADD      R3,SP,#+0
   \   0000005A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000005E   0x4907             LDR.N    R1,??func_ff_test_0+0x4
   \   00000060   0x4808             LDR.N    R0,??func_ff_test_0+0xC
   \   00000062   0x.... 0x....      BL       f_write
     93            if( bw == 0)
     94            {
     95          //    while (1);
     96            }
     97              if( (uint32_t)(file_test.fs) == 0)
     98            {
     99          //    while(1);
    100            }
    101            //f_sync(&file_test);
    102          
    103            if(bw == 0)
    104            {
    105          //    while(1);
    106            }
    107          
    108            f_close(&file_test);
   \   00000066   0x4807             LDR.N    R0,??func_ff_test_0+0xC
   \   00000068   0x.... 0x....      BL       f_close
    109          
    110            test_cnt++;
   \   0000006C   0x4806             LDR.N    R0,??func_ff_test_0+0x10
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x4905             LDR.N    R1,??func_ff_test_0+0x10
   \   00000074   0x6008             STR      R0,[R1, #+0]
    111          
    112          
    113          }
   \   00000076   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   \                     ??func_ff_test_0:
   \   00000078   0x........         DC32     test_i
   \   0000007C   0x........         DC32     buf_test
   \   00000080   0x........         DC32     `?<Constant "test_20150121.txt">`
   \   00000084   0x........         DC32     file_test
   \   00000088   0x........         DC32     test_cnt

   \                                 In section .rodata, align 4
   \                     `?<Constant "test_20150121.txt">`:
   \   00000000   0x74 0x65          DC8 "test_20150121.txt"
   \              0x73 0x74    
   \              0x5F 0x32    
   \              0x30 0x31    
   \              0x35 0x30    
   \              0x31 0x32    
   \              0x31 0x2E    
   \              0x74 0x78    
   \              0x74 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   func_ff_test
        16   -> f_close
        16   -> f_lseek
        16   -> f_open
        16   -> f_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "test_20150121.txt">
       4  CriticalSecCntr
     512  Lun0Buffer
       4  TickFlag
    1024  buf_test
     548  file_test
     140  func_ff_test
       4  test_cnt
       4  test_i

 
 1 588 bytes in section .bss
    20 bytes in section .rodata
   140 bytes in section .text
   512 bytes in section USB_DMA_RAM
 
   140 bytes of CODE  memory
    20 bytes of CONST memory
 2 100 bytes of DATA  memory

Errors: none
Warnings: none
