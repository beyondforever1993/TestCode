###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      25/Mar/2017  14:36:35 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\app\app_hooks.c                 #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\app\app_hooks.c -lCN            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\app_hook #
#                    s.lst                                                    #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\app_hooks #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\app\app_hooks.c
      1          /*
      2          *********************************************************************************************************
      3          *                                              EXAMPLE CODE
      4          *
      5          *                          (c) Copyright 2003-2009; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                             uC/OS-II
     18          *                                         Application Hooks
     19          *
     20          * Filename      : app_hooks.c
     21          * Version       : V1.00
     22          * Programmer(s) : FT
     23          *********************************************************************************************************
     24          */
     25          
     26          #include "ucos_ii.h"
     27          #include "lpc177x_8x.h"
     28          
     29          
     30          #if (OS_APP_HOOKS_EN > 0)
     31          
     32          /*
     33          *********************************************************************************************************
     34          *                                      TASK CREATION HOOK (APPLICATION)
     35          *
     36          * Description : This function is called when a task is created.
     37          *
     38          * Argument(s) : ptcb   is a pointer to the task control block of the task being created.
     39          *
     40          * Note(s)     : (1) Interrupts are disabled during this call.
     41          *********************************************************************************************************
     42          */
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void  App_TaskCreateHook (OS_TCB *ptcb)
     45          {
     46          #if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
     47              //    OSProbe_TaskCreateHook(ptcb);
     48          #endif
     49          }
   \                     App_TaskCreateHook:
   \   00000000   0x4770             BX       LR               ;; return
     50          
     51          /*
     52          *********************************************************************************************************
     53          *                                    TASK DELETION HOOK (APPLICATION)
     54          *
     55          * Description : This function is called when a task is deleted.
     56          *
     57          * Argument(s) : ptcb   is a pointer to the task control block of the task being deleted.
     58          *
     59          * Note(s)     : (1) Interrupts are disabled during this call.
     60          *********************************************************************************************************
     61          */
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void  App_TaskDelHook (OS_TCB *ptcb)
     64          {
     65              (void)ptcb;
     66          }
   \                     App_TaskDelHook:
   \   00000000   0x4770             BX       LR               ;; return
     67          
     68          /*
     69          *********************************************************************************************************
     70          *                                      IDLE TASK HOOK (APPLICATION)
     71          *
     72          * Description : This function is called by OSTaskIdleHook(), which is called by the idle task.  This hook
     73          *               has been added to allow you to do such things as STOP the CPU to conserve power.
     74          *
     75          * Argument(s) : none.
     76          *
     77          * Note(s)     : (1) Interrupts are enabled during this call.
     78          *********************************************************************************************************
     79          */
     80          
     81          #if OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
     82          void  App_TaskIdleHook (void)
     83          {
     84          }
   \                     App_TaskIdleHook:
   \   00000000   0x4770             BX       LR               ;; return
     85          #endif
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                            TASK RETURN HOOK (APPLICATION)
     91          *
     92          * Description: This function is called if a task accidentally returns.  In other words, a task should
     93          *              either be an infinite loop or delete itself when done.
     94          *
     95          * Arguments  : ptcb      is a pointer to the task control block of the task that is returning.
     96          *
     97          * Note(s)    : none
     98          *********************************************************************************************************
     99          */
    100          
    101          #if OS_VERSION >= 289

   \                                 In section .text, align 2, keep-with-next
    102          void  App_TaskReturnHook (OS_TCB  *ptcb)
    103          {
    104              (void)ptcb;
    105          }
   \                     App_TaskReturnHook:
   \   00000000   0x4770             BX       LR               ;; return
    106          #endif
    107          
    108          
    109          /*
    110          *********************************************************************************************************
    111          *                                        STATISTIC TASK HOOK (APPLICATION)
    112          *
    113          * Description : This function is called by OSTaskStatHook(), which is called every second by uC/OS-II's
    114          *               statistics task.  This allows your application to add functionality to the statistics task.
    115          *
    116          * Argument(s) : none.
    117          *********************************************************************************************************
    118          */
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void  App_TaskStatHook (void)
    121          {
    122          }
   \                     App_TaskStatHook:
   \   00000000   0x4770             BX       LR               ;; return
    123          
    124          /*
    125          *********************************************************************************************************
    126          *                                        TASK SWITCH HOOK (APPLICATION)
    127          *
    128          * Description : This function is called when a task switch is performed.  This allows you to perform other
    129          *               operations during a context switch.
    130          *
    131          * Argument(s) : none.
    132          *
    133          * Note(s)     : (1) Interrupts are disabled during this call.
    134          *
    135          *               (2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    136          *                   will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    137          *                  task being switched out (i.e. the preempted task).
    138          *********************************************************************************************************
    139          */
    140          
    141          #if OS_TASK_SW_HOOK_EN > 0
    142          #include "lpc177x_8x_wwdt.h"
    143          
    144          extern char TaskGo[10];
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void  App_TaskSwHook (void)
    147          {
   \                     App_TaskSwHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    148            if( (TaskGo[0] == 0) && (TaskGo[1] == 0) && (TaskGo[2] == 0) && (TaskGo[3] == 0) )
   \   00000002   0x....             LDR.N    R0,??DataTable0
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD119             BNE.N    ??App_TaskSwHook_0
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD115             BNE.N    ??App_TaskSwHook_0
   \   00000012   0x....             LDR.N    R0,??DataTable0
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD111             BNE.N    ??App_TaskSwHook_0
   \   0000001A   0x....             LDR.N    R0,??DataTable0
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD10D             BNE.N    ??App_TaskSwHook_0
    149            {
    150              TaskGo[0] = 1;
   \   00000022   0x....             LDR.N    R0,??DataTable0
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x7001             STRB     R1,[R0, #+0]
    151              TaskGo[1] = 1;
   \   00000028   0x....             LDR.N    R0,??DataTable0
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x7041             STRB     R1,[R0, #+1]
    152              TaskGo[2] = 1;
   \   0000002E   0x....             LDR.N    R0,??DataTable0
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x7081             STRB     R1,[R0, #+2]
    153              TaskGo[3] = 1;
   \   00000034   0x....             LDR.N    R0,??DataTable0
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x70C1             STRB     R1,[R0, #+3]
    154              
    155              WWDT_Feed();
   \   0000003A   0x.... 0x....      BL       WWDT_Feed
    156            }
    157          #if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    158              //    OSProbe_TaskSwHook();
    159          #endif
    160          }
   \                     ??App_TaskSwHook_0:
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    161          #endif
    162          
    163          /*
    164          *********************************************************************************************************
    165          *                                     OS_TCBInit() HOOK (APPLICATION)
    166          *
    167          * Description : This function is called by OSTCBInitHook(), which is called by OS_TCBInit() after setting
    168          *               up most of the TCB.
    169          *
    170          * Argument(s) : ptcb    is a pointer to the TCB of the task being created.
    171          *
    172          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    173          *********************************************************************************************************
    174          */
    175          
    176          #if OS_VERSION >= 204

   \                                 In section .text, align 2, keep-with-next
    177          void  App_TCBInitHook (OS_TCB *ptcb)
    178          {
    179              (void)ptcb;
    180          }
   \                     App_TCBInitHook:
   \   00000000   0x4770             BX       LR               ;; return
    181          #endif
    182          
    183          /*
    184          *********************************************************************************************************
    185          *                                        TICK HOOK (APPLICATION)
    186          *
    187          * Description : This function is called every tick.
    188          *
    189          * Argument(s) : none.
    190          *
    191          * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    192          *********************************************************************************************************
    193          */
    194          
    195          #if OS_TIME_TICK_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    196          void  App_TimeTickHook (void)
    197          {
    198          #if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    199              //    OSProbe_TickHook();
    200          #endif
    201          }
   \                     App_TimeTickHook:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     TaskGo
    202          #endif
    203          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_TCBInitHook
       0   App_TaskCreateHook
       0   App_TaskDelHook
       0   App_TaskIdleHook
       0   App_TaskReturnHook
       0   App_TaskStatHook
       8   App_TaskSwHook
         8   -> WWDT_Feed
       0   App_TimeTickHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       2  App_TCBInitHook
       2  App_TaskCreateHook
       2  App_TaskDelHook
       2  App_TaskIdleHook
       2  App_TaskReturnHook
       2  App_TaskStatHook
      64  App_TaskSwHook
       2  App_TimeTickHook

 
 82 bytes in section .text
 
 82 bytes of CODE memory

Errors: none
Warnings: none
