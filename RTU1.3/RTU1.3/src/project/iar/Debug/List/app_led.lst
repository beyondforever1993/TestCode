###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      20/Mar/2017  17:18:18 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\LED\app_led.c          #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\LED\app_led.c -lCN     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\app_led. #
#                    lst                                                      #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\app_led.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\HuaceApp\LED\app_led.c
      1          #include "app_led.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      2          
      3          const   led_task_t task_power[];
      4          const   led_task_t task_bd[];
      5          const   led_task_t task_gprs_check[];
      6          const   led_task_t task_gprs_working[];
      7          const   led_task_t task_gprs_sleep[];
      8          const   led_task_t task_sensor[] ;
      9          const   led_task_t task_data1[] ;
     10          const   led_task_t task_data2[] ;
     11          

   \                                 In section .data, align 4
     12          static  led_blink_t led_blinks[]=
   \                     led_blinks:
   \   00000000   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x80000000         DC32 2147483648, task_power
   \              0x........   
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   0000001C   0x40000000         DC32 1073741824, task_bd
   \              0x........   
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   00000034   0x20000000         DC32 536870912, task_gprs_check
   \              0x........   
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   0000004C   0x10000000         DC32 268435456, task_sensor
   \              0x........   
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   00000064   0x08000000         DC32 134217728, task_data1
   \              0x........   
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \   0000007C   0x00800000         DC32 8388608, task_data2
   \              0x........   
   \   00000084   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     13          {
     14            {LED_POWER_PORT ,LED_POWER_PIN , task_power      ,0},//电源灯，红色。  说明：工作时常亮。
     15            {LED_BD_PORT    ,LED_BD_PIN    , task_bd         ,0},//BD，蓝色。      说明：数据通过BD上传时闪烁。
     16            {LED_GPRS_PORT  ,LED_GPRS_PIN  , task_gprs_check ,0},//GPRS，绿色。    说明：工作时常亮。
     17            {LED_SENSOR_PORT,LED_SENSOR_PIN, task_sensor     ,0},//上传，黄色。    说明：数据通过GPRS上传时闪烁。
     18            {LED_DATA1_PORT ,LED_DATA1_PIN , task_data1      ,0},//下载，黄绿色。  说明：采集传感器数据时闪烁。
     19            {LED_DATA2_PORT ,LED_DATA2_PIN , task_data2      ,0},
     20          };
     21          
     22          
     23          static void led_task_process(void);
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void  App_Task_LedKey (void *p_arg)
     26          {       
   \                     App_Task_LedKey:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     27            uint8_t i;
     28            
     29            /** 引脚初始化 **/
     30            Board_LED_Init();
   \   00000004   0x.... 0x....      BL       Board_LED_Init
     31            
     32            /** 初始化任务 **/
     33            
     34            for( i = 0; i <  sizeof (led_blinks) / sizeof(*led_blinks);i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
   \                     ??App_Task_LedKey_0:
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D06             CMP      R5,#+6
   \   00000010   0xD217             BCS.N    ??App_Task_LedKey_1
     35            {
     36              led_blinks[i].idx = 0;
   \   00000012   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000014   0x2018             MOVS     R0,#+24
   \   00000016   0x....             LDR.N    R1,??DataTable1
   \   00000018   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7301             STRB     R1,[R0, #+12]
     37              
     38              memcpy(&led_blinks[i].curr_task,led_blinks[i].task,sizeof(led_task_t));
   \   00000020   0x2208             MOVS     R2,#+8
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2018             MOVS     R0,#+24
   \   00000026   0x....             LDR.N    R1,??DataTable1
   \   00000028   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000002C   0x6881             LDR      R1,[R0, #+8]
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2018             MOVS     R0,#+24
   \   00000032   0x....             LDR.N    R3,??DataTable1
   \   00000034   0xFB00 0x3005      MLA      R0,R0,R5,R3
   \   00000038   0x3010             ADDS     R0,R0,#+16
   \   0000003A   0x.... 0x....      BL       memcpy
     39            }
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
   \   00000040   0xE7E4             B.N      ??App_Task_LedKey_0
     40            
     41            
     42            while(1)
     43            {
     44              
     45              TaskGo[2] = 0;
   \                     ??App_Task_LedKey_1:
   \   00000042   0x....             LDR.N    R0,??DataTable1_1
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x7081             STRB     R1,[R0, #+2]
     46              
     47              /** 北斗 **/
     48              
     49              if( g_RtuStatus.led_bd_st)
   \   00000048   0x....             LDR.N    R0,??DataTable1_2
   \   0000004A   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD00D             BEQ.N    ??App_Task_LedKey_2
     50              {
     51                g_RtuStatus.led_bd_st = 0;
   \   00000052   0x....             LDR.N    R0,??DataTable1_2
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xF880 0x1035      STRB     R1,[R0, #+53]
     52                
     53                led_blinks[1].idx = 0;
   \   0000005A   0x....             LDR.N    R0,??DataTable1
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0xF880 0x1024      STRB     R1,[R0, #+36]
     54                
     55                memcpy(&led_blinks[1].curr_task,led_blinks[1].task,sizeof(led_task_t));
   \   00000062   0x2208             MOVS     R2,#+8
   \   00000064   0x....             LDR.N    R0,??DataTable1
   \   00000066   0x6A01             LDR      R1,[R0, #+32]
   \   00000068   0x....             LDR.N    R0,??DataTable1_3
   \   0000006A   0x.... 0x....      BL       memcpy
     56                
     57              }
     58              
     59              /** GPRS **/
     60              if( led_blinks[2].curr_task.ctrl == LED_TASK_STOP)
   \                     ??App_Task_LedKey_2:
   \   0000006E   0x....             LDR.N    R0,??DataTable1
   \   00000070   0xF890 0x0040      LDRB     R0,[R0, #+64]
   \   00000074   0x2805             CMP      R0,#+5
   \   00000076   0xD11F             BNE.N    ??App_Task_LedKey_3
     61              {//保证自检完毕
     62                if( g_RtuStatus.led_gprs_st)
   \   00000078   0x....             LDR.N    R0,??DataTable1_2
   \   0000007A   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD00D             BEQ.N    ??App_Task_LedKey_4
     63                {//working
     64                  led_blinks[2].idx = 0;
   \   00000082   0x....             LDR.N    R0,??DataTable1
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0xF880 0x103C      STRB     R1,[R0, #+60]
     65                  
     66                  led_blinks[2].task = task_gprs_working;
   \   0000008A   0x....             LDR.N    R0,??DataTable1
   \   0000008C   0x....             LDR.N    R1,??DataTable1_4
   \   0000008E   0x6381             STR      R1,[R0, #+56]
     67                  
     68                  memcpy(&led_blinks[2].curr_task,led_blinks[2].task,sizeof(led_task_t));
   \   00000090   0x2208             MOVS     R2,#+8
   \   00000092   0x....             LDR.N    R0,??DataTable1
   \   00000094   0x6B81             LDR      R1,[R0, #+56]
   \   00000096   0x....             LDR.N    R0,??DataTable1_5
   \   00000098   0x.... 0x....      BL       memcpy
   \   0000009C   0xE00C             B.N      ??App_Task_LedKey_3
     69                }
     70                else
     71                {//sleep
     72                  led_blinks[2].idx = 0;
   \                     ??App_Task_LedKey_4:
   \   0000009E   0x....             LDR.N    R0,??DataTable1
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0xF880 0x103C      STRB     R1,[R0, #+60]
     73                  
     74                  led_blinks[2].task = task_gprs_sleep;
   \   000000A6   0x....             LDR.N    R0,??DataTable1
   \   000000A8   0x....             LDR.N    R1,??DataTable1_6
   \   000000AA   0x6381             STR      R1,[R0, #+56]
     75                  
     76                  memcpy(&led_blinks[2].curr_task,led_blinks[2].task,sizeof(led_task_t));
   \   000000AC   0x2208             MOVS     R2,#+8
   \   000000AE   0x....             LDR.N    R0,??DataTable1
   \   000000B0   0x6B81             LDR      R1,[R0, #+56]
   \   000000B2   0x....             LDR.N    R0,??DataTable1_5
   \   000000B4   0x.... 0x....      BL       memcpy
     77                }
     78                
     79              }
     80              
     81              /** 上传 **/
     82              
     83              if( g_RtuStatus.led_upload)
   \                     ??App_Task_LedKey_3:
   \   000000B8   0x....             LDR.N    R0,??DataTable1_2
   \   000000BA   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD00D             BEQ.N    ??App_Task_LedKey_5
     84              {
     85                g_RtuStatus.led_upload = 0;
   \   000000C2   0x....             LDR.N    R0,??DataTable1_2
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0xF880 0x1036      STRB     R1,[R0, #+54]
     86                
     87                led_blinks[3].idx = 0;
   \   000000CA   0x....             LDR.N    R0,??DataTable1
   \   000000CC   0x2100             MOVS     R1,#+0
   \   000000CE   0xF880 0x1054      STRB     R1,[R0, #+84]
     88                
     89                memcpy(&led_blinks[3].curr_task,led_blinks[3].task,sizeof(led_task_t));
   \   000000D2   0x2208             MOVS     R2,#+8
   \   000000D4   0x....             LDR.N    R0,??DataTable1
   \   000000D6   0x6D01             LDR      R1,[R0, #+80]
   \   000000D8   0x....             LDR.N    R0,??DataTable1_7
   \   000000DA   0x.... 0x....      BL       memcpy
     90              }
     91              
     92              /** 下载 **/
     93              
     94              if( g_RtuStatus.led_dwload)
   \                     ??App_Task_LedKey_5:
   \   000000DE   0x....             LDR.N    R0,??DataTable1_2
   \   000000E0   0xF890 0x0037      LDRB     R0,[R0, #+55]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD00D             BEQ.N    ??App_Task_LedKey_6
     95              {
     96                g_RtuStatus.led_dwload = 0;
   \   000000E8   0x....             LDR.N    R0,??DataTable1_2
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0xF880 0x1037      STRB     R1,[R0, #+55]
     97                
     98                led_blinks[4].idx = 0;
   \   000000F0   0x....             LDR.N    R0,??DataTable1
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0xF880 0x106C      STRB     R1,[R0, #+108]
     99                
    100                memcpy(&led_blinks[4].curr_task,led_blinks[4].task,sizeof(led_task_t));
   \   000000F8   0x2208             MOVS     R2,#+8
   \   000000FA   0x....             LDR.N    R0,??DataTable1
   \   000000FC   0x6E81             LDR      R1,[R0, #+104]
   \   000000FE   0x....             LDR.N    R0,??DataTable1_8
   \   00000100   0x.... 0x....      BL       memcpy
    101              }
    102              
    103              /** sensor **/
    104              
    105              led_task_process();
   \                     ??App_Task_LedKey_6:
   \   00000104   0x.... 0x....      BL       led_task_process
    106              
    107              OSTimeDlyHMSM(0,LED_POLL_TIME_MS/1000/60%60,LED_POLL_TIME_MS/1000%60,LED_POLL_TIME_MS%1000);
   \   00000108   0x2364             MOVS     R3,#+100
   \   0000010A   0x2200             MOVS     R2,#+0
   \   0000010C   0x2100             MOVS     R1,#+0
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000114   0xE795             B.N      ??App_Task_LedKey_1
    108            }
    109            
    110          }
    111          
    112          

   \                                 In section .text, align 2, keep-with-next
    113          static void led_task_process(void)
    114          {
   \                     led_task_process:
   \   00000000   0xB510             PUSH     {R4,LR}
    115            uint8_t i;
    116            
    117            for( i = 0; i < sizeof (led_blinks) / sizeof(*led_blinks) ; i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??led_task_process_0:
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C06             CMP      R4,#+6
   \   0000000A   0xF080 0x80F7      BCS.W    ??led_task_process_1
    118            {
    119              
    120              if( led_blinks[i].curr_task.ms_cnt > LED_POLL_TIME_MS)
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0x....             LDR.N    R1,??DataTable1
   \   00000014   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000018   0x6940             LDR      R0,[R0, #+20]
   \   0000001A   0x2865             CMP      R0,#+101
   \   0000001C   0xDB0D             BLT.N    ??led_task_process_2
    121              {
    122                led_blinks[i].curr_task.ms_cnt -= LED_POLL_TIME_MS;
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x2018             MOVS     R0,#+24
   \   00000022   0x....             LDR.N    R1,??DataTable1
   \   00000024   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000028   0x6940             LDR      R0,[R0, #+20]
   \   0000002A   0x3864             SUBS     R0,R0,#+100
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x2118             MOVS     R1,#+24
   \   00000030   0x....             LDR.N    R2,??DataTable1
   \   00000032   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000036   0x6148             STR      R0,[R1, #+20]
   \   00000038   0xE01D             B.N      ??led_task_process_3
    123              }
    124              else if( led_blinks[i].curr_task.ms_cnt < -LED_POLL_TIME_MS)
   \                     ??led_task_process_2:
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2018             MOVS     R0,#+24
   \   0000003E   0x....             LDR.N    R1,??DataTable1
   \   00000040   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000044   0x6940             LDR      R0,[R0, #+20]
   \   00000046   0xF110 0x0F64      CMN      R0,#+100
   \   0000004A   0xDA0D             BGE.N    ??led_task_process_4
    125              {
    126                led_blinks[i].curr_task.ms_cnt += LED_POLL_TIME_MS;
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x2018             MOVS     R0,#+24
   \   00000050   0x....             LDR.N    R1,??DataTable1
   \   00000052   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000056   0x6940             LDR      R0,[R0, #+20]
   \   00000058   0x3064             ADDS     R0,R0,#+100
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2118             MOVS     R1,#+24
   \   0000005E   0x....             LDR.N    R2,??DataTable1
   \   00000060   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   00000064   0x6148             STR      R0,[R1, #+20]
   \   00000066   0xE006             B.N      ??led_task_process_3
    127              }
    128              else
    129              {
    130                led_blinks[i].curr_task.ms_cnt = 0;
   \                     ??led_task_process_4:
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x2018             MOVS     R0,#+24
   \   0000006C   0x....             LDR.N    R1,??DataTable1
   \   0000006E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x6141             STR      R1,[R0, #+20]
    131              }
    132              
    133              if( led_blinks[i].curr_task.ms_cnt == 0)
   \                     ??led_task_process_3:
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x2018             MOVS     R0,#+24
   \   0000007A   0x....             LDR.N    R1,??DataTable1
   \   0000007C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000080   0x6940             LDR      R0,[R0, #+20]
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xF040 0x80B8      BNE.W    ??led_task_process_5
    134              {// 任务切换
    135                if( led_blinks[i].curr_task.ctrl != LED_TASK_STOP)
   \   00000088   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008A   0x2018             MOVS     R0,#+24
   \   0000008C   0x....             LDR.N    R1,??DataTable1
   \   0000008E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000092   0x7C00             LDRB     R0,[R0, #+16]
   \   00000094   0x2805             CMP      R0,#+5
   \   00000096   0xF000 0x80AF      BEQ.W    ??led_task_process_5
    136                {
    137                  led_blinks[i].idx++;
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x2018             MOVS     R0,#+24
   \   0000009E   0x....             LDR.N    R1,??DataTable1
   \   000000A0   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000A4   0x7B00             LDRB     R0,[R0, #+12]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0x2118             MOVS     R1,#+24
   \   000000AC   0x....             LDR.N    R2,??DataTable1
   \   000000AE   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000000B2   0x7308             STRB     R0,[R1, #+12]
    138                  
    139                  memcpy(&led_blinks[i].curr_task,led_blinks[i].task+led_blinks[i].idx,sizeof(led_task_t));
   \   000000B4   0x2208             MOVS     R2,#+8
   \   000000B6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B8   0x2018             MOVS     R0,#+24
   \   000000BA   0x....             LDR.N    R1,??DataTable1
   \   000000BC   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000C0   0x7B00             LDRB     R0,[R0, #+12]
   \   000000C2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C4   0x2118             MOVS     R1,#+24
   \   000000C6   0x....             LDR.N    R3,??DataTable1
   \   000000C8   0xFB01 0x3104      MLA      R1,R1,R4,R3
   \   000000CC   0x6889             LDR      R1,[R1, #+8]
   \   000000CE   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   000000D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D4   0x2018             MOVS     R0,#+24
   \   000000D6   0x....             LDR.N    R3,??DataTable1
   \   000000D8   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   000000DC   0x3010             ADDS     R0,R0,#+16
   \   000000DE   0x.... 0x....      BL       memcpy
    140                  
    141                  
    142                  if( led_blinks[i].curr_task.ctrl == LED_TASK_CONTINUE)
   \   000000E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E4   0x2018             MOVS     R0,#+24
   \   000000E6   0x....             LDR.N    R1,??DataTable1
   \   000000E8   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000EC   0x7C00             LDRB     R0,[R0, #+16]
   \   000000EE   0x2804             CMP      R0,#+4
   \   000000F0   0xD11D             BNE.N    ??led_task_process_6
    143                  {
    144                    led_blinks[i].idx = 1;
   \   000000F2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F4   0x2018             MOVS     R0,#+24
   \   000000F6   0x....             LDR.N    R1,??DataTable1
   \   000000F8   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x7301             STRB     R1,[R0, #+12]
    145                    
    146                    memcpy(&led_blinks[i].curr_task,led_blinks[i].task+led_blinks[i].idx,sizeof(led_task_t));
   \   00000100   0x2208             MOVS     R2,#+8
   \   00000102   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000104   0x2018             MOVS     R0,#+24
   \   00000106   0x....             LDR.N    R1,??DataTable1
   \   00000108   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000010C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000010E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000110   0x2118             MOVS     R1,#+24
   \   00000112   0x....             LDR.N    R3,??DataTable1
   \   00000114   0xFB01 0x3104      MLA      R1,R1,R4,R3
   \   00000118   0x6889             LDR      R1,[R1, #+8]
   \   0000011A   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   0000011E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000120   0x2018             MOVS     R0,#+24
   \   00000122   0x....             LDR.N    R3,??DataTable1
   \   00000124   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   00000128   0x3010             ADDS     R0,R0,#+16
   \   0000012A   0x.... 0x....      BL       memcpy
    147                  }
    148                  
    149                  if( led_blinks[i].curr_task.ctrl == LED_TASK_ON)
   \                     ??led_task_process_6:
   \   0000012E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000130   0x2018             MOVS     R0,#+24
   \   00000132   0x....             LDR.N    R1,??DataTable1
   \   00000134   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000138   0x7C00             LDRB     R0,[R0, #+16]
   \   0000013A   0x2801             CMP      R0,#+1
   \   0000013C   0xD10E             BNE.N    ??led_task_process_7
    150                  {
    151                    GPIO_OutputValue(led_blinks[i].port ,led_blinks[i].pin , 1 );
   \   0000013E   0x2201             MOVS     R2,#+1
   \   00000140   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000142   0x2018             MOVS     R0,#+24
   \   00000144   0x....             LDR.N    R1,??DataTable1
   \   00000146   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   0000014A   0x6841             LDR      R1,[R0, #+4]
   \   0000014C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014E   0x2018             MOVS     R0,#+24
   \   00000150   0x....             LDR.N    R3,??DataTable1
   \   00000152   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   00000156   0x7800             LDRB     R0,[R0, #+0]
   \   00000158   0x.... 0x....      BL       GPIO_OutputValue
    152                  }
    153                  
    154                  if( led_blinks[i].curr_task.ctrl == LED_TASK_OFF)
   \                     ??led_task_process_7:
   \   0000015C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000015E   0x2018             MOVS     R0,#+24
   \   00000160   0x....             LDR.N    R1,??DataTable1
   \   00000162   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000166   0x7C00             LDRB     R0,[R0, #+16]
   \   00000168   0x2802             CMP      R0,#+2
   \   0000016A   0xD10E             BNE.N    ??led_task_process_8
    155                  {
    156                    GPIO_OutputValue(led_blinks[i].port ,led_blinks[i].pin , 0 );
   \   0000016C   0x2200             MOVS     R2,#+0
   \   0000016E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000170   0x2018             MOVS     R0,#+24
   \   00000172   0x....             LDR.N    R1,??DataTable1
   \   00000174   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000178   0x6841             LDR      R1,[R0, #+4]
   \   0000017A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017C   0x2018             MOVS     R0,#+24
   \   0000017E   0x....             LDR.N    R3,??DataTable1
   \   00000180   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   00000184   0x7800             LDRB     R0,[R0, #+0]
   \   00000186   0x.... 0x....      BL       GPIO_OutputValue
    157                  }
    158                  
    159                  if( led_blinks[i].curr_task.ctrl == LED_TASK_TOGGLE)
   \                     ??led_task_process_8:
   \   0000018A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000018C   0x2018             MOVS     R0,#+24
   \   0000018E   0x....             LDR.N    R1,??DataTable1
   \   00000190   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000194   0x7C00             LDRB     R0,[R0, #+16]
   \   00000196   0x2803             CMP      R0,#+3
   \   00000198   0xD12E             BNE.N    ??led_task_process_5
    160                  {
    161                    if( GPIO_ReadValue(led_blinks[i].port) & led_blinks[i].pin )
   \   0000019A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000019C   0x2018             MOVS     R0,#+24
   \   0000019E   0x....             LDR.N    R1,??DataTable1
   \   000001A0   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000001A4   0x7800             LDRB     R0,[R0, #+0]
   \   000001A6   0x.... 0x....      BL       GPIO_ReadValue
   \   000001AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001AC   0x2118             MOVS     R1,#+24
   \   000001AE   0x....             LDR.N    R2,??DataTable1
   \   000001B0   0xFB01 0x2104      MLA      R1,R1,R4,R2
   \   000001B4   0x6849             LDR      R1,[R1, #+4]
   \   000001B6   0x4208             TST      R0,R1
   \   000001B8   0xD00F             BEQ.N    ??led_task_process_9
    162                    {
    163                      GPIO_OutputValue(led_blinks[i].port ,led_blinks[i].pin , 0 );
   \   000001BA   0x2200             MOVS     R2,#+0
   \   000001BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001BE   0x2018             MOVS     R0,#+24
   \   000001C0   0x....             LDR.N    R1,??DataTable1
   \   000001C2   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000001C6   0x6841             LDR      R1,[R0, #+4]
   \   000001C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001CA   0x2018             MOVS     R0,#+24
   \   000001CC   0x....             LDR.N    R3,??DataTable1
   \   000001CE   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   000001D2   0x7800             LDRB     R0,[R0, #+0]
   \   000001D4   0x.... 0x....      BL       GPIO_OutputValue
   \   000001D8   0xE00E             B.N      ??led_task_process_5
    164                    }
    165                    else
    166                    {
    167                      GPIO_OutputValue(led_blinks[i].port ,led_blinks[i].pin , 1 );
   \                     ??led_task_process_9:
   \   000001DA   0x2201             MOVS     R2,#+1
   \   000001DC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001DE   0x2018             MOVS     R0,#+24
   \   000001E0   0x....             LDR.N    R1,??DataTable1
   \   000001E2   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   000001E6   0x6841             LDR      R1,[R0, #+4]
   \   000001E8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001EA   0x2018             MOVS     R0,#+24
   \   000001EC   0x....             LDR.N    R3,??DataTable1
   \   000001EE   0xFB00 0x3004      MLA      R0,R0,R4,R3
   \   000001F2   0x7800             LDRB     R0,[R0, #+0]
   \   000001F4   0x.... 0x....      BL       GPIO_OutputValue
    168                    }
    169                  }
    170                  
    171                  
    172                }
    173              }
    174              
    175            }
   \                     ??led_task_process_5:
   \   000001F8   0x1C64             ADDS     R4,R4,#+1
   \   000001FA   0xE704             B.N      ??led_task_process_0
    176          }
   \                     ??led_task_process_1:
   \   000001FC   0xBD10             POP      {R4,PC}          ;; return
    177          

   \                                 In section .rodata, align 4
    178          const led_task_t task_power[] =
   \                     task_power:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000000         DC32 0
   \   00000010   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
    179          {
    180            {LED_TASK_START,0             },
    181            {LED_TASK_ON,0                },
    182            {LED_TASK_STOP, 0             },
    183            
    184          };
    185          

   \                                 In section .rodata, align 4
    186          const   led_task_t task_bd[] =
   \                     task_bd:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000258         DC32 600
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
   \   00000018   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00000000         DC32 0
    187          {
    188            {LED_TASK_START,0             },
    189            {LED_TASK_ON  , 600           },
    190            {LED_TASK_OFF, 0              },
    191            {LED_TASK_STOP, 0             },
    192            
    193          };
    194          

   \                                 In section .rodata, align 4
    195          const   led_task_t task_gprs_check[] =
   \                     task_gprs_check:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000258         DC32 600
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
   \   00000018   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00000000         DC32 0
    196          {//上电自检
    197            {LED_TASK_START,0             },
    198            {LED_TASK_ON  , 600           },
    199            {LED_TASK_OFF,  0             },
    200            {LED_TASK_STOP, 0             },
    201            
    202          };
    203          

   \                                 In section .rodata, align 4
    204          const   led_task_t task_gprs_working[] =
   \                     task_gprs_working:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x000003E8         DC32 1000
   \   00000010   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
    205          {
    206            {LED_TASK_START,0             },
    207            {LED_TASK_ON  , 1000          },
    208            //{LED_TASK_OFF , 0             },
    209            {LED_TASK_STOP, 0             },
    210            
    211          };
    212          

   \                                 In section .rodata, align 4
    213          const   led_task_t task_gprs_sleep[] =
   \                     task_gprs_sleep:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x000003E8         DC32 1000
   \   00000010   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
    214          {
    215            {LED_TASK_START,0             },
    216            {LED_TASK_OFF  , 1000         },
    217            {LED_TASK_STOP, 0             },
    218            
    219          };
    220          

   \                                 In section .rodata, align 4
    221          const   led_task_t task_sensor[] =
   \                     task_sensor:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000258         DC32 600
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
   \   00000018   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00000000         DC32 0
    222          {
    223            {LED_TASK_START,0             },
    224            {LED_TASK_ON  , 600           },
    225            {LED_TASK_OFF , 0             }, 
    226            {LED_TASK_STOP, 0             },
    227            
    228          };
    229          

   \                                 In section .rodata, align 4
    230          const   led_task_t task_data1[] =
   \                     task_data1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x000001F4         DC32 500
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
   \   00000018   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00000000         DC32 0
    231          {
    232            {LED_TASK_START,0             },
    233            {LED_TASK_ON  , 500           },
    234            {LED_TASK_OFF , 0             },
    235            {LED_TASK_STOP, 0             },
    236            
    237          };
    238          
    239          

   \                                 In section .rodata, align 4
    240          const   led_task_t task_data2[] =
   \                     task_data2:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x000001F4         DC32 500
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0
   \   00000018   0x05 0x00          DC8 5, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00000000         DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     led_blinks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     TaskGo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     g_RtuStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     led_blinks+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     task_gprs_working

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     led_blinks+0x40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     task_gprs_sleep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     led_blinks+0x58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     led_blinks+0x70
    241          {
    242            {LED_TASK_START,0             },
    243            {LED_TASK_ON  , 500           },
    244            {LED_TASK_OFF , 0             },
    245            {LED_TASK_STOP, 0             },
    246            
    247          };

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   App_Task_LedKey
        16   -> Board_LED_Init
        16   -> OSTimeDlyHMSM
        16   -> led_task_process
        16   -> memcpy
       8   led_task_process
         8   -> GPIO_OutputValue
         8   -> GPIO_ReadValue
         8   -> memcpy
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
     278  App_Task_LedKey
     144  led_blinks
     510  led_task_process
      22  memcpy
      32  task_bd
      32  task_data1
      32  task_data2
      32  task_gprs_check
      24  task_gprs_sleep
      24  task_gprs_working
      24  task_power
      32  task_sensor

 
 144 bytes in section .data
 232 bytes in section .rodata
 846 bytes in section .text
 
 824 bytes of CODE  memory (+ 22 bytes shared)
 232 bytes of CONST memory
 144 bytes of DATA  memory

Errors: none
Warnings: 1
