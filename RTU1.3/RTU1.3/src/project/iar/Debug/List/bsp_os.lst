###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      20/Mar/2017  17:17:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\bsp\OS-v2\bsp_os.c              #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\bsp\OS-v2\bsp_os.c -lCN         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\bsp_os.l #
#                    st                                                       #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\bsp_os.o  #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\bsp\OS-v2\bsp_os.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICIRUM BOARD SUPPORT PACKAGE
      4          *
      5          *                          (c) Copyright 2003-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          
     15          /*
     16          *********************************************************************************************************
     17          **
     18          *                                       MICIUM BOARD SUPPORT PACKAGE
     19          *                                                OS LAYER
     20          *
     21          * Filename      : bsp_os.c
     22          * Version       : V1.00
     23          * Programmer(s) : FT
     24          *********************************************************************************************************
     25          */
     26          
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                             INCLUDE FILES
     31          *********************************************************************************************************
     32          */
     33          
     34          #define  BSP_OS_MODULE
     35          #include <bsp.h>
     36          
     37          /*
     38          *********************************************************************************************************
     39          *                                            LOCAL DEFINES
     40          *********************************************************************************************************
     41          */
     42          
     43          #define  BSP_REG_DEMCR             (*(CPU_REG32 *)0xE000EDFC)
     44          #define  BSP_REG_DWT_CR            (*(CPU_REG32 *)0xE0001000)
     45          #define  BSP_REG_DWT_CYCCNT        (*(CPU_REG32 *)0xE0001004)
     46          
     47          
     48          /*
     49          *********************************************************************************************************
     50          *                                           LOCAL CONSTANTS
     51          *********************************************************************************************************
     52          */
     53          
     54          
     55          /*
     56          *********************************************************************************************************
     57          *                                          LOCAL DATA TYPES
     58          *********************************************************************************************************
     59          */
     60          
     61          
     62          /*
     63          *********************************************************************************************************
     64          *                                            LOCAL TABLES
     65          *********************************************************************************************************
     66          */
     67          
     68          
     69          /*
     70          *********************************************************************************************************
     71          *                                       LOCAL GLOBAL VARIABLES
     72          *********************************************************************************************************
     73          */
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                      LOCAL FUNCTION PROTOTYPES
     78          *********************************************************************************************************
     79          */
     80          
     81          /*
     82          *********************************************************************************************************
     83          *                                     LOCAL CONFIGURATION ERRORS
     84          *********************************************************************************************************
     85          */
     86          
     87          
     88          /*
     89          *********************************************************************************************************
     90          *********************************************************************************************************
     91          **                                          GLOBAL FUNCTIONS
     92          *********************************************************************************************************
     93          *********************************************************************************************************
     94          */
     95          
     96          
     97          
     98          /*
     99          *********************************************************************************************************
    100          *********************************************************************************************************
    101          **                                     BSP OS LOCKS FUNCTIONS
    102          *********************************************************************************************************
    103          *********************************************************************************************************
    104          */
    105          
    106          
    107          /*
    108          *********************************************************************************************************
    109          *                                      BSP_OS_SemCreate()
    110          *
    111          * Description : Creates a sempahore.
    112          *
    113          * Argument(s) : p_sem        Pointer to a BSP_OS_SEM structure
    114          *  
    115          *               sem_val      Initial value of the semaphore.  
    116          *
    117          *               p_name       Pointer to an ASCII string with the semaphore name.
    118          *
    119          * Return(s)   : DEF_OK    if the sempahore was created correctly
    120          *               DEF_FAIL  otherwise
    121          *     
    122          * Caller(s)   : Application.
    123          *
    124          * Note(s)     : none.
    125          *
    126          *********************************************************************************************************
    127          */
    128          

   \                                 In section .text, align 2, keep-with-next
    129          CPU_BOOLEAN  BSP_OS_SemCreate (BSP_OS_SEM       *p_sem,
    130                                         BSP_OS_SEM_VAL    sem_val,
    131                                         CPU_CHAR         *p_name)
    132          {
   \                     BSP_OS_SemCreate:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    133              OS_EVENT    *p_event;
    134          #if (OS_EVENT_NAME_EN > 0)
    135              CPU_INT08U   os_err;
    136          #endif
    137          
    138              p_event = OSSemCreate(sem_val);
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x.... 0x....      BL       OSSemCreate
   \   00000010   0x0007             MOVS     R7,R0
    139          
    140              if (p_event == (OS_EVENT *)0) {
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD101             BNE.N    ??BSP_OS_SemCreate_0
    141                   return (DEF_FAIL);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE00C             B.N      ??BSP_OS_SemCreate_1
    142              }
    143              
    144              *p_sem = (BSP_OS_SEM)(p_event);
   \                     ??BSP_OS_SemCreate_0:
   \   0000001A   0x6027             STR      R7,[R4, #+0]
    145          
    146          #if (OS_EVENT_NAME_EN > 0)
    147              OSEventNameSet((OS_EVENT * )p_event, 
    148                             (INT8U     *)p_name, 
    149                             (INT8U     *)&os_err);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x0031             MOVS     R1,R6
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0x.... 0x....      BL       OSEventNameSet
    150              
    151              if (os_err != OS_ERR_NONE) {
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??BSP_OS_SemCreate_2
    152                   return (DEF_FAIL);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE000             B.N      ??BSP_OS_SemCreate_1
    153              }
    154          #endif
    155              
    156              return (DEF_OK);    
   \                     ??BSP_OS_SemCreate_2:
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??BSP_OS_SemCreate_1:
   \   00000034   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    157          }
    158          
    159          
    160          /*
    161          *********************************************************************************************************
    162          *                                     BSP_OS_SemWait()
    163          *
    164          * Description : Wait on a semaphore to become available
    165          *
    166          * Argument(s) : sem          sempahore handler
    167          *  
    168          *               dly_ms       delay in miliseconds to wait on the semaphore
    169          *
    170          *               p_err        Pointer to the error code.
    171          *                                BSP_ERR_NONE            No errors
    172          *                                BSP_ERR_OS_SEM_TIMEOUT  The semaphore was not acquire in the specified timeout
    173          *                                BSP_ERR_OS_SEM_INT      Internal semaphore error.     
    174          *                            
    175          *
    176          * Return(s)   : none.
    177          *               
    178          *     
    179          * Caller(s)   : Application.
    180          *
    181          * Note(s)     : none.
    182          *
    183          *********************************************************************************************************
    184          */
    185          

   \                                 In section .text, align 2, keep-with-next
    186          CPU_BOOLEAN  BSP_OS_SemWait (BSP_OS_SEM  *p_sem,
    187                                       CPU_INT32U   dly_ms)
    188                              
    189          {
   \                     BSP_OS_SemWait:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    190              CPU_INT08U   os_err;
    191              CPU_INT32U   dly_ticks;
    192              CPU_BOOLEAN  err;
    193              
    194              
    195              dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OS_TICKS_PER_SEC);
   \   00000006   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000A   0xFB00 0xF005      MUL      R0,R0,R5
   \   0000000E   0x21C8             MOVS     R1,#+200
   \   00000010   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000014   0x0006             MOVS     R6,R0
    196              
    197              OSSemPend((OS_EVENT   *)*p_sem,
    198                        (CPU_INT32U  ) dly_ticks,
    199                        (CPU_INT08U *)&os_err);
   \   00000016   0xAA00             ADD      R2,SP,#+0
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x.... 0x....      BL       OSSemPend
    200          
    201              switch (os_err) {
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD00A             BEQ.N    ??BSP_OS_SemWait_0
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD90A             BLS.N    ??BSP_OS_SemWait_1
   \   0000002E   0x1EC0             SUBS     R0,R0,#+3
   \   00000030   0xD008             BEQ.N    ??BSP_OS_SemWait_1
   \   00000032   0x1F80             SUBS     R0,R0,#+6
   \   00000034   0xD006             BEQ.N    ??BSP_OS_SemWait_1
   \   00000036   0x1EC0             SUBS     R0,R0,#+3
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD903             BLS.N    ??BSP_OS_SemWait_1
   \   0000003C   0xE005             B.N      ??BSP_OS_SemWait_2
    202                  case OS_ERR_NONE:
    203                       err = DEF_OK;
   \                     ??BSP_OS_SemWait_0:
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x0007             MOVS     R7,R0
    204                       break;
   \   00000042   0xE004             B.N      ??BSP_OS_SemWait_3
    205                       
    206                  case OS_ERR_TIMEOUT:
    207                  case OS_ERR_PEND_ABORT:
    208                  case OS_ERR_EVENT_TYPE:
    209                  case OS_ERR_PEND_ISR:
    210                  case OS_ERR_PEVENT_NULL:
    211                  case OS_ERR_PEND_LOCKED:
    212                        err = DEF_FAIL;
   \                     ??BSP_OS_SemWait_1:
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x0007             MOVS     R7,R0
    213                        break;
   \   00000048   0xE001             B.N      ??BSP_OS_SemWait_3
    214          
    215                  default:
    216                        err = DEF_FAIL;
   \                     ??BSP_OS_SemWait_2:
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x0007             MOVS     R7,R0
    217                        break;
    218              }
    219              
    220              return (err);
   \                     ??BSP_OS_SemWait_3:
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    221          
    222          }
    223          
    224          /*
    225          *********************************************************************************************************
    226          *                                      BSP_OS_SemCreate()
    227          *
    228          * Description : Post a semaphore
    229          *
    230          * Argument(s) : sem          Semaphore handler
    231          *  
    232          *               dly_ms       delay in miliseconds to wait on the semaphore
    233          *
    234          * Return(s)   : error code return     DEF_FALSE     if the semaphore was created.
    235          *                                     DEF_TRUE      if the sempahore could be created.
    236          *     
    237          * Caller(s)   : Application.
    238          *
    239          * Note(s)     : none.
    240          *
    241          *********************************************************************************************************
    242          */
    243          

   \                                 In section .text, align 2, keep-with-next
    244          CPU_BOOLEAN  BSP_OS_SemPost (BSP_OS_SEM  *p_sem)
    245                                
    246          {
   \                     BSP_OS_SemPost:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    247              CPU_INT08U   os_err;
    248              CPU_BOOLEAN  err;
    249                  
    250              
    251              os_err = OSSemPost((OS_EVENT *)*p_sem);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       OSSemPost
   \   0000000A   0x0005             MOVS     R5,R0
    252          
    253              switch (os_err) {
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD006             BEQ.N    ??BSP_OS_SemPost_0
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD007             BEQ.N    ??BSP_OS_SemPost_1
   \   00000018   0x2804             CMP      R0,#+4
   \   0000001A   0xD005             BEQ.N    ??BSP_OS_SemPost_1
   \   0000001C   0x2832             CMP      R0,#+50
   \   0000001E   0xD003             BEQ.N    ??BSP_OS_SemPost_1
   \   00000020   0xE004             B.N      ??BSP_OS_SemPost_2
    254                  case OS_ERR_NONE:
    255                       err = DEF_OK;
   \                     ??BSP_OS_SemPost_0:
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x0006             MOVS     R6,R0
    256                       break;
   \   00000026   0xE001             B.N      ??BSP_OS_SemPost_2
    257                       
    258                  case OS_ERR_SEM_OVF:
    259                  case OS_ERR_EVENT_TYPE:
    260                  case OS_ERR_PEVENT_NULL:
    261                        err = DEF_FAIL;
   \                     ??BSP_OS_SemPost_1:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0006             MOVS     R6,R0
    262                        break;
    263              }
    264              
    265              return (err);
   \                     ??BSP_OS_SemPost_2:
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
    266          }
    267          
    268          
    269          
    270          /*
    271          *********************************************************************************************************
    272          *********************************************************************************************************
    273          **                                     uC/OS-II TIMER FUNCTIONS
    274          *********************************************************************************************************
    275          *********************************************************************************************************
    276          */
    277          
    278          /*
    279          *********************************************************************************************************
    280          *                                      BSP_OS_TmrTickInit()
    281          *
    282          * Description : Initialize uC/OS-II's tick source;
    283          *
    284          * Argument(s) : The tick rate in Hz
    285          *
    286          * Return(s)   : none.
    287          *
    288          * Caller(s)   : Application.
    289          *
    290          * Note(s)     : none.
    291          *********************************************************************************************************
    292          */
    293          /*
    294          void   BSP_OS_TmrTickInit (CPU_INT32U  tick_rate)
    295          {
    296              CPU_INT32U  cnts;
    297              CPU_INT32U  cpu_freq;
    298          
    299              
    300              cpu_freq = BSP_PM_CPU_FreqGet();
    301              cnts     = (cpu_freq / tick_rate);
    302          
    303              OS_CPU_SysTickInit(cnts);
    304          }
    305          */
    306          
    307          /*
    308          *********************************************************************************************************
    309          *********************************************************************************************************
    310          *                             uC/Probe PLUG-IN FOR uC/OS-II FUNCTIONS
    311          *********************************************************************************************************
    312          *********************************************************************************************************
    313          */
    314          
    315          /*
    316          ******************************************************************************************************************************
    317          ******************************************************************************************************************************
    318          *                                  uC/Probe Plug-In for uC/OS-II Functions
    319          ******************************************************************************************************************************
    320          ******************************************************************************************************************************
    321          */
    322          
    323          /*
    324          *********************************************************************************************************
    325          *                                   OSProbe_TmrInit()
    326          *
    327          * Description : This function is called to by uC/Probe Plug-In for uC/OS-II to initialize the
    328          *               free running timer that is used to make time measurements.
    329          *
    330          * Argument(s) : none
    331          *
    332          * Return(s)   : none
    333          *
    334          * Caller(s)   : OSProbe_Init()
    335          *
    336          * Note(s)     : none.
    337          *********************************************************************************************************
    338          */
    339          
    340          #if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && \
    341              (OS_PROBE_HOOKS_EN          == 1)
    342          void  OSProbe_TmrInit (void)
    343          {
    344              BSP_REG_DEMCR  |= DEF_BIT_24;
    345              BSP_REG_DWT_CR |= DEF_BIT_00;   
    346          }
    347          #endif
    348          
    349          
    350          /*
    351          *********************************************************************************************************
    352          *                                        OSProbe_TmrRd()
    353          *
    354          * Description : This function is called to read the current counts of a 32 bit free running timer.
    355          *
    356          * Argument(s) : none
    357          *
    358          * Return(s)   : The 16 or 32 bit count of the timer assuming the timer is an UP counter.
    359          *
    360          * Caller(s)   : OSProbe_TimeGetCycles()
    361          *
    362          * Note(s)     : None.
    363          *********************************************************************************************************
    364          */
    365          
    366          #if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && \
    367              (OS_PROBE_HOOKS_EN          == 1)
    368          CPU_INT32U  OSProbe_TmrRd (void)
    369          {
    370              return  ((CPU_INT32U)BSP_REG_DWT_CYCCNT);
    371          
    372          }
    373          #endif
    374          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   BSP_OS_SemCreate
        24   -> OSEventNameSet
        24   -> OSSemCreate
      16   BSP_OS_SemPost
        16   -> OSSemPost
      24   BSP_OS_SemWait
        24   -> OSSemPend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      54  BSP_OS_SemCreate
      50  BSP_OS_SemPost
      84  BSP_OS_SemWait

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
