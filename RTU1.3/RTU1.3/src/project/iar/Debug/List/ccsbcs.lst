###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:37 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\FatFs\ccs #
#                    bcs.c                                                    #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\FatFs\ccs #
#                    bcs.c -lCN D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1. #
#                    2\project\iar\Debug\List\ -o                             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\ --no_cse --no_unroll --no_inline           #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ccsbcs.lst                                 #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\ccsbcs.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\FatFs\ccsbcs.c
      1          /*------------------------------------------------------------------------*/
      2          /* Unicode - Local code bidirectional converter  (C)ChaN, 2009            */
      3          /* (SBCS code pages)                                                      */
      4          /*------------------------------------------------------------------------*/
      5          /*  437   U.S. (OEM)
      6          /   720   Arabic (OEM)
      7          /   1256  Arabic (Windows)
      8          /   737   Greek (OEM)
      9          /   1253  Greek (Windows)
     10          /   1250  Central Europe (Windows)
     11          /   775   Baltic (OEM)
     12          /   1257  Baltic (Windows)
     13          /   850   Multilingual Latin 1 (OEM)
     14          /   852   Latin 2 (OEM)
     15          /   1252  Latin 1 (Windows)
     16          /   855   Cyrillic (OEM)
     17          /   1251  Cyrillic (Windows)
     18          /   866   Russian (OEM)
     19          /   857   Turkish (OEM)
     20          /   1254  Turkish (Windows)
     21          /   858   Multilingual Latin 1 + Euro (OEM)
     22          /   862   Hebrew (OEM)
     23          /   1255  Hebrew (Windows)
     24          /   874   Thai (OEM, Windows)
     25          /   1258  Vietnam (OEM, Windows)
     26          */
     27          
     28          #include "ff.h"
     29          
     30          
     31          #if _CODE_PAGE == 437
     32          #define _TBLDEF 1
     33          static

   \                                 In section .rodata, align 4
     34          const WCHAR Tbl[] = {	/*  CP437(0x80-0xFF) to Unicode conversion table */
   \                     Tbl:
   \   00000000   0x00C7 0x00FC      DC16 199, 252, 233, 226, 228, 224, 229, 231, 234, 235, 232, 239, 238
   \              0x00E9 0x00E2
   \              0x00E4 0x00E0
   \              0x00E5 0x00E7
   \              0x00EA 0x00EB
   \              0x00E8 0x00EF
   \              0x00EE       
   \   0000001A   0x00EC 0x00C4      DC16 236, 196, 197, 201, 230, 198, 244, 246, 242, 251, 249, 255, 214
   \              0x00C5 0x00C9
   \              0x00E6 0x00C6
   \              0x00F4 0x00F6
   \              0x00F2 0x00FB
   \              0x00F9 0x00FF
   \              0x00D6       
   \   00000034   0x00DC 0x00A2      DC16 220, 162, 163, 165, 8359, 402, 225, 237, 243, 250, 241, 209, 170
   \              0x00A3 0x00A5
   \              0x20A7 0x0192
   \              0x00E1 0x00ED
   \              0x00F3 0x00FA
   \              0x00F1 0x00D1
   \              0x00AA       
   \   0000004E   0x00BA 0x00BF      DC16 186, 191, 8976, 172, 189, 188, 161, 171, 187, 9617, 9618, 9619
   \              0x2310 0x00AC
   \              0x00BD 0x00BC
   \              0x00A1 0x00AB
   \              0x00BB 0x2591
   \              0x2592 0x2593
   \   00000066   0x2502 0x2524      DC16 9474, 9508, 9569, 9570, 9558, 9557, 9571, 9553, 9559, 9565, 9564
   \              0x2561 0x2562
   \              0x2556 0x2555
   \              0x2563 0x2551
   \              0x2557 0x255D
   \              0x255C       
   \   0000007C   0x255B 0x2510      DC16 9563, 9488, 9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567, 9562
   \              0x2514 0x2534
   \              0x252C 0x251C
   \              0x2500 0x253C
   \              0x255E 0x255F
   \              0x255A       
   \   00000092   0x2554 0x2569      DC16 9556, 9577, 9574, 9568, 9552, 9580, 9575, 9576, 9572, 9573, 9561
   \              0x2566 0x2560
   \              0x2550 0x256C
   \              0x2567 0x2568
   \              0x2564 0x2565
   \              0x2559       
   \   000000A8   0x2558 0x2552      DC16 9560, 9554, 9555, 9579, 9578, 9496, 9484, 9608, 9604, 9612, 9616
   \              0x2553 0x256B
   \              0x256A 0x2518
   \              0x250C 0x2588
   \              0x2584 0x258C
   \              0x2590       
   \   000000BE   0x2580 0x03B1      DC16 9600, 945, 223, 915, 960, 931, 963, 181, 964, 934, 920, 937, 948
   \              0x00DF 0x0393
   \              0x03C0 0x03A3
   \              0x03C3 0x00B5
   \              0x03C4 0x03A6
   \              0x0398 0x03A9
   \              0x03B4       
   \   000000D8   0x221E 0x03C6      DC16 8734, 966, 949, 8745, 8801, 177, 8805, 8804, 8992, 8993, 247, 8776
   \              0x03B5 0x2229
   \              0x2261 0x00B1
   \              0x2265 0x2264
   \              0x2320 0x2321
   \              0x00F7 0x2248
   \   000000F0   0x00B0 0x2219      DC16 176, 8729, 183, 8730, 8319, 178, 9632, 160
   \              0x00B7 0x221A
   \              0x207F 0x00B2
   \              0x25A0 0x00A0
     35          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
     36          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
     37          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
     38          	0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
     39          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
     40          	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
     41          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     42          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     43          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     44          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     45          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     46          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     47          	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
     48          	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
     49          	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
     50          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     51          };
     52          
     53          #elif _CODE_PAGE == 720
     54          #define _TBLDEF 1
     55          static
     56          const WCHAR Tbl[] = {	/*  CP720(0x80-0xFF) to Unicode conversion table */
     57          	0x0000, 0x0000, 0x00E9, 0x00E2, 0x0000, 0x00E0, 0x0000, 0x00E7,
     58          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0000, 0x0000, 0x0000,
     59          	0x0000, 0x0651, 0x0652, 0x00F4, 0x00A4, 0x0640, 0x00FB, 0x00F9,
     60          	0x0621, 0x0622, 0x0623, 0x0624, 0x00A3, 0x0625, 0x0626, 0x0627,
     61          	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
     62          	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x00AB, 0x00BB,
     63          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     64          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     65          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     66          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     67          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     68          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     69          	0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0641, 0x00B5, 0x0642,
     70          	0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A,
     71          	0x2261, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0xO650, 0x2248,
     72          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     73          };
     74          
     75          #elif _CODE_PAGE == 737
     76          #define _TBLDEF 1
     77          static
     78          const WCHAR Tbl[] = {	/*  CP737(0x80-0xFF) to Unicode conversion table */
     79          	0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398,
     80          	0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0,
     81          	0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9,
     82          	0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8,
     83          	0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0,
     84          	0x03C1, 0x03C3, 0x03C2, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8,
     85          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     86          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     87          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     88          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     89          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     90          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     91          	0x03C9, 0x03AC, 0x03AD, 0x03AE, 0x03CA, 0x03AF, 0x03CC, 0x03CD,
     92          	0x03CB, 0x03CE, 0x0386, 0x0388, 0x0389, 0x038A, 0x038C, 0x038E,
     93          	0x038F, 0x00B1, 0x2265, 0x2264, 0x03AA, 0x03AB, 0x00F7, 0x2248,
     94          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     95          };
     96          
     97          #elif _CODE_PAGE == 775
     98          #define _TBLDEF 1
     99          static
    100          const WCHAR Tbl[] = {	/*  CP775(0x80-0xFF) to Unicode conversion table */
    101          	0x0106, 0x00FC, 0x00E9, 0x0101, 0x00E4, 0x0123, 0x00E5, 0x0107,
    102          	0x0142, 0x0113, 0x0156, 0x0157, 0x012B, 0x0179, 0x00C4, 0x00C5,
    103          	0x00C9, 0x00E6, 0x00C6, 0x014D, 0x00F6, 0x0122, 0x00A2, 0x015A,
    104          	0x015B, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x00A4,
    105          	0x0100, 0x012A, 0x00F3, 0x017B, 0x017C, 0x017A, 0x201D, 0x00A6,
    106          	0x00A9, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x0141, 0x00AB, 0x00BB,
    107          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0104, 0x010C, 0x0118,
    108          	0x0116, 0x2563, 0x2551, 0x2557, 0x255D, 0x012E, 0x0160, 0x2510,
    109          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0172, 0x016A,
    110          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x017D,
    111          	0x0105, 0x010D, 0x0119, 0x0117, 0x012F, 0x0161, 0x0173, 0x016B,
    112          	0x017E, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    113          	0x00D3, 0x00DF, 0x014C, 0x0143, 0x00F5, 0x00D5, 0x00B5, 0x0144,
    114          	0x0136, 0x0137, 0x013B, 0x013C, 0x0146, 0x0112, 0x0145, 0x2019,
    115          	0x00AD, 0x00B1, 0x201C, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x201E,
    116          	0x00B0, 0x2219, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    117          };
    118          
    119          #elif _CODE_PAGE == 850
    120          #define _TBLDEF 1
    121          static
    122          const WCHAR Tbl[] = {	/*  CP850(0x80-0xFF) to Unicode conversion table */
    123          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    124          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
    125          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    126          	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
    127          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    128          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    129          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    130          	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
    131          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    132          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    133          	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE,
    134          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
    135          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
    136          	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
    137          	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    138          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    139          };
    140          
    141          #elif _CODE_PAGE == 852
    142          #define _TBLDEF 1
    143          static
    144          const WCHAR Tbl[] = {	/*  CP852(0x80-0xFF) to Unicode conversion table */
    145          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x016F, 0x0107, 0x00E7,
    146          	0x0142, 0x00EB, 0x0150, 0x0151, 0x00EE, 0x0179, 0x00C4, 0x0106,
    147          	0x00C9, 0x0139, 0x013A, 0x00F4, 0x00F6, 0x013D, 0x013E, 0x015A,
    148          	0x015B, 0x00D6, 0x00DC, 0x0164, 0x0165, 0x0141, 0x00D7, 0x010D,
    149          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0104, 0x0105, 0x017D, 0x017E,
    150          	0x0118, 0x0119, 0x00AC, 0x017A, 0x010C, 0x015F, 0x00AB, 0x00BB,
    151          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x011A,
    152          	0x015E, 0x2563, 0x2551, 0x2557, 0x255D, 0x017B, 0x017C, 0x2510,
    153          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0102, 0x0103,
    154          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    155          	0x0111, 0x0110, 0x010E, 0x00CB, 0x010F, 0x0147, 0x00CD, 0x00CE,
    156          	0x011B, 0x2518, 0x250C, 0x2588, 0x2584, 0x0162, 0x016E, 0x2580,
    157          	0x00D3, 0x00DF, 0x00D4, 0x0143, 0x0144, 0x0148, 0x0160, 0x0161,
    158          	0x0154, 0x00DA, 0x0155, 0x0170, 0x00FD, 0x00DD, 0x0163, 0x00B4,
    159          	0x00AD, 0x02DD, 0x02DB, 0x02C7, 0x02D8, 0x00A7, 0x00F7, 0x00B8,
    160          	0x00B0, 0x00A8, 0x02D9, 0x0171, 0x0158, 0x0159, 0x25A0, 0x00A0
    161          };
    162          
    163          #elif _CODE_PAGE == 855
    164          #define _TBLDEF 1
    165          static
    166          const WCHAR Tbl[] = {	/*  CP855(0x80-0xFF) to Unicode conversion table */
    167          	0x0452, 0x0402, 0x0453, 0x0403, 0x0451, 0x0401, 0x0454, 0x0404,
    168          	0x0455, 0x0405, 0x0456, 0x0406, 0x0457, 0x0407, 0x0458, 0x0408,
    169          	0x0459, 0x0409, 0x045A, 0x040A, 0x045B, 0x040B, 0x045C, 0x040C,
    170          	0x045E, 0x040E, 0x045F, 0x040F, 0x044E, 0x042E, 0x044A, 0x042A,
    171          	0x0430, 0x0410, 0x0431, 0x0411, 0x0446, 0x0426, 0x0434, 0x0414,
    172          	0x0435, 0x0415, 0x0444, 0x0424, 0x0433, 0x0413, 0x00AB, 0x00BB,
    173          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0445, 0x0425, 0x0438,
    174          	0x0418, 0x2563, 0x2551, 0x2557, 0x255D, 0x0439, 0x0419, 0x2510,
    175          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x043A, 0x041A,
    176          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    177          	0x043B, 0x041B, 0x043C, 0x041C, 0x043D, 0x041D, 0x043E, 0x041E,
    178          	0x043F, 0x2518, 0x250C, 0x2588, 0x2584, 0x041F, 0x044F, 0x2580,
    179          	0x042F, 0x0440, 0x0420, 0x0441, 0x0421, 0x0442, 0x0422, 0x0443,
    180          	0x0423, 0x0436, 0x0416, 0x0432, 0x0412, 0x044C, 0x042C, 0x2116,
    181          	0x00AD, 0x044B, 0x042B, 0x0437, 0x0417, 0x0448, 0x0428, 0x044D,
    182          	0x042D, 0x0449, 0x0429, 0x0447, 0x0427, 0x00A7, 0x25A0, 0x00A0
    183          };
    184          
    185          #elif _CODE_PAGE == 857
    186          #define _TBLDEF 1
    187          static
    188          const WCHAR Tbl[] = {	/*  CP857(0x80-0xFF) to Unicode conversion table */
    189          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    190          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0131, 0x00C4, 0x00C5,
    191          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    192          	0x0130, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x015E, 0x015F,
    193          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x011E, 0x011F,
    194          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    195          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    196          	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
    197          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    198          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    199          	0x00BA, 0x00AA, 0x00CA, 0x00CB, 0x00C8, 0x0000, 0x00CD, 0x00CE,
    200          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
    201          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x0000,
    202          	0x00D7, 0x00DA, 0x00DB, 0x00D9, 0x00EC, 0x00FF, 0x00AF, 0x00B4,
    203          	0x00AD, 0x00B1, 0x0000, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    204          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    205          };
    206          
    207          #elif _CODE_PAGE == 858
    208          #define _TBLDEF 1
    209          static
    210          const WCHAR Tbl[] = {	/*  CP858(0x80-0xFF) to Unicode conversion table */
    211          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    212          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
    213          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    214          	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
    215          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    216          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    217          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    218          	0x00A9, 0x2563, 0x2551, 0x2557, 0x2550, 0x00A2, 0x00A5, 0x2510,
    219          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    220          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    221          	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x20AC, 0x00CD, 0x00CE,
    222          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00C6, 0x00CC, 0x2580,
    223          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
    224          	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
    225          	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    226          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    227          };
    228          
    229          #elif _CODE_PAGE == 862
    230          #define _TBLDEF 1
    231          static
    232          const WCHAR Tbl[] = {	/*  CP862(0x80-0xFF) to Unicode conversion table */
    233          	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
    234          	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
    235          	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
    236          	0x05E8, 0x05E9, 0x05EA, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
    237          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    238          	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    239          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
    240          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
    241          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
    242          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
    243          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
    244          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    245          	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
    246          	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
    247          	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
    248          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
    249          };
    250          
    251          #elif _CODE_PAGE == 866
    252          #define _TBLDEF 1
    253          static
    254          const WCHAR Tbl[] = {	/*  CP866(0x80-0xFF) to Unicode conversion table */
    255          	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    256          	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    257          	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    258          	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    259          	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    260          	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    261          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
    262          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
    263          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
    264          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
    265          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
    266          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    267          	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    268          	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
    269          	0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E,
    270          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
    271          };
    272          
    273          #elif _CODE_PAGE == 874
    274          #define _TBLDEF 1
    275          static
    276          const WCHAR Tbl[] = {	/*  CP874(0x80-0xFF) to Unicode conversion table */
    277          	0x20AC, 0x0000, 0x0000, 0x0000, 0x0000, 0x2026, 0x0000, 0x0000,
    278          	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    279          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    280          	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    281          	0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
    282          	0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
    283          	0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
    284          	0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
    285          	0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
    286          	0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
    287          	0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
    288          	0x0E38, 0x0E39, 0x0E3A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0E3F,
    289          	0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
    290          	0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
    291          	0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
    292          	0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0x0000, 0x0000, 0x0000, 0x0000
    293          };
    294          
    295          #elif _CODE_PAGE == 1250
    296          #define _TBLDEF 1
    297          static
    298          const WCHAR Tbl[] = {	/*  CP1250(0x80-0xFF) to Unicode conversion table */
    299          	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
    300          	0x0000, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
    301          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    302          	0x0000, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
    303          	0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
    304          	0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
    305          	0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    306          	0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
    307          	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
    308          	0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
    309          	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
    310          	0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
    311          	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
    312          	0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
    313          	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
    314          	0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
    315          };
    316          
    317          #elif _CODE_PAGE == 1251
    318          #define _TBLDEF 1
    319          static
    320          const WCHAR Tbl[] = {	/*  CP1251(0x80-0xFF) to Unicode conversion table */
    321          	0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
    322          	0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
    323          	0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    324          	0x0000, 0x2111, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
    325          	0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
    326          	0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
    327          	0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
    328          	0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
    329          	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    330          	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    331          	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    332          	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    333          	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    334          	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    335          	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    336          	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
    337          };
    338          
    339          #elif _CODE_PAGE == 1252
    340          #define _TBLDEF 1
    341          static
    342          const WCHAR Tbl[] = {	/*  CP1252(0x80-0xFF) to Unicode conversion table */
    343          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    344          	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x017D, 0x0000,
    345          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    346          	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x017E, 0x0178,
    347          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    348          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    349          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    350          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    351          	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    352          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
    353          	0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
    354          	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
    355          	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    356          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
    357          	0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
    358          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
    359          };
    360          
    361          #elif _CODE_PAGE == 1253
    362          #define _TBLDEF 1
    363          static
    364          const WCHAR Tbl[] = {	/*  CP1253(0x80-0xFF) to Unicode conversion table */
    365          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    366          	0x0000, 0x2030, 0x0000, 0x2039, 0x000C, 0x0000, 0x0000, 0x0000,
    367          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    368          	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
    369          	0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    370          	0x00A8, 0x00A9, 0x0000, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
    371          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
    372          	0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
    373          	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
    374          	0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
    375          	0x03A0, 0x03A1, 0x0000, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
    376          	0x03A8, 0x03A9, 0x03AA, 0x03AD, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
    377          	0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
    378          	0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
    379          	0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
    380          	0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x0000
    381          };
    382          
    383          #elif _CODE_PAGE == 1254
    384          #define _TBLDEF 1
    385          static
    386          const WCHAR Tbl[] = {	/*  CP1254(0x80-0xFF) to Unicode conversion table */
    387          	0x20AC, 0x0000, 0x210A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    388          	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
    389          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    390          	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
    391          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    392          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    393          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    394          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    395          	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    396          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
    397          	0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
    398          	0x00D8, 0x00D9, 0x00DA, 0x00BD, 0x00DC, 0x0130, 0x015E, 0x00DF,
    399          	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    400          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
    401          	0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
    402          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
    403          };
    404          
    405          #elif _CODE_PAGE == 1255
    406          #define _TBLDEF 1
    407          static
    408          const WCHAR Tbl[] = {	/*  CP1255(0x80-0xFF) to Unicode conversion table */
    409          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    410          	0x02C6, 0x2030, 0x0000, 0x2039, 0x0000, 0x0000, 0x0000, 0x0000,
    411          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    412          	0x02DC, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
    413          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    414          	0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    415          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    416          	0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    417          	0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
    418          	0x05B8, 0x05B9, 0x0000, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
    419          	0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
    420          	0x05F4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    421          	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
    422          	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
    423          	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
    424          	0x05E8, 0x05E9, 0x05EA, 0x0000, 0x0000, 0x200E, 0x200F, 0x0000
    425          };
    426          
    427          #elif _CODE_PAGE == 1256
    428          #define _TBLDEF 1
    429          static
    430          const WCHAR Tbl[] = {	/*  CP1256(0x80-0xFF) to Unicode conversion table */
    431          	0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    432          	0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
    433          	0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    434          	0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
    435          	0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    436          	0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    437          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    438          	0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
    439          	0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
    440          	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
    441          	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
    442          	0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0640, 0x0642, 0x0643,
    443          	0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
    444          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
    445          	0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
    446          	0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
    447          }
    448          
    449          #elif _CODE_PAGE == 1257
    450          #define _TBLDEF 1
    451          static
    452          const WCHAR Tbl[] = {	/*  CP1257(0x80-0xFF) to Unicode conversion table */
    453          	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
    454          	0x0000, 0x2030, 0x0000, 0x2039, 0x0000, 0x00A8, 0x02C7, 0x00B8,
    455          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    456          	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x00AF, 0x02DB, 0x0000,
    457          	0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x0000, 0x00A6, 0x00A7,
    458          	0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    459          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    460          	0x00B8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
    461          	0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
    462          	0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
    463          	0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
    464          	0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
    465          	0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
    466          	0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
    467          	0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
    468          	0x0173, 0x014E, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
    469          };
    470          
    471          #elif _CODE_PAGE == 1258
    472          #define _TBLDEF 1
    473          static
    474          const WCHAR Tbl[] = {	/*  CP1258(0x80-0xFF) to Unicode conversion table */
    475          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    476          	0x02C6, 0x2030, 0x0000, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
    477          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    478          	0x02DC, 0x2122, 0x0000, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
    479          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    480          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    481          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    482          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    483          	0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    484          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
    485          	0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
    486          	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
    487          	0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    488          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
    489          	0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
    490          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
    491          };
    492          
    493          #endif
    494          
    495          
    496          #if !_TBLDEF || !_USE_LFN
    497          //#error This file is not needed in current configuration. Remove from the project.
    498          #endif
    499          
    500          

   \                                 In section .text, align 2, keep-with-next
    501          WCHAR ff_convert (	/* Converted character, Returns zero on error */
    502          	WCHAR	src,	/* Character code to be converted */
    503          	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
    504          )
    505          {
   \                     ff_convert:
   \   00000000   0x0002             MOVS     R2,R0
    506          	WCHAR c;
    507          
    508          
    509          	if (src < 0x80) {	/* ASCII */
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0x2A80             CMP      R2,#+128
   \   00000006   0xDA01             BGE.N    ??ff_convert_0
    510          		c = src;
   \   00000008   0x0010             MOVS     R0,R2
   \   0000000A   0xE01E             B.N      ??ff_convert_1
    511          
    512          	} else {
    513          		if (dir) {		/* OEMCP to Unicode */
   \                     ??ff_convert_0:
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD00C             BEQ.N    ??ff_convert_2
    514          			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   \   00000010   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000012   0x2AFF             CMP      R2,#+255
   \   00000014   0xDD01             BLE.N    ??ff_convert_3
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE006             B.N      ??ff_convert_4
   \                     ??ff_convert_3:
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0x....             LDR.N    R0,??DataTable1
   \   0000001E   0xEB10 0x0042      ADDS     R0,R0,R2, LSL #+1
   \   00000022   0xF5B0 0x7080      SUBS     R0,R0,#+256
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \                     ??ff_convert_4:
   \   00000028   0xE00F             B.N      ??ff_convert_1
    515          
    516          		} else {		/* Unicode to OEMCP */
    517          			for (c = 0; c < 0x80; c++) {
   \                     ??ff_convert_2:
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x0018             MOVS     R0,R3
   \                     ??ff_convert_5:
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0x2880             CMP      R0,#+128
   \   00000032   0xDA08             BGE.N    ??ff_convert_6
    518          				if (src == Tbl[c]) break;
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x....             LDR.N    R3,??DataTable1
   \   00000038   0xF833 0x3010      LDRH     R3,[R3, R0, LSL #+1]
   \   0000003C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   0x429A             CMP      R2,R3
   \   00000040   0xD001             BEQ.N    ??ff_convert_6
    519          			}
   \                     ??ff_convert_7:
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0xE7F3             B.N      ??ff_convert_5
    520          			c = (c + 0x80) & 0xFF;
   \                     ??ff_convert_6:
   \   00000046   0x3080             ADDS     R0,R0,#+128
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
    521          		}
    522          	}
    523          
    524          	return c;
   \                     ??ff_convert_1:
   \   0000004A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004C   0x4770             BX       LR               ;; return
    525          }
    526          
    527          

   \                                 In section .text, align 2, keep-with-next
    528          WCHAR ff_wtoupper (	/* Upper converted character */
    529          	WCHAR chr		/* Input character */
    530          )
    531          {
    532          	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
    533          	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
    534          	int i;
    535          
    536          
    537          	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   \                     ff_wtoupper:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x0011             MOVS     R1,R2
   \                     ??ff_wtoupper_0:
   \   00000004   0x....             LDR.N    R2,??DataTable1_1
   \   00000006   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD007             BEQ.N    ??ff_wtoupper_1
   \   0000000E   0x....             LDR.N    R2,??DataTable1_1
   \   00000010   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x4290             CMP      R0,R2
   \   00000018   0xD001             BEQ.N    ??ff_wtoupper_1
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0xE7F2             B.N      ??ff_wtoupper_0
    538          
    539          	return tbl_lower[i] ? tbl_upper[i] : chr;
   \                     ??ff_wtoupper_1:
   \   0000001E   0x....             LDR.N    R2,??DataTable1_1
   \   00000020   0xF832 0x2011      LDRH     R2,[R2, R1, LSL #+1]
   \   00000024   0x2A00             CMP      R2,#+0
   \   00000026   0xD003             BEQ.N    ??ff_wtoupper_2
   \   00000028   0x....             LDR.N    R0,??DataTable1_2
   \   0000002A   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   0000002E   0xE7FF             B.N      ??ff_wtoupper_3
   \                     ??ff_wtoupper_2:
   \                     ??ff_wtoupper_3:
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x4770             BX       LR               ;; return
    540          }

   \                                 In section .rodata, align 4
   \                     ??tbl_lower:
   \   00000000   0x0061 0x0062      DC16 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110
   \              0x0063 0x0064
   \              0x0065 0x0066
   \              0x0067 0x0068
   \              0x0069 0x006A
   \              0x006B 0x006C
   \              0x006D 0x006E
   \   0000001C   0x006F 0x0070      DC16 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 161
   \              0x0071 0x0072
   \              0x0073 0x0074
   \              0x0075 0x0076
   \              0x0077 0x0078
   \              0x0079 0x007A
   \              0x00A1       
   \   00000036   0x00A2 0x00A3      DC16 162, 163, 165, 172, 175, 224, 225, 226, 227, 228, 229, 230, 231
   \              0x00A5 0x00AC
   \              0x00AF 0x00E0
   \              0x00E1 0x00E2
   \              0x00E3 0x00E4
   \              0x00E5 0x00E6
   \              0x00E7       
   \   00000050   0x00E8 0x00E9      DC16 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244
   \              0x00EA 0x00EB
   \              0x00EC 0x00ED
   \              0x00EE 0x00EF
   \              0x00F0 0x00F1
   \              0x00F2 0x00F3
   \              0x00F4       
   \   0000006A   0x00F5 0x00F6      DC16 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261
   \              0x00F8 0x00F9
   \              0x00FA 0x00FB
   \              0x00FC 0x00FD
   \              0x00FE 0x00FF
   \              0x0101 0x0103
   \              0x0105       
   \   00000084   0x0107 0x0109      DC16 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287
   \              0x010B 0x010D
   \              0x010F 0x0111
   \              0x0113 0x0115
   \              0x0117 0x0119
   \              0x011B 0x011D
   \              0x011F       
   \   0000009E   0x0121 0x0123      DC16 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 314
   \              0x0125 0x0127
   \              0x0129 0x012B
   \              0x012D 0x012F
   \              0x0131 0x0133
   \              0x0135 0x0137
   \              0x013A       
   \   000000B8   0x013C 0x013E      DC16 316, 318, 320, 322, 324, 326, 328, 331, 333, 335, 337, 339, 341
   \              0x0140 0x0142
   \              0x0144 0x0146
   \              0x0148 0x014B
   \              0x014D 0x014F
   \              0x0151 0x0153
   \              0x0155       
   \   000000D2   0x0157 0x0159      DC16 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367
   \              0x015B 0x015D
   \              0x015F 0x0161
   \              0x0163 0x0165
   \              0x0167 0x0169
   \              0x016B 0x016D
   \              0x016F       
   \   000000EC   0x0171 0x0173      DC16 369, 371, 373, 375, 378, 380, 382, 402, 945, 946, 947, 948, 949
   \              0x0175 0x0177
   \              0x017A 0x017C
   \              0x017E 0x0192
   \              0x03B1 0x03B2
   \              0x03B3 0x03B4
   \              0x03B5       
   \   00000106   0x03B6 0x03B7      DC16 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963
   \              0x03B8 0x03B9
   \              0x03BA 0x03BB
   \              0x03BC 0x03BD
   \              0x03BE 0x03BF
   \              0x03C0 0x03C1
   \              0x03C3       
   \   00000120   0x03C4 0x03C5      DC16 964, 965, 966, 967, 968, 969, 970, 1072, 1073, 1074, 1075, 1076
   \              0x03C6 0x03C7
   \              0x03C8 0x03C9
   \              0x03CA 0x0430
   \              0x0431 0x0432
   \              0x0433 0x0434
   \   00000138   0x0435 0x0436      DC16 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087
   \              0x0437 0x0438
   \              0x0439 0x043A
   \              0x043B 0x043C
   \              0x043D 0x043E
   \              0x043F       
   \   0000014E   0x0440 0x0441      DC16 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098
   \              0x0442 0x0443
   \              0x0444 0x0445
   \              0x0446 0x0447
   \              0x0448 0x0449
   \              0x044A       
   \   00000164   0x044B 0x044C      DC16 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110
   \              0x044D 0x044E
   \              0x044F 0x0451
   \              0x0452 0x0453
   \              0x0454 0x0455
   \              0x0456       
   \   0000017A   0x0457 0x0458      DC16 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 8560, 8561, 8562
   \              0x0459 0x045A
   \              0x045B 0x045C
   \              0x045E 0x045F
   \              0x2170 0x2171
   \              0x2172       
   \   00000190   0x2173 0x2174      DC16 8563, 8564, 8565, 8566, 8567, 8568, 8569, 8570, 8571, 8572, 8573
   \              0x2175 0x2176
   \              0x2177 0x2178
   \              0x2179 0x217A
   \              0x217B 0x217C
   \              0x217D       
   \   000001A6   0x217E 0x217F      DC16 8574, 8575, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352
   \              0xFF41 0xFF42
   \              0xFF43 0xFF44
   \              0xFF45 0xFF46
   \              0xFF47 0xFF48
   \   000001BA   0xFF49 0xFF4A      DC16 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361
   \              0xFF4B 0xFF4C
   \              0xFF4D 0xFF4E
   \              0xFF4F 0xFF50
   \              0xFF51       
   \   000001CC   0xFF52 0xFF53      DC16 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 0
   \              0xFF54 0xFF55
   \              0xFF56 0xFF57
   \              0xFF58 0xFF59
   \              0xFF5A 0x0000

   \                                 In section .rodata, align 4
   \                     ??tbl_upper:
   \   00000000   0x0041 0x0042      DC16 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81
   \              0x0043 0x0044
   \              0x0045 0x0046
   \              0x0047 0x0048
   \              0x0049 0x004A
   \              0x004B 0x004C
   \              0x004D 0x004E
   \              0x004F 0x0050
   \              0x0051       
   \   00000022   0x0052 0x0053      DC16 82, 83, 84, 85, 86, 87, 88, 89, 90, 33, 65504, 65505, 65509, 65506
   \              0x0054 0x0055
   \              0x0056 0x0057
   \              0x0058 0x0059
   \              0x005A 0x0021
   \              0xFFE0 0xFFE1
   \              0xFFE5 0xFFE2
   \   0000003E   0xFFE3 0x00C0      DC16 65507, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203
   \              0x00C1 0x00C2
   \              0x00C3 0x00C4
   \              0x00C5 0x00C6
   \              0x00C7 0x00C8
   \              0x00C9 0x00CA
   \              0x00CB       
   \   00000058   0x00CC 0x00CD      DC16 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217
   \              0x00CE 0x00CF
   \              0x00D0 0x00D1
   \              0x00D2 0x00D3
   \              0x00D4 0x00D5
   \              0x00D6 0x00D8
   \              0x00D9       
   \   00000072   0x00DA 0x00DB      DC16 218, 219, 220, 221, 222, 376, 256, 258, 260, 262, 264, 266, 268
   \              0x00DC 0x00DD
   \              0x00DE 0x0178
   \              0x0100 0x0102
   \              0x0104 0x0106
   \              0x0108 0x010A
   \              0x010C       
   \   0000008C   0x010E 0x0110      DC16 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294
   \              0x0112 0x0114
   \              0x0116 0x0118
   \              0x011A 0x011C
   \              0x011E 0x0120
   \              0x0122 0x0124
   \              0x0126       
   \   000000A6   0x0128 0x012A      DC16 296, 298, 300, 302, 304, 306, 308, 310, 313, 315, 317, 319, 321
   \              0x012C 0x012E
   \              0x0130 0x0132
   \              0x0134 0x0136
   \              0x0139 0x013B
   \              0x013D 0x013F
   \              0x0141       
   \   000000C0   0x0143 0x0145      DC16 323, 325, 327, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348
   \              0x0147 0x014A
   \              0x014C 0x014E
   \              0x0150 0x0152
   \              0x0154 0x0156
   \              0x0158 0x015A
   \              0x015C       
   \   000000DA   0x015E 0x0160      DC16 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374
   \              0x0162 0x0164
   \              0x0166 0x0168
   \              0x016A 0x016C
   \              0x016E 0x0170
   \              0x0172 0x0174
   \              0x0176       
   \   000000F4   0x0179 0x017B      DC16 377, 379, 381, 401, 913, 914, 915, 916, 917, 918, 919, 920, 921
   \              0x017D 0x0191
   \              0x0391 0x0392
   \              0x0393 0x0394
   \              0x0395 0x0396
   \              0x0397 0x0398
   \              0x0399       
   \   0000010E   0x039A 0x039B      DC16 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935
   \              0x039C 0x039D
   \              0x039E 0x039F
   \              0x03A0 0x03A1
   \              0x03A3 0x03A4
   \              0x03A5 0x03A6
   \              0x03A7       
   \   00000128   0x03A8 0x03A9      DC16 936, 937, 938, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047
   \              0x03AA 0x0410
   \              0x0411 0x0412
   \              0x0413 0x0414
   \              0x0415 0x0416
   \              0x0417       
   \   0000013E   0x0418 0x0419      DC16 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058
   \              0x041A 0x041B
   \              0x041C 0x041D
   \              0x041E 0x041F
   \              0x0420 0x0421
   \              0x0422       
   \   00000154   0x0423 0x0424      DC16 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069
   \              0x0425 0x0426
   \              0x0427 0x0428
   \              0x0429 0x042A
   \              0x042B 0x042C
   \              0x042D       
   \   0000016A   0x042E 0x042F      DC16 1070, 1071, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033
   \              0x0401 0x0402
   \              0x0403 0x0404
   \              0x0405 0x0406
   \              0x0407 0x0408
   \              0x0409       
   \   00000180   0x040A 0x040B      DC16 1034, 1035, 1036, 1038, 1039, 8544, 8545, 8546, 8547, 8548, 8549
   \              0x040C 0x040E
   \              0x040F 0x2160
   \              0x2161 0x2162
   \              0x2163 0x2164
   \              0x2165       
   \   00000196   0x2166 0x2167      DC16 8550, 8551, 8552, 8553, 8554, 8555, 8556, 8557, 8558, 8559, 65313
   \              0x2168 0x2169
   \              0x216A 0x216B
   \              0x216C 0x216D
   \              0x216E 0x216F
   \              0xFF21       
   \   000001AC   0xFF22 0xFF23      DC16 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322
   \              0xFF24 0xFF25
   \              0xFF26 0xFF27
   \              0xFF28 0xFF29
   \              0xFF2A       
   \   000001BE   0xFF2B 0xFF2C      DC16 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331
   \              0xFF2D 0xFF2E
   \              0xFF2F 0xFF30
   \              0xFF31 0xFF32
   \              0xFF33       
   \   000001D0   0xFF34 0xFF35      DC16 65332, 65333, 65334, 65335, 65336, 65337, 65338, 0
   \              0xFF36 0xFF37
   \              0xFF38 0xFF39
   \              0xFF3A 0x0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Tbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ??tbl_lower

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ??tbl_upper

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ff_convert
       0   ff_wtoupper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
     256  Tbl
      78  ff_convert
      52  ff_wtoupper
     480  tbl_lower
     480  tbl_upper

 
 1 216 bytes in section .rodata
   142 bytes in section .text
 
   142 bytes of CODE  memory
 1 216 bytes of CONST memory

Errors: none
Warnings: none
