###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:14 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uC- #
#                    CPU\ARM-Cortex-M3\IAR\cpu_c.c                            #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uC- #
#                    CPU\ARM-Cortex-M3\IAR\cpu_c.c -lCN                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\cpu_c.lst                                  #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\cpu_c.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uC-CPU\ARM-Cortex-M3\IAR\cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/CPU
      4          *                                    CPU CONFIGURATION & PORT LAYER
      5          *
      6          *                          (c) Copyright 2004-2009; Micrium, Inc.; Weston, FL
      7          *
      8          *               All rights reserved.  Protected by international copyright laws.
      9          *
     10          *               uC/CPU is provided in source form for FREE evaluation, for educational
     11          *               use or peaceful research.  If you plan on using uC/CPU in a commercial
     12          *               product you need to contact Micrium to properly license its use in your
     13          *               product.  We provide ALL the source code for your convenience and to
     14          *               help you experience uC/CPU.  The fact that the source code is provided
     15          *               does NOT mean that you can use it without paying a licensing fee.
     16          *
     17          *               Knowledge of the source code may NOT be used to develop a similar product.
     18          *
     19          *               Please help us continue to provide the Embedded community with the finest
     20          *               software available.  Your honesty is greatly appreciated.
     21          *********************************************************************************************************
     22          */
     23          
     24          /*
     25          *********************************************************************************************************
     26          *
     27          *                                            CPU PORT FILE
     28          *
     29          *                                            ARM-Cortex-M3
     30          *                                            IAR C Compiler
     31          *
     32          * Filename      : cpu_c.c
     33          * Version       : V1.23
     34          * Programmer(s) : JJL
     35          *                 BAN
     36          *********************************************************************************************************
     37          */
     38          
     39          
     40          /*
     41          *********************************************************************************************************
     42          *                                            INCLUDE FILES
     43          *********************************************************************************************************
     44          */
     45          
     46          #include  <cpu.h>
     47          #include  <cpu_core.h>
     48          
     49          #include  <lib_def.h>
     50          
     51          
     52          /*$PAGE*/
     53          /*
     54          *********************************************************************************************************
     55          *                                            LOCAL DEFINES
     56          *********************************************************************************************************
     57          */
     58          
     59          #define  CPU_INT_SRC_POS_MAX                  ((((CPU_REG_NVIC_NVIC + 1) & 0x1F) * 32) + 16)
     60          
     61          #define  CPU_BIT_BAND_SRAM_REG_LO                 0x20000000
     62          #define  CPU_BIT_BAND_SRAM_REG_HI                 0x200FFFFF
     63          #define  CPU_BIT_BAND_SRAM_BASE                   0x22000000
     64          
     65          
     66          #define  CPU_BIT_BAND_PERIPH_REG_LO               0x40000000
     67          #define  CPU_BIT_BAND_PERIPH_REG_HI               0x400FFFFF
     68          #define  CPU_BIT_BAND_PERIPH_BASE                 0x42000000
     69          
     70          
     71          /*
     72          *********************************************************************************************************
     73          *                                           LOCAL CONSTANTS
     74          *********************************************************************************************************
     75          */
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                          LOCAL DATA TYPES
     81          *********************************************************************************************************
     82          */
     83          
     84          
     85          /*
     86          *********************************************************************************************************
     87          *                                            LOCAL TABLES
     88          *********************************************************************************************************
     89          */
     90          
     91          
     92          /*
     93          *********************************************************************************************************
     94          *                                       LOCAL GLOBAL VARIABLES
     95          *********************************************************************************************************
     96          */
     97          
     98          
     99          /*
    100          *********************************************************************************************************
    101          *                                      LOCAL FUNCTION PROTOTYPES
    102          *********************************************************************************************************
    103          */
    104          
    105          
    106          /*
    107          *********************************************************************************************************
    108          *                                     LOCAL CONFIGURATION ERRORS
    109          *********************************************************************************************************
    110          */
    111          
    112          
    113          /*$PAGE*/
    114          /*
    115          *********************************************************************************************************
    116          *                                          CPU_BitBandClr()
    117          *
    118          * Description : Clear bit in bit-band region.
    119          *
    120          * Argument(s) : addr            Byte address in memory space.
    121          *
    122          *               bit_nbr         Bit number in byte.
    123          *
    124          * Return(s)   : none.
    125          *
    126          * Caller(s)   : Application.
    127          *
    128          * Note(s)     : none.
    129          *********************************************************************************************************
    130          */
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void  CPU_BitBandClr (CPU_ADDR    addr,
    133                                CPU_INT08U  bit_nbr)
    134          {
   \                     CPU_BitBandClr:
   \   00000000   0xB430             PUSH     {R4,R5}
    135              CPU_ADDR  bit_word_off;
    136              CPU_ADDR  bit_word_addr;
    137          
    138          
    139              if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
    140                  (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
   \   00000002   0xF1B0 0x5F00      CMP      R0,#+536870912
   \   00000006   0xD310             BCC.N    ??CPU_BitBandClr_0
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable5  ;; 0x20100000
   \   0000000C   0x42A0             CMP      R0,R4
   \   0000000E   0xD20C             BCS.N    ??CPU_BitBandClr_0
    141                  bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
   \   00000010   0xF1B0 0x5400      SUBS     R4,R0,#+536870912
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x008D             LSLS     R5,R1,#+2
   \   00000018   0xEB15 0x1444      ADDS     R4,R5,R4, LSL #+5
   \   0000001C   0x0022             MOVS     R2,R4
    142                  bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
   \   0000001E   0xF112 0x5408      ADDS     R4,R2,#+570425344
   \   00000022   0x0023             MOVS     R3,R4
    143          
    144                *(volatile CPU_INT32U *)(bit_word_addr) = 0;
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0x601C             STR      R4,[R3, #+0]
   \   00000028   0xE012             B.N      ??CPU_BitBandClr_1
    145          
    146              } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
    147                         (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
   \                     ??CPU_BitBandClr_0:
   \   0000002A   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   0000002E   0xD30F             BCC.N    ??CPU_BitBandClr_1
   \   00000030   0x.... 0x....      LDR.W    R4,??DataTable5_1  ;; 0x40100000
   \   00000034   0x42A0             CMP      R0,R4
   \   00000036   0xD20B             BCS.N    ??CPU_BitBandClr_1
    148                  bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
   \   00000038   0xF1B0 0x4480      SUBS     R4,R0,#+1073741824
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x008D             LSLS     R5,R1,#+2
   \   00000040   0xEB15 0x1444      ADDS     R4,R5,R4, LSL #+5
   \   00000044   0x0022             MOVS     R2,R4
    149                  bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
   \   00000046   0xF112 0x4484      ADDS     R4,R2,#+1107296256
   \   0000004A   0x0023             MOVS     R3,R4
    150          
    151                *(volatile CPU_INT32U *)(bit_word_addr) = 0;
   \   0000004C   0x2400             MOVS     R4,#+0
   \   0000004E   0x601C             STR      R4,[R3, #+0]
    152              }
    153          }
   \                     ??CPU_BitBandClr_1:
   \   00000050   0xBC30             POP      {R4,R5}
   \   00000052   0x4770             BX       LR               ;; return
    154          
    155          
    156          /*$PAGE*/
    157          /*
    158          *********************************************************************************************************
    159          *                                          CPU_BitBandSet()
    160          *
    161          * Description : Set bit in bit-band region.
    162          *
    163          * Argument(s) : addr            Byte address in memory space.
    164          *
    165          *               bit_nbr         Bit number in byte.
    166          *
    167          * Return(s)   : none.
    168          *
    169          * Caller(s)   : Application.
    170          *
    171          * Note(s)     : none.
    172          *********************************************************************************************************
    173          */
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void  CPU_BitBandSet (CPU_ADDR    addr,
    176                                CPU_INT08U  bit_nbr)
    177          {
   \                     CPU_BitBandSet:
   \   00000000   0xB430             PUSH     {R4,R5}
    178              CPU_ADDR  bit_word_off;
    179              CPU_ADDR  bit_word_addr;
    180          
    181          
    182              if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
    183                  (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
   \   00000002   0xF1B0 0x5F00      CMP      R0,#+536870912
   \   00000006   0xD310             BCC.N    ??CPU_BitBandSet_0
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable5  ;; 0x20100000
   \   0000000C   0x42A0             CMP      R0,R4
   \   0000000E   0xD20C             BCS.N    ??CPU_BitBandSet_0
    184                  bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO  ) * 32) + (bit_nbr * 4);
   \   00000010   0xF1B0 0x5400      SUBS     R4,R0,#+536870912
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x008D             LSLS     R5,R1,#+2
   \   00000018   0xEB15 0x1444      ADDS     R4,R5,R4, LSL #+5
   \   0000001C   0x0022             MOVS     R2,R4
    185                  bit_word_addr = CPU_BIT_BAND_SRAM_BASE   + bit_word_off;
   \   0000001E   0xF112 0x5408      ADDS     R4,R2,#+570425344
   \   00000022   0x0023             MOVS     R3,R4
    186          
    187                *(volatile CPU_INT32U *)(bit_word_addr) = 1;
   \   00000024   0x2401             MOVS     R4,#+1
   \   00000026   0x601C             STR      R4,[R3, #+0]
   \   00000028   0xE012             B.N      ??CPU_BitBandSet_1
    188          
    189              } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
    190                         (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
   \                     ??CPU_BitBandSet_0:
   \   0000002A   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \   0000002E   0xD30F             BCC.N    ??CPU_BitBandSet_1
   \   00000030   0x.... 0x....      LDR.W    R4,??DataTable5_1  ;; 0x40100000
   \   00000034   0x42A0             CMP      R0,R4
   \   00000036   0xD20B             BCS.N    ??CPU_BitBandSet_1
    191                  bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
   \   00000038   0xF1B0 0x4480      SUBS     R4,R0,#+1073741824
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x008D             LSLS     R5,R1,#+2
   \   00000040   0xEB15 0x1444      ADDS     R4,R5,R4, LSL #+5
   \   00000044   0x0022             MOVS     R2,R4
    192                  bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
   \   00000046   0xF112 0x4484      ADDS     R4,R2,#+1107296256
   \   0000004A   0x0023             MOVS     R3,R4
    193          
    194                *(volatile CPU_INT32U *)(bit_word_addr) = 1;
   \   0000004C   0x2401             MOVS     R4,#+1
   \   0000004E   0x601C             STR      R4,[R3, #+0]
    195              }
    196          }
   \                     ??CPU_BitBandSet_1:
   \   00000050   0xBC30             POP      {R4,R5}
   \   00000052   0x4770             BX       LR               ;; return
    197          
    198          
    199          /*$PAGE*/
    200          /*
    201          *********************************************************************************************************
    202          *                                           CPU_IntSrcDis()
    203          *
    204          * Description : Disable an interrupt source.
    205          *
    206          * Argument(s) : pos     Position of interrupt vector in interrupt table :
    207          *
    208          *                           0       Invalid (see Note #1a).
    209          *                           1       Invalid (see Note #1b).
    210          *                           2       Non-maskable interrupt.
    211          *                           3       Hard Fault.
    212          *                           4       Memory Management.
    213          *                           5       Bus Fault.
    214          *                           6       Usage Fault.
    215          *                           7-10    Reserved.
    216          *                           11      SVCall
    217          *                           12      Debug monitor.
    218          *                           13      Reserved
    219          *                           14      PendSV.
    220          *                           15      SysTick.
    221          *                           16+     External Interrupt.
    222          *
    223          * Return(s)   : none.
    224          *
    225          * Caller(s)   : Application.
    226          *
    227          * Note(s)     : (1) Several table positions do not contain interrupt sources :
    228          *
    229          *                   (a) Position 0 contains the stack pointer.
    230          *                   (b) Positions 7-10, 13 are reserved.
    231          *
    232          *               (2) Several interrupts cannot be disabled/enabled :
    233          *
    234          *                   (a) Reset.
    235          *                   (b) NMI.
    236          *                   (c) Hard fault.
    237          *                   (d) SVCall.
    238          *                   (e) Debug monitor.
    239          *                   (f) PendSV.
    240          *
    241          *               (3) The maximum Cortex-M3 table position is 256.  A particular Cortex-M3 may have fewer
    242          *                   than 240 external exceptions and, consequently, fewer than 256 table positions.
    243          *                   This function assumes that the specified table position is valid if the interrupt
    244          *                   controller type register's INTLINESNUM field is large enough so that the position
    245          *                   COULD be valid.
    246          *********************************************************************************************************
    247          */
    248          /*$PAGE*/

   \                                 In section .text, align 2, keep-with-next
    249          void  CPU_IntSrcDis (CPU_INT08U  pos)
    250          {
   \                     CPU_IntSrcDis:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    251              CPU_INT08U  group;
    252              CPU_INT08U  pos_max;
    253              CPU_INT08U  nbr;
    254              CPU_SR_ALLOC();
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
    255          
    256          
    257              switch (pos) {
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD017             BEQ.N    ??CPU_IntSrcDis_0
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xD016             BEQ.N    ??CPU_IntSrcDis_1
   \   00000014   0xD315             BCC.N    ??CPU_IntSrcDis_1
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD014             BEQ.N    ??CPU_IntSrcDis_2
   \   0000001A   0xD312             BCC.N    ??CPU_IntSrcDis_1
   \   0000001C   0x2C06             CMP      R4,#+6
   \   0000001E   0xD02F             BEQ.N    ??CPU_IntSrcDis_3
   \   00000020   0xD31F             BCC.N    ??CPU_IntSrcDis_4
   \   00000022   0x2C08             CMP      R4,#+8
   \   00000024   0xD00C             BEQ.N    ??CPU_IntSrcDis_0
   \   00000026   0xD30B             BCC.N    ??CPU_IntSrcDis_0
   \   00000028   0x2C0A             CMP      R4,#+10
   \   0000002A   0xD009             BEQ.N    ??CPU_IntSrcDis_0
   \   0000002C   0xD308             BCC.N    ??CPU_IntSrcDis_0
   \   0000002E   0x2C0C             CMP      R4,#+12
   \   00000030   0xD007             BEQ.N    ??CPU_IntSrcDis_1
   \   00000032   0xD306             BCC.N    ??CPU_IntSrcDis_1
   \   00000034   0x2C0E             CMP      R4,#+14
   \   00000036   0xD004             BEQ.N    ??CPU_IntSrcDis_1
   \   00000038   0xD302             BCC.N    ??CPU_IntSrcDis_0
   \   0000003A   0x2C0F             CMP      R4,#+15
   \   0000003C   0xD02F             BEQ.N    ??CPU_IntSrcDis_5
   \   0000003E   0xE03D             B.N      ??CPU_IntSrcDis_6
    258                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    259                  case CPU_INT_RSVD_07:
    260                  case CPU_INT_RSVD_08:
    261                  case CPU_INT_RSVD_09:
    262                  case CPU_INT_RSVD_10:
    263                  case CPU_INT_RSVD_13:
    264                       break;
   \                     ??CPU_IntSrcDis_0:
   \   00000040   0xE066             B.N      ??CPU_IntSrcDis_7
    265          
    266          
    267                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    268                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    269                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    270                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    271                  case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
    272                  case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
    273                  case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
    274                       break;
   \                     ??CPU_IntSrcDis_1:
   \   00000042   0xE065             B.N      ??CPU_IntSrcDis_7
    275          
    276                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    277                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_2:
   \   00000044   0x.... 0x....      BL       CPU_SR_Save
   \   00000048   0x4680             MOV      R8,R0
    278                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000058   0x6008             STR      R0,[R1, #+0]
    279                       CPU_CRITICAL_EXIT();
   \   0000005A   0x4640             MOV      R0,R8
   \   0000005C   0x.... 0x....      BL       CPU_SR_Restore
    280                       break;
   \   00000060   0xE056             B.N      ??CPU_IntSrcDis_7
    281          
    282                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    283                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_4:
   \   00000062   0x.... 0x....      BL       CPU_SR_Save
   \   00000066   0x4680             MOV      R8,R0
    284                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000076   0x6008             STR      R0,[R1, #+0]
    285                       CPU_CRITICAL_EXIT();
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       CPU_SR_Restore
    286                       break;
   \   0000007E   0xE047             B.N      ??CPU_IntSrcDis_7
    287          
    288                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    289                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_3:
   \   00000080   0x.... 0x....      BL       CPU_SR_Save
   \   00000084   0x4680             MOV      R8,R0
    290                       CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000094   0x6008             STR      R0,[R1, #+0]
    291                       CPU_CRITICAL_EXIT();
   \   00000096   0x4640             MOV      R0,R8
   \   00000098   0x.... 0x....      BL       CPU_SR_Restore
    292                       break;
   \   0000009C   0xE038             B.N      ??CPU_IntSrcDis_7
    293          
    294                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    295                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcDis_5:
   \   0000009E   0x.... 0x....      BL       CPU_SR_Save
   \   000000A2   0x4680             MOV      R8,R0
    296                       CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0xe000e010
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x0840             LSRS     R0,R0,#+1
   \   000000AC   0x0040             LSLS     R0,R0,#+1
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0xe000e010
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    297                       CPU_CRITICAL_EXIT();
   \   000000B4   0x4640             MOV      R0,R8
   \   000000B6   0x.... 0x....      BL       CPU_SR_Restore
    298                       break;
   \   000000BA   0xE029             B.N      ??CPU_IntSrcDis_7
    299          
    300          
    301                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    302                  default:
    303                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcDis_6:
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0xe000e004
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x1C40             ADDS     R0,R0,#+1
   \   000000C4   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   000000C8   0x0140             LSLS     R0,R0,#+5
   \   000000CA   0x3010             ADDS     R0,R0,#+16
   \   000000CC   0x0006             MOVS     R6,R0
    304                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D2   0x42B4             CMP      R4,R6
   \   000000D4   0xD21C             BCS.N    ??CPU_IntSrcDis_8
    305                           group = (pos - 16) / 32;
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   000000DC   0x2120             MOVS     R1,#+32
   \   000000DE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000E2   0x0005             MOVS     R5,R0
    306                           nbr   = (pos - 16) % 32;
   \   000000E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E6   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   000000EA   0x2120             MOVS     R1,#+32
   \   000000EC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000F0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000F4   0x0017             MOVS     R7,R2
    307          
    308                           CPU_CRITICAL_ENTER();
   \   000000F6   0x.... 0x....      BL       CPU_SR_Save
   \   000000FA   0x4680             MOV      R8,R0
    309                           CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable5_5  ;; 0xe000e180
   \   00000102   0x2101             MOVS     R1,#+1
   \   00000104   0x40B9             LSLS     R1,R1,R7
   \   00000106   0xF840 0x1025      STR      R1,[R0, R5, LSL #+2]
    310                           CPU_CRITICAL_EXIT();
   \   0000010A   0x4640             MOV      R0,R8
   \   0000010C   0x.... 0x....      BL       CPU_SR_Restore
    311                       }
    312                       break;
    313              }
    314          }
   \                     ??CPU_IntSrcDis_8:
   \                     ??CPU_IntSrcDis_7:
   \   00000110   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    315          
    316          
    317          /*$PAGE*/
    318          /*
    319          *********************************************************************************************************
    320          *                                           CPU_IntSrcEn()
    321          *
    322          * Description : Enable an interrupt source.
    323          *
    324          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    325          *
    326          * Return(s)   : none.
    327          *
    328          * Caller(s)   : Application.
    329          *
    330          * Note(s)     : (1) See 'CPU_IntSrcDis()  Note #1'.
    331          *
    332          *               (2) See 'CPU_IntSrcDis()  Note #2'.
    333          *
    334          *               (3) See 'CPU_IntSrcDis()  Note #3'.
    335          *********************************************************************************************************
    336          */
    337          

   \                                 In section .text, align 2, keep-with-next
    338          void  CPU_IntSrcEn (CPU_INT08U  pos)
    339          {
   \                     CPU_IntSrcEn:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    340              CPU_INT08U  group;
    341              CPU_INT08U  nbr;
    342              CPU_INT08U  pos_max;
    343              CPU_SR_ALLOC();
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
    344          
    345          
    346              switch (pos) {
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD017             BEQ.N    ??CPU_IntSrcEn_0
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xD016             BEQ.N    ??CPU_IntSrcEn_1
   \   00000014   0xD315             BCC.N    ??CPU_IntSrcEn_1
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD014             BEQ.N    ??CPU_IntSrcEn_2
   \   0000001A   0xD312             BCC.N    ??CPU_IntSrcEn_1
   \   0000001C   0x2C06             CMP      R4,#+6
   \   0000001E   0xD02F             BEQ.N    ??CPU_IntSrcEn_3
   \   00000020   0xD31F             BCC.N    ??CPU_IntSrcEn_4
   \   00000022   0x2C08             CMP      R4,#+8
   \   00000024   0xD00C             BEQ.N    ??CPU_IntSrcEn_0
   \   00000026   0xD30B             BCC.N    ??CPU_IntSrcEn_0
   \   00000028   0x2C0A             CMP      R4,#+10
   \   0000002A   0xD009             BEQ.N    ??CPU_IntSrcEn_0
   \   0000002C   0xD308             BCC.N    ??CPU_IntSrcEn_0
   \   0000002E   0x2C0C             CMP      R4,#+12
   \   00000030   0xD007             BEQ.N    ??CPU_IntSrcEn_1
   \   00000032   0xD306             BCC.N    ??CPU_IntSrcEn_1
   \   00000034   0x2C0E             CMP      R4,#+14
   \   00000036   0xD004             BEQ.N    ??CPU_IntSrcEn_1
   \   00000038   0xD302             BCC.N    ??CPU_IntSrcEn_0
   \   0000003A   0x2C0F             CMP      R4,#+15
   \   0000003C   0xD02F             BEQ.N    ??CPU_IntSrcEn_5
   \   0000003E   0xE03D             B.N      ??CPU_IntSrcEn_6
    347                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    348                  case CPU_INT_RSVD_07:
    349                  case CPU_INT_RSVD_08:
    350                  case CPU_INT_RSVD_09:
    351                  case CPU_INT_RSVD_10:
    352                  case CPU_INT_RSVD_13:
    353                       break;
   \                     ??CPU_IntSrcEn_0:
   \   00000040   0xE066             B.N      ??CPU_IntSrcEn_7
    354          
    355          
    356                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    357                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    358                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    359                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    360                  case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
    361                  case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
    362                  case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
    363                       break;
   \                     ??CPU_IntSrcEn_1:
   \   00000042   0xE065             B.N      ??CPU_IntSrcEn_7
    364          
    365                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    366                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_2:
   \   00000044   0x.... 0x....      BL       CPU_SR_Save
   \   00000048   0x4680             MOV      R8,R0
    367                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000058   0x6008             STR      R0,[R1, #+0]
    368                       CPU_CRITICAL_EXIT();
   \   0000005A   0x4640             MOV      R0,R8
   \   0000005C   0x.... 0x....      BL       CPU_SR_Restore
    369                       break;
   \   00000060   0xE056             B.N      ??CPU_IntSrcEn_7
    370          
    371                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    372                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_4:
   \   00000062   0x.... 0x....      BL       CPU_SR_Save
   \   00000066   0x4680             MOV      R8,R0
    373                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000076   0x6008             STR      R0,[R1, #+0]
    374                       CPU_CRITICAL_EXIT();
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       CPU_SR_Restore
    375                       break;
   \   0000007E   0xE047             B.N      ??CPU_IntSrcEn_7
    376          
    377                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    378                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_3:
   \   00000080   0x.... 0x....      BL       CPU_SR_Save
   \   00000084   0x4680             MOV      R8,R0
    379                       CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable5_2  ;; 0xe000ed24
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable5_2  ;; 0xe000ed24
   \   00000094   0x6008             STR      R0,[R1, #+0]
    380                       CPU_CRITICAL_EXIT();
   \   00000096   0x4640             MOV      R0,R8
   \   00000098   0x.... 0x....      BL       CPU_SR_Restore
    381                       break;
   \   0000009C   0xE038             B.N      ??CPU_IntSrcEn_7
    382          
    383                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    384                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcEn_5:
   \   0000009E   0x.... 0x....      BL       CPU_SR_Save
   \   000000A2   0x4680             MOV      R8,R0
    385                       CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0xe000e010
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0xe000e010
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    386                       CPU_CRITICAL_EXIT();
   \   000000B4   0x4640             MOV      R0,R8
   \   000000B6   0x.... 0x....      BL       CPU_SR_Restore
    387                       break;
   \   000000BA   0xE029             B.N      ??CPU_IntSrcEn_7
    388          
    389          
    390                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    391                  default:
    392                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcEn_6:
   \   000000BC   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0xe000e004
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x1C40             ADDS     R0,R0,#+1
   \   000000C4   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   000000C8   0x0140             LSLS     R0,R0,#+5
   \   000000CA   0x3010             ADDS     R0,R0,#+16
   \   000000CC   0x0007             MOVS     R7,R0
    393                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000D2   0x42BC             CMP      R4,R7
   \   000000D4   0xD21C             BCS.N    ??CPU_IntSrcEn_8
    394                           group = (pos - 16) / 32;
   \   000000D6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D8   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   000000DC   0x2120             MOVS     R1,#+32
   \   000000DE   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000E2   0x0005             MOVS     R5,R0
    395                           nbr   = (pos - 16) % 32;
   \   000000E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E6   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   000000EA   0x2120             MOVS     R1,#+32
   \   000000EC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000F0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000F4   0x0016             MOVS     R6,R2
    396          
    397                           CPU_CRITICAL_ENTER();
   \   000000F6   0x.... 0x....      BL       CPU_SR_Save
   \   000000FA   0x4680             MOV      R8,R0
    398                           CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0xe000e100
   \   00000102   0x2101             MOVS     R1,#+1
   \   00000104   0x40B1             LSLS     R1,R1,R6
   \   00000106   0xF840 0x1025      STR      R1,[R0, R5, LSL #+2]
    399                           CPU_CRITICAL_EXIT();
   \   0000010A   0x4640             MOV      R0,R8
   \   0000010C   0x.... 0x....      BL       CPU_SR_Restore
    400                       }
    401                       break;
    402              }
    403          }
   \                     ??CPU_IntSrcEn_8:
   \                     ??CPU_IntSrcEn_7:
   \   00000110   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    404          
    405          
    406          /*$PAGE*/
    407          /*
    408          *********************************************************************************************************
    409          *                                         CPU_IntSrcPrioSet()
    410          *
    411          * Description : Set priority of an interrupt source.
    412          *
    413          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    414          *
    415          *               prio    Priority.  Use a lower priority number for a higher priority.
    416          *
    417          * Return(s)   : none.
    418          *
    419          * Caller(s)   : Application.
    420          *
    421          * Note(s)     : (1) See 'CPU_IntSrcDis()  Note #1'.
    422          *
    423          *               (2) Several interrupts priorities CANNOT be set :
    424          *
    425          *                   (a) Reset (always -3).
    426          *                   (b) NMI (always -2).
    427          *                   (c) Hard fault (always -1).
    428          *
    429          *               (3) See 'CPU_IntSrcDis()  Note #3'.
    430          *********************************************************************************************************
    431          */
    432          

   \                                 In section .text, align 2, keep-with-next
    433          void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
    434                                   CPU_INT08U  prio)
    435          {
   \                     CPU_IntSrcPrioSet:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    436              CPU_INT08U  group;
    437              CPU_INT08U  nbr;
    438              CPU_INT08U  pos_max;
    439              CPU_INT32U  prio_32;
    440              CPU_INT32U  temp;
    441              CPU_SR_ALLOC();
   \   00000008   0xF05F 0x0B00      MOVS     R11,#+0
    442          
    443          
    444              prio_32 = CPU_RevBits((CPU_INT08U)prio);
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       CPU_RevBits
   \   00000014   0x4681             MOV      R9,R0
    445              prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
   \   00000016   0xEA5F 0x6019      LSRS     R0,R9,#+24
   \   0000001A   0x0005             MOVS     R5,R0
    446          
    447              switch (pos) {
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xD017             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xD016             BEQ.N    ??CPU_IntSrcPrioSet_1
   \   00000026   0xD315             BCC.N    ??CPU_IntSrcPrioSet_1
   \   00000028   0x2C04             CMP      R4,#+4
   \   0000002A   0xD014             BEQ.N    ??CPU_IntSrcPrioSet_2
   \   0000002C   0xD312             BCC.N    ??CPU_IntSrcPrioSet_1
   \   0000002E   0x2C06             CMP      R4,#+6
   \   00000030   0xD037             BEQ.N    ??CPU_IntSrcPrioSet_3
   \   00000032   0xD324             BCC.N    ??CPU_IntSrcPrioSet_4
   \   00000034   0x2C08             CMP      R4,#+8
   \   00000036   0xD00C             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   00000038   0xD30B             BCC.N    ??CPU_IntSrcPrioSet_0
   \   0000003A   0x2C0A             CMP      R4,#+10
   \   0000003C   0xD009             BEQ.N    ??CPU_IntSrcPrioSet_0
   \   0000003E   0xD308             BCC.N    ??CPU_IntSrcPrioSet_0
   \   00000040   0x2C0C             CMP      R4,#+12
   \   00000042   0xD054             BEQ.N    ??CPU_IntSrcPrioSet_5
   \   00000044   0xD33F             BCC.N    ??CPU_IntSrcPrioSet_6
   \   00000046   0x2C0E             CMP      R4,#+14
   \   00000048   0xD065             BEQ.N    ??CPU_IntSrcPrioSet_7
   \   0000004A   0xD302             BCC.N    ??CPU_IntSrcPrioSet_0
   \   0000004C   0x2C0F             CMP      R4,#+15
   \   0000004E   0xD074             BEQ.N    ??CPU_IntSrcPrioSet_8
   \   00000050   0xE087             B.N      ??CPU_IntSrcPrioSet_9
    448                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    449                  case CPU_INT_RSVD_07:
    450                  case CPU_INT_RSVD_08:
    451                  case CPU_INT_RSVD_09:
    452                  case CPU_INT_RSVD_10:
    453                  case CPU_INT_RSVD_13:
    454                       break;
   \                     ??CPU_IntSrcPrioSet_0:
   \   00000052   0xE0BF             B.N      ??CPU_IntSrcPrioSet_10
    455          
    456          
    457                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    458                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    459                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    460                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    461                       break;
   \                     ??CPU_IntSrcPrioSet_1:
   \   00000054   0xE0BE             B.N      ??CPU_IntSrcPrioSet_10
    462          
    463                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    464                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_2:
   \   00000056   0x.... 0x....      BL       CPU_SR_Save
   \   0000005A   0x4683             MOV      R11,R0
    465                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   0000005C   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x4682             MOV      R10,R0
    466                       temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
   \   00000062   0xEA5F 0x2A1A      LSRS     R10,R10,#+8
   \   00000066   0xEA5F 0x2A0A      LSLS     R10,R10,#+8
    467                       temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0xEA55 0x0A0A      ORRS     R10,R5,R10
    468                       CPU_REG_NVIC_SHPRI1  = temp;
   \   00000070   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   00000072   0xF8C0 0xA000      STR      R10,[R0, #+0]
    469                       CPU_CRITICAL_EXIT();
   \   00000076   0x4658             MOV      R0,R11
   \   00000078   0x.... 0x....      BL       CPU_SR_Restore
    470                       break;
   \   0000007C   0xE0AA             B.N      ??CPU_IntSrcPrioSet_10
    471          
    472                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    473                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_4:
   \   0000007E   0x.... 0x....      BL       CPU_SR_Save
   \   00000082   0x4683             MOV      R11,R0
    474                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   00000084   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x4682             MOV      R10,R0
    475                       temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
   \   0000008A   0xF43A 0x4A7F      BICS     R10,R10,#0xFF00
    476                       temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
   \   0000008E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000090   0xEA5A 0x2A05      ORRS     R10,R10,R5, LSL #+8
    477                       CPU_REG_NVIC_SHPRI1  = temp;
   \   00000094   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   00000096   0xF8C0 0xA000      STR      R10,[R0, #+0]
    478                       CPU_CRITICAL_EXIT();
   \   0000009A   0x4658             MOV      R0,R11
   \   0000009C   0x.... 0x....      BL       CPU_SR_Restore
    479                       break;
   \   000000A0   0xE098             B.N      ??CPU_IntSrcPrioSet_10
    480          
    481                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    482                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_3:
   \   000000A2   0x.... 0x....      BL       CPU_SR_Save
   \   000000A6   0x4683             MOV      R11,R0
    483                       temp                 = CPU_REG_NVIC_SHPRI1;
   \   000000A8   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x4682             MOV      R10,R0
    484                       temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
   \   000000AE   0xF43A 0x0A7F      BICS     R10,R10,#0xFF0000
    485                       temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
   \   000000B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B4   0xEA5A 0x4A05      ORRS     R10,R10,R5, LSL #+16
    486                       CPU_REG_NVIC_SHPRI1  = temp;
   \   000000B8   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   000000BA   0xF8C0 0xA000      STR      R10,[R0, #+0]
    487                       CPU_CRITICAL_EXIT();
   \   000000BE   0x4658             MOV      R0,R11
   \   000000C0   0x.... 0x....      BL       CPU_SR_Restore
    488                       break;
   \   000000C4   0xE086             B.N      ??CPU_IntSrcPrioSet_10
    489          
    490                  case CPU_INT_SVCALL:                                    /* SVCall.                                              */
    491                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_6:
   \   000000C6   0x.... 0x....      BL       CPU_SR_Save
   \   000000CA   0x4683             MOV      R11,R0
    492                       temp                 = CPU_REG_NVIC_SHPRI2;
   \   000000CC   0x....             LDR.N    R0,??DataTable5_8  ;; 0xe000ed1c
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x4682             MOV      R10,R0
    493                       temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
   \   000000D2   0xEA5F 0x2A0A      LSLS     R10,R10,#+8      ;; ZeroExtS R10,R10,#+8,#+8
   \   000000D6   0xEA5F 0x2A1A      LSRS     R10,R10,#+8
    494                       temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
   \   000000DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DC   0xEA5A 0x6A05      ORRS     R10,R10,R5, LSL #+24
    495                       CPU_REG_NVIC_SHPRI2  = temp;
   \   000000E0   0x....             LDR.N    R0,??DataTable5_8  ;; 0xe000ed1c
   \   000000E2   0xF8C0 0xA000      STR      R10,[R0, #+0]
    496                       CPU_CRITICAL_EXIT();
   \   000000E6   0x4658             MOV      R0,R11
   \   000000E8   0x.... 0x....      BL       CPU_SR_Restore
    497                       break;
   \   000000EC   0xE072             B.N      ??CPU_IntSrcPrioSet_10
    498          
    499                  case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
    500                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_5:
   \   000000EE   0x.... 0x....      BL       CPU_SR_Save
   \   000000F2   0x4683             MOV      R11,R0
    501                       temp                = CPU_REG_NVIC_SHPRI3;
   \   000000F4   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   000000F6   0x6800             LDR      R0,[R0, #+0]
   \   000000F8   0x4682             MOV      R10,R0
    502                       temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
   \   000000FA   0xEA5F 0x2A1A      LSRS     R10,R10,#+8
   \   000000FE   0xEA5F 0x2A0A      LSLS     R10,R10,#+8
    503                       temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
   \   00000102   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000104   0xEA55 0x0A0A      ORRS     R10,R5,R10
    504                       CPU_REG_NVIC_SHPRI3  = temp;
   \   00000108   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   0000010A   0xF8C0 0xA000      STR      R10,[R0, #+0]
    505                       CPU_CRITICAL_EXIT();
   \   0000010E   0x4658             MOV      R0,R11
   \   00000110   0x.... 0x....      BL       CPU_SR_Restore
    506                       break;
   \   00000114   0xE05E             B.N      ??CPU_IntSrcPrioSet_10
    507          
    508                  case CPU_INT_PENDSV:                                    /* PendSV.                                              */
    509                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_7:
   \   00000116   0x.... 0x....      BL       CPU_SR_Save
   \   0000011A   0x4683             MOV      R11,R0
    510                       temp                 = CPU_REG_NVIC_SHPRI3;
   \   0000011C   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   0000011E   0x6800             LDR      R0,[R0, #+0]
   \   00000120   0x4682             MOV      R10,R0
    511                       temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
   \   00000122   0xF43A 0x0A7F      BICS     R10,R10,#0xFF0000
    512                       temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
   \   00000126   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000128   0xEA5A 0x4A05      ORRS     R10,R10,R5, LSL #+16
    513                       CPU_REG_NVIC_SHPRI3  = temp;
   \   0000012C   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   0000012E   0xF8C0 0xA000      STR      R10,[R0, #+0]
    514                       CPU_CRITICAL_EXIT();
   \   00000132   0x4658             MOV      R0,R11
   \   00000134   0x.... 0x....      BL       CPU_SR_Restore
    515                       break;
   \   00000138   0xE04C             B.N      ??CPU_IntSrcPrioSet_10
    516          
    517                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    518                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioSet_8:
   \   0000013A   0x.... 0x....      BL       CPU_SR_Save
   \   0000013E   0x4683             MOV      R11,R0
    519                       temp                 = CPU_REG_NVIC_SHPRI3;
   \   00000140   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   00000142   0x6800             LDR      R0,[R0, #+0]
   \   00000144   0x4682             MOV      R10,R0
    520                       temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
   \   00000146   0xEA5F 0x2A0A      LSLS     R10,R10,#+8      ;; ZeroExtS R10,R10,#+8,#+8
   \   0000014A   0xEA5F 0x2A1A      LSRS     R10,R10,#+8
    521                       temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
   \   0000014E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000150   0xEA5A 0x6A05      ORRS     R10,R10,R5, LSL #+24
    522                       CPU_REG_NVIC_SHPRI3  = temp;
   \   00000154   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   00000156   0xF8C0 0xA000      STR      R10,[R0, #+0]
    523                       CPU_CRITICAL_EXIT();
   \   0000015A   0x4658             MOV      R0,R11
   \   0000015C   0x.... 0x....      BL       CPU_SR_Restore
    524                       break;
   \   00000160   0xE038             B.N      ??CPU_IntSrcPrioSet_10
    525          
    526          
    527                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    528                  default:
    529                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcPrioSet_9:
   \   00000162   0x....             LDR.N    R0,??DataTable5_4  ;; 0xe000e004
   \   00000164   0x6800             LDR      R0,[R0, #+0]
   \   00000166   0x1C40             ADDS     R0,R0,#+1
   \   00000168   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000016C   0x0140             LSLS     R0,R0,#+5
   \   0000016E   0x3010             ADDS     R0,R0,#+16
   \   00000170   0x4680             MOV      R8,R0
    530                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   00000172   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000174   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000178   0x4544             CMP      R4,R8
   \   0000017A   0xD22B             BCS.N    ??CPU_IntSrcPrioSet_11
    531                           group                    = (pos - 16) / 4;
   \   0000017C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000017E   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   00000182   0x2104             MOVS     R1,#+4
   \   00000184   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000188   0x0006             MOVS     R6,R0
    532                           nbr                      = (pos - 16) % 4;
   \   0000018A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000018C   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   00000190   0x2104             MOVS     R1,#+4
   \   00000192   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000196   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000019A   0x0017             MOVS     R7,R2
    533          
    534                           CPU_CRITICAL_ENTER();
   \   0000019C   0x.... 0x....      BL       CPU_SR_Save
   \   000001A0   0x4683             MOV      R11,R0
    535                           temp                     = CPU_REG_NVIC_PRIO(group);
   \   000001A2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001A4   0x....             LDR.N    R0,??DataTable5_10  ;; 0xe000e400
   \   000001A6   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000001AA   0x4682             MOV      R10,R0
    536                           temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
   \   000001AC   0x20FF             MOVS     R0,#+255
   \   000001AE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001B0   0x00F9             LSLS     R1,R7,#+3
   \   000001B2   0x4088             LSLS     R0,R0,R1
   \   000001B4   0xEA3A 0x0A00      BICS     R10,R10,R0
    537                           temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
   \   000001B8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001BA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000001BC   0x00F8             LSLS     R0,R7,#+3
   \   000001BE   0xFA15 0xF000      LSLS     R0,R5,R0
   \   000001C2   0xEA50 0x0A0A      ORRS     R10,R0,R10
    538                           CPU_REG_NVIC_PRIO(group) = temp;
   \   000001C6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001C8   0x....             LDR.N    R0,??DataTable5_10  ;; 0xe000e400
   \   000001CA   0xF840 0xA026      STR      R10,[R0, R6, LSL #+2]
    539                           CPU_CRITICAL_EXIT();
   \   000001CE   0x4658             MOV      R0,R11
   \   000001D0   0x.... 0x....      BL       CPU_SR_Restore
    540                       }
    541                       break;
    542              }
    543          }
   \                     ??CPU_IntSrcPrioSet_11:
   \                     ??CPU_IntSrcPrioSet_10:
   \   000001D4   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    544          
    545          
    546          /*$PAGE*/
    547          /*
    548          *********************************************************************************************************
    549          *                                         CPU_IntSrcPrioGet()
    550          *
    551          * Description : Get priority of an interrupt source.
    552          *
    553          * Argument(s) : pos     Position of interrupt vector in interrupt table (see 'CPU_IntSrcDis()').
    554          *
    555          * Return(s)   : Priority of interrupt source.  If the interrupt source specified is invalid, then
    556          *               DEF_INT_16S_MIN_VAL is returned.
    557          *
    558          * Caller(s)   : Application.
    559          *
    560          * Note(s)     : (1) See 'CPU_IntSrcDis()      Note #1'.
    561          *
    562          *               (2) See 'CPU_IntSrcPrioSet()  Note #2'.
    563          *
    564          *               (3) See 'CPU_IntSrcDis()      Note #3'.
    565          *********************************************************************************************************
    566          */
    567          

   \                                 In section .text, align 2, keep-with-next
    568          CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
    569          {
   \                     CPU_IntSrcPrioGet:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
    570              CPU_INT08U  group;
    571              CPU_INT08U  nbr;
    572              CPU_INT08U  pos_max;
    573              CPU_INT16S  prio;
    574              CPU_INT32U  prio_32;
    575              CPU_INT32U  temp;
    576              CPU_SR_ALLOC();
   \   00000006   0xF05F 0x0B00      MOVS     R11,#+0
    577          
    578          
    579              switch (pos) {
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD017             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   00000010   0x2C02             CMP      R4,#+2
   \   00000012   0xD01C             BEQ.N    ??CPU_IntSrcPrioGet_1
   \   00000014   0xD317             BCC.N    ??CPU_IntSrcPrioGet_2
   \   00000016   0x2C04             CMP      R4,#+4
   \   00000018   0xD021             BEQ.N    ??CPU_IntSrcPrioGet_3
   \   0000001A   0xD31C             BCC.N    ??CPU_IntSrcPrioGet_4
   \   0000001C   0x2C06             CMP      R4,#+6
   \   0000001E   0xD038             BEQ.N    ??CPU_IntSrcPrioGet_5
   \   00000020   0xD32A             BCC.N    ??CPU_IntSrcPrioGet_6
   \   00000022   0x2C08             CMP      R4,#+8
   \   00000024   0xD00C             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   00000026   0xD30B             BCC.N    ??CPU_IntSrcPrioGet_0
   \   00000028   0x2C0A             CMP      R4,#+10
   \   0000002A   0xD009             BEQ.N    ??CPU_IntSrcPrioGet_0
   \   0000002C   0xD308             BCC.N    ??CPU_IntSrcPrioGet_0
   \   0000002E   0x2C0C             CMP      R4,#+12
   \   00000030   0xD047             BEQ.N    ??CPU_IntSrcPrioGet_7
   \   00000032   0xD339             BCC.N    ??CPU_IntSrcPrioGet_8
   \   00000034   0x2C0E             CMP      R4,#+14
   \   00000036   0xD051             BEQ.N    ??CPU_IntSrcPrioGet_9
   \   00000038   0xD302             BCC.N    ??CPU_IntSrcPrioGet_0
   \   0000003A   0x2C0F             CMP      R4,#+15
   \   0000003C   0xD05C             BEQ.N    ??CPU_IntSrcPrioGet_10
   \   0000003E   0xE068             B.N      ??CPU_IntSrcPrioGet_11
    580                  case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
    581                  case CPU_INT_RSVD_07:
    582                  case CPU_INT_RSVD_08:
    583                  case CPU_INT_RSVD_09:
    584                  case CPU_INT_RSVD_10:
    585                  case CPU_INT_RSVD_13:
    586                       prio = DEF_INT_16S_MIN_VAL;
   \                     ??CPU_IntSrcPrioGet_0:
   \   00000040   0x....             LDR.N    R0,??DataTable5_11  ;; 0xffff8000
   \   00000042   0x4680             MOV      R8,R0
    587                       break;
   \   00000044   0xE095             B.N      ??CPU_IntSrcPrioGet_12
    588          
    589          
    590                                                                          /* ----------------- SYSTEM EXCEPTIONS ---------------- */
    591                  case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
    592                       prio = -3;
   \                     ??CPU_IntSrcPrioGet_2:
   \   00000046   0xF07F 0x0002      MVNS     R0,#+2
   \   0000004A   0x4680             MOV      R8,R0
    593                       break;
   \   0000004C   0xE091             B.N      ??CPU_IntSrcPrioGet_12
    594          
    595                  case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
    596                       prio = -2;
   \                     ??CPU_IntSrcPrioGet_1:
   \   0000004E   0xF07F 0x0001      MVNS     R0,#+1
   \   00000052   0x4680             MOV      R8,R0
    597                       break;
   \   00000054   0xE08D             B.N      ??CPU_IntSrcPrioGet_12
    598          
    599                  case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
    600                       prio = -1;
   \                     ??CPU_IntSrcPrioGet_4:
   \   00000056   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000005A   0x4680             MOV      R8,R0
    601                       break;
   \   0000005C   0xE089             B.N      ??CPU_IntSrcPrioGet_12
    602          
    603          
    604                  case CPU_INT_MEM:                                       /* Memory management.                                   */
    605                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_3:
   \   0000005E   0x.... 0x....      BL       CPU_SR_Save
   \   00000062   0x4683             MOV      R11,R0
    606                       temp = CPU_REG_NVIC_SHPRI1;
   \   00000064   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x4682             MOV      R10,R0
    607                       prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   0000006A   0xF01A 0x00FF      ANDS     R0,R10,#0xFF
   \   0000006E   0x4680             MOV      R8,R0
    608                       CPU_CRITICAL_EXIT();
   \   00000070   0x4658             MOV      R0,R11
   \   00000072   0x.... 0x....      BL       CPU_SR_Restore
    609                       break;
   \   00000076   0xE07C             B.N      ??CPU_IntSrcPrioGet_12
    610          
    611          
    612                  case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
    613                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_6:
   \   00000078   0x.... 0x....      BL       CPU_SR_Save
   \   0000007C   0x4683             MOV      R11,R0
    614                       temp = CPU_REG_NVIC_SHPRI1;
   \   0000007E   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x4682             MOV      R10,R0
    615                       prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   00000084   0xF3CA 0x2007      UBFX     R0,R10,#+8,#+8
   \   00000088   0x4680             MOV      R8,R0
    616                       CPU_CRITICAL_EXIT();
   \   0000008A   0x4658             MOV      R0,R11
   \   0000008C   0x.... 0x....      BL       CPU_SR_Restore
    617                       break;
   \   00000090   0xE06F             B.N      ??CPU_IntSrcPrioGet_12
    618          
    619          
    620                  case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
    621                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_5:
   \   00000092   0x.... 0x....      BL       CPU_SR_Save
   \   00000096   0x4683             MOV      R11,R0
    622                       temp = CPU_REG_NVIC_SHPRI1;
   \   00000098   0x....             LDR.N    R0,??DataTable5_7  ;; 0xe000ed18
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x4682             MOV      R10,R0
    623                       prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   0000009E   0xEA5F 0x401A      LSRS     R0,R10,#+16
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x4680             MOV      R8,R0
    624                       break;
   \   000000A6   0xE064             B.N      ??CPU_IntSrcPrioGet_12
    625          
    626                  case CPU_INT_SVCALL:                                    /* SVCall.                                              */
    627                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_8:
   \   000000A8   0x.... 0x....      BL       CPU_SR_Save
   \   000000AC   0x4683             MOV      R11,R0
    628                       temp = CPU_REG_NVIC_SHPRI2;
   \   000000AE   0x....             LDR.N    R0,??DataTable5_8  ;; 0xe000ed1c
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x4682             MOV      R10,R0
    629                       prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000B4   0xEA5F 0x601A      LSRS     R0,R10,#+24
   \   000000B8   0x4680             MOV      R8,R0
    630                       CPU_CRITICAL_EXIT();
   \   000000BA   0x4658             MOV      R0,R11
   \   000000BC   0x.... 0x....      BL       CPU_SR_Restore
    631                       break;
   \   000000C0   0xE057             B.N      ??CPU_IntSrcPrioGet_12
    632          
    633                  case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
    634                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_7:
   \   000000C2   0x.... 0x....      BL       CPU_SR_Save
   \   000000C6   0x4683             MOV      R11,R0
    635                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000C8   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x4682             MOV      R10,R0
    636                       prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000CE   0xF01A 0x00FF      ANDS     R0,R10,#0xFF
   \   000000D2   0x4680             MOV      R8,R0
    637                       CPU_CRITICAL_EXIT();
   \   000000D4   0x4658             MOV      R0,R11
   \   000000D6   0x.... 0x....      BL       CPU_SR_Restore
    638                       break;
   \   000000DA   0xE04A             B.N      ??CPU_IntSrcPrioGet_12
    639          
    640                  case CPU_INT_PENDSV:                                    /* PendSV.                                              */
    641                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_9:
   \   000000DC   0x.... 0x....      BL       CPU_SR_Save
   \   000000E0   0x4683             MOV      R11,R0
    642                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000E2   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x4682             MOV      R10,R0
    643                       prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   000000E8   0xEA5F 0x401A      LSRS     R0,R10,#+16
   \   000000EC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EE   0x4680             MOV      R8,R0
    644                       CPU_CRITICAL_EXIT();
   \   000000F0   0x4658             MOV      R0,R11
   \   000000F2   0x.... 0x....      BL       CPU_SR_Restore
    645                       break;
   \   000000F6   0xE03C             B.N      ??CPU_IntSrcPrioGet_12
    646          
    647                  case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
    648                       CPU_CRITICAL_ENTER();
   \                     ??CPU_IntSrcPrioGet_10:
   \   000000F8   0x.... 0x....      BL       CPU_SR_Save
   \   000000FC   0x4683             MOV      R11,R0
    649                       temp = CPU_REG_NVIC_SHPRI3;
   \   000000FE   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed20
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x4682             MOV      R10,R0
    650                       prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   00000104   0xEA5F 0x601A      LSRS     R0,R10,#+24
   \   00000108   0x4680             MOV      R8,R0
    651                       CPU_CRITICAL_EXIT();
   \   0000010A   0x4658             MOV      R0,R11
   \   0000010C   0x.... 0x....      BL       CPU_SR_Restore
    652                       break;
   \   00000110   0xE02F             B.N      ??CPU_IntSrcPrioGet_12
    653          
    654          
    655                                                                          /* ---------------- EXTERNAL INTERRUPT ---------------- */
    656                  default:
    657                      pos_max = CPU_INT_SRC_POS_MAX;
   \                     ??CPU_IntSrcPrioGet_11:
   \   00000112   0x....             LDR.N    R0,??DataTable5_4  ;; 0xe000e004
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \   00000118   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000011C   0x0140             LSLS     R0,R0,#+5
   \   0000011E   0x3010             ADDS     R0,R0,#+16
   \   00000120   0x0007             MOVS     R7,R0
    658                      if (pos < pos_max) {                                /* See Note #3.                                         */
   \   00000122   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000124   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000126   0x42BC             CMP      R4,R7
   \   00000128   0xD221             BCS.N    ??CPU_IntSrcPrioGet_13
    659                           group = (pos - 16) / 4;
   \   0000012A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012C   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   00000130   0x2104             MOVS     R1,#+4
   \   00000132   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000136   0x0005             MOVS     R5,R0
    660                           nbr   = (pos - 16) % 4;
   \   00000138   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000013A   0xF1B4 0x0010      SUBS     R0,R4,#+16
   \   0000013E   0x2104             MOVS     R1,#+4
   \   00000140   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000144   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000148   0x0016             MOVS     R6,R2
    661          
    662                           CPU_CRITICAL_ENTER();
   \   0000014A   0x.... 0x....      BL       CPU_SR_Save
   \   0000014E   0x4683             MOV      R11,R0
    663                           temp  = CPU_REG_NVIC_PRIO(group);
   \   00000150   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000152   0x....             LDR.N    R0,??DataTable5_10  ;; 0xe000e400
   \   00000154   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000158   0x4682             MOV      R10,R0
    664                           CPU_CRITICAL_EXIT();
   \   0000015A   0x4658             MOV      R0,R11
   \   0000015C   0x.... 0x....      BL       CPU_SR_Restore
    665          
    666                           prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
   \   00000160   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000162   0x00F0             LSLS     R0,R6,#+3
   \   00000164   0xFA3A 0xF000      LSRS     R0,R10,R0
   \   00000168   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000016A   0x4680             MOV      R8,R0
   \   0000016C   0xE001             B.N      ??CPU_IntSrcPrioGet_14
    667                       } else {
    668                           prio  = DEF_INT_16S_MIN_VAL;
   \                     ??CPU_IntSrcPrioGet_13:
   \   0000016E   0x....             LDR.N    R0,??DataTable5_11  ;; 0xffff8000
   \   00000170   0x4680             MOV      R8,R0
    669                       }
    670                       break;
    671              }
    672          
    673              if (prio >= 0) {
   \                     ??CPU_IntSrcPrioGet_14:
   \                     ??CPU_IntSrcPrioGet_12:
   \   00000172   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000176   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000017A   0xD408             BMI.N    ??CPU_IntSrcPrioGet_15
    674                  prio_32 = CPU_RevBits((CPU_INT32U)prio);
   \   0000017C   0xFA0F 0xF888      SXTH     R8,R8            ;; SignExt  R8,R8,#+16,#+16
   \   00000180   0x4640             MOV      R0,R8
   \   00000182   0x.... 0x....      BL       CPU_RevBits
   \   00000186   0x4681             MOV      R9,R0
    675                  prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
   \   00000188   0xEA5F 0x6019      LSRS     R0,R9,#+24
   \   0000018C   0x4680             MOV      R8,R0
    676              }
    677          
    678              return (prio);
   \                     ??CPU_IntSrcPrioGet_15:
   \   0000018E   0x4640             MOV      R0,R8
   \   00000190   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000192   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    679          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x20100000         DC32     0x20100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40100000         DC32     0x40100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000ED24         DC32     0xe000ed24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E004         DC32     0xe000e004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000ED18         DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0xFFFF8000         DC32     0xffff8000
    680          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CPU_BitBandClr
       8   CPU_BitBandSet
      24   CPU_IntSrcDis
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
      24   CPU_IntSrcEn
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
      40   CPU_IntSrcPrioGet
        40   -> CPU_RevBits
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save
      40   CPU_IntSrcPrioSet
        40   -> CPU_RevBits
        40   -> CPU_SR_Restore
        40   -> CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      84  CPU_BitBandClr
      84  CPU_BitBandSet
     276  CPU_IntSrcDis
     276  CPU_IntSrcEn
     406  CPU_IntSrcPrioGet
     472  CPU_IntSrcPrioSet

 
 1 646 bytes in section .text
 
 1 646 bytes of CODE memory

Errors: none
Warnings: none
