###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      26/Mar/2017  12:36:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\fcvt.c                 #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\fcvt.c -lCN            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\fcvt.lst #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\fcvt.o    #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\HuaceApp\fcvt.c
      1          /**************************Copyright (C) 2003-2014. All rights reserved*********************************
      2          **                                  上海华测导航科技有限公司
      3          **                                  http://www.huace.cn
      4          **                                  Email:support@huace.cn
      5          **
      6          **--------------文件信息--------------------------------------------------------------------------------
      7          **文   件   名: fcvt.c
      8          **创   建   人:
      9          **最后修改日期: 2014年08月12日
     10          **描        述:
     11          ********************************************************************************************************/
     12          
     13          #include "includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     14          
     15          #define ZEROPAD 1               // Pad with zero
     16          #define SIGN    2               // Unsigned/signed long
     17          #define PLUS    4               // Show plus
     18          #define SPACE   8               // Space if plus
     19          #define LEFT    16              // Left justified
     20          #define SPECIAL 32              // 0x
     21          #define LARGE   64              // Use 'ABCDEF' instead of 'abcdef'
     22          
     23          #define is_digit(c) ((c) >= '0' && (c) <= '9')
     24          

   \                                 In section .text, align 2, keep-with-next
     25          static char * cvt( double arg, int ndigits, int * decpt, int * sign, char * buf, int eflag )
     26          {
   \                     cvt:
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x469B             MOV      R11,R3
   \   0000000C   0xF8DD 0x903C      LDR      R9,[SP, #+60]
     27              int r2;
     28              double fi, fj;
     29              char * p, * p1;
     30          
     31              if ( ndigits < 0 ) ndigits = 0;
   \   00000010   0x9804             LDR      R0,[SP, #+16]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD501             BPL.N    ??cvt_0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9004             STR      R0,[SP, #+16]
     32              if ( ndigits >= CVTBUFSIZE - 1 ) ndigits = CVTBUFSIZE - 2;
   \                     ??cvt_0:
   \   0000001A   0x9804             LDR      R0,[SP, #+16]
   \   0000001C   0x283F             CMP      R0,#+63
   \   0000001E   0xDB01             BLT.N    ??cvt_1
   \   00000020   0x203E             MOVS     R0,#+62
   \   00000022   0x9004             STR      R0,[SP, #+16]
     33              r2 = 0;
   \                     ??cvt_1:
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4680             MOV      R8,R0
     34              * sign = 0;
   \   00000028   0x980E             LDR      R0,[SP, #+56]
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x6001             STR      R1,[R0, #+0]
     35              p = & buf[0];
   \   0000002E   0x464E             MOV      R6,R9
     36              if ( arg < 0 )
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000003C   0xD204             BCS.N    ??cvt_2
     37              {
     38                  * sign = 1;
   \   0000003E   0x980E             LDR      R0,[SP, #+56]
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x6001             STR      R1,[R0, #+0]
     39                  arg = - arg;
   \   00000044   0xF095 0x4500      EORS     R5,R5,#0x80000000
     40              }
     41              arg = modf( arg, & fi );
   \                     ??cvt_2:
   \   00000048   0xAA02             ADD      R2,SP,#+8
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x.... 0x....      BL       modf
   \   00000052   0x0004             MOVS     R4,R0
   \   00000054   0x000D             MOVS     R5,R1
     42              p1 = & buf[CVTBUFSIZE];
   \   00000056   0xF119 0x0040      ADDS     R0,R9,#+64
   \   0000005A   0x0007             MOVS     R7,R0
     43          
     44              if ( fi != 0 )
   \   0000005C   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x.... 0x....      BL       __aeabi_cdcmpeq
   \   00000068   0xD031             BEQ.N    ??cvt_3
     45              {
     46                  p1 = & buf[CVTBUFSIZE];
   \   0000006A   0xF119 0x0040      ADDS     R0,R9,#+64
   \   0000006E   0x0007             MOVS     R7,R0
     47                  while ( fi != 0 )
   \                     ??cvt_4:
   \   00000070   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x.... 0x....      BL       __aeabi_cdcmpeq
   \   0000007C   0xD01E             BEQ.N    ??cvt_5
     48                  {
     49                      fj = modf( fi / 10, & fi );
   \   0000007E   0xAA02             ADD      R2,SP,#+8
   \   00000080   0x4692             MOV      R10,R2
   \   00000082   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   00000086   0x2200             MOVS     R2,#+0
   \   00000088   0x....             LDR.N    R3,??DataTable0  ;; 0x40240000
   \   0000008A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000008E   0x4652             MOV      R2,R10
   \   00000090   0x.... 0x....      BL       modf
   \   00000094   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
     50                      *-- p1 = ( int )(( fj + .03 ) * 10 ) + '0';
   \   00000098   0x1E7F             SUBS     R7,R7,#+1
   \   0000009A   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000009E   0x....             LDR.N    R0,??DataTable0_1  ;; 0xeb851eb8
   \   000000A0   0x....             LDR.N    R1,??DataTable0_2  ;; 0x3f9eb851
   \   000000A2   0x.... 0x....      BL       __aeabi_dadd
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0x....             LDR.N    R3,??DataTable0  ;; 0x40240000
   \   000000AA   0x.... 0x....      BL       __aeabi_dmul
   \   000000AE   0x.... 0x....      BL       __aeabi_d2iz
   \   000000B2   0x3030             ADDS     R0,R0,#+48
   \   000000B4   0x7038             STRB     R0,[R7, #+0]
     51                      r2 ++;
   \   000000B6   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000BA   0xE7D9             B.N      ??cvt_4
     52                  }
     53                  while ( p1 < & buf[CVTBUFSIZE] ) * p ++ = * p1 ++;
   \                     ??cvt_5:
   \   000000BC   0xF119 0x0040      ADDS     R0,R9,#+64
   \   000000C0   0x4287             CMP      R7,R0
   \   000000C2   0xD21F             BCS.N    ??cvt_6
   \   000000C4   0x7838             LDRB     R0,[R7, #+0]
   \   000000C6   0x7030             STRB     R0,[R6, #+0]
   \   000000C8   0x1C7F             ADDS     R7,R7,#+1
   \   000000CA   0x1C76             ADDS     R6,R6,#+1
   \   000000CC   0xE7F6             B.N      ??cvt_5
     54              }
     55              else if ( arg > 0 )
   \                     ??cvt_3:
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x0029             MOVS     R1,R5
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x2300             MOVS     R3,#+0
   \   000000D6   0x.... 0x....      BL       __aeabi_cdrcmple
   \   000000DA   0xD213             BCS.N    ??cvt_6
     56              {
     57                  while (( fj = arg * 10 ) < 1 )
   \                     ??cvt_7:
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x....             LDR.N    R1,??DataTable0  ;; 0x40240000
   \   000000E0   0x0022             MOVS     R2,R4
   \   000000E2   0x002B             MOVS     R3,R5
   \   000000E4   0x.... 0x....      BL       __aeabi_dmul
   \   000000E8   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000EC   0x2200             MOVS     R2,#+0
   \   000000EE   0x....             LDR.N    R3,??DataTable0_3  ;; 0x3ff00000
   \   000000F0   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000F4   0xD206             BCS.N    ??cvt_6
     58                  {
     59                      arg = fj;
   \   000000F6   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   000000FA   0x0004             MOVS     R4,R0
   \   000000FC   0x000D             MOVS     R5,R1
     60                      r2 --;
   \   000000FE   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   00000102   0xE7EB             B.N      ??cvt_7
     61                  }
     62              }
     63              p1 = & buf[ndigits];
   \                     ??cvt_6:
   \   00000104   0x9804             LDR      R0,[SP, #+16]
   \   00000106   0xEB10 0x0009      ADDS     R0,R0,R9
   \   0000010A   0x0007             MOVS     R7,R0
     64              if ( eflag == 0 ) p1 += r2;
   \   0000010C   0x9810             LDR      R0,[SP, #+64]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD101             BNE.N    ??cvt_8
   \   00000112   0xEB18 0x0707      ADDS     R7,R8,R7
     65              * decpt = r2;
   \                     ??cvt_8:
   \   00000116   0xF8CB 0x8000      STR      R8,[R11, #+0]
     66              if ( p1 < & buf[0] )
   \   0000011A   0x454F             CMP      R7,R9
   \   0000011C   0xD204             BCS.N    ??cvt_9
     67              {
     68                  buf[0] = '\0';
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xF889 0x0000      STRB     R0,[R9, #+0]
     69                  return buf;
   \   00000124   0x4648             MOV      R0,R9
   \   00000126   0xE048             B.N      ??cvt_10
     70              }
     71              while ( p <= p1 && p < & buf[CVTBUFSIZE] )
   \                     ??cvt_9:
   \   00000128   0x42B7             CMP      R7,R6
   \   0000012A   0xD31A             BCC.N    ??cvt_11
   \   0000012C   0xF119 0x0040      ADDS     R0,R9,#+64
   \   00000130   0x4286             CMP      R6,R0
   \   00000132   0xD216             BCS.N    ??cvt_11
     72              {
     73                  arg *= 10;
   \   00000134   0x0020             MOVS     R0,R4
   \   00000136   0x0029             MOVS     R1,R5
   \   00000138   0x2200             MOVS     R2,#+0
   \   0000013A   0x....             LDR.N    R3,??DataTable0  ;; 0x40240000
   \   0000013C   0x.... 0x....      BL       __aeabi_dmul
   \   00000140   0x0004             MOVS     R4,R0
   \   00000142   0x000D             MOVS     R5,R1
     74                  arg = modf( arg, & fj );
   \   00000144   0xAA00             ADD      R2,SP,#+0
   \   00000146   0x0020             MOVS     R0,R4
   \   00000148   0x0029             MOVS     R1,R5
   \   0000014A   0x.... 0x....      BL       modf
   \   0000014E   0x0004             MOVS     R4,R0
   \   00000150   0x000D             MOVS     R5,R1
     75                  * p ++ = ( int ) fj + '0';
   \   00000152   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000156   0x.... 0x....      BL       __aeabi_d2iz
   \   0000015A   0x3030             ADDS     R0,R0,#+48
   \   0000015C   0x7030             STRB     R0,[R6, #+0]
   \   0000015E   0x1C76             ADDS     R6,R6,#+1
   \   00000160   0xE7E2             B.N      ??cvt_9
     76              }
     77              if ( p1 >= & buf[CVTBUFSIZE] )
   \                     ??cvt_11:
   \   00000162   0xF119 0x0040      ADDS     R0,R9,#+64
   \   00000166   0x4287             CMP      R7,R0
   \   00000168   0xD304             BCC.N    ??cvt_12
     78              {
     79                  buf[CVTBUFSIZE - 1] = '\0';
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0xF889 0x003F      STRB     R0,[R9, #+63]
     80                  return buf;
   \   00000170   0x4648             MOV      R0,R9
   \   00000172   0xE022             B.N      ??cvt_10
     81              }
     82              p = p1;
   \                     ??cvt_12:
   \   00000174   0x003E             MOVS     R6,R7
     83              * p1 += 5;
   \   00000176   0x7838             LDRB     R0,[R7, #+0]
   \   00000178   0x1D40             ADDS     R0,R0,#+5
   \   0000017A   0x7038             STRB     R0,[R7, #+0]
     84              while (* p1 > '9' )
   \                     ??cvt_13:
   \   0000017C   0x7838             LDRB     R0,[R7, #+0]
   \   0000017E   0x283A             CMP      R0,#+58
   \   00000180   0xDB18             BLT.N    ??cvt_14
     85              {
     86                  * p1 = '0';
   \   00000182   0x2030             MOVS     R0,#+48
   \   00000184   0x7038             STRB     R0,[R7, #+0]
     87                  if ( p1 > buf )
   \   00000186   0x45B9             CMP      R9,R7
   \   00000188   0xD204             BCS.N    ??cvt_15
     88                      ++*-- p1;
   \   0000018A   0x1E7F             SUBS     R7,R7,#+1
   \   0000018C   0x7838             LDRB     R0,[R7, #+0]
   \   0000018E   0x1C40             ADDS     R0,R0,#+1
   \   00000190   0x7038             STRB     R0,[R7, #+0]
   \   00000192   0xE7F3             B.N      ??cvt_13
     89                  else
     90                  {
     91                      * p1 = '1';
   \                     ??cvt_15:
   \   00000194   0x2031             MOVS     R0,#+49
   \   00000196   0x7038             STRB     R0,[R7, #+0]
     92                      (* decpt )++;
   \   00000198   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   0000019C   0x1C40             ADDS     R0,R0,#+1
   \   0000019E   0xF8CB 0x0000      STR      R0,[R11, #+0]
     93                      if ( eflag == 0 )
   \   000001A2   0x9810             LDR      R0,[SP, #+64]
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD1E9             BNE.N    ??cvt_13
     94                      {
     95                          if ( p > buf ) * p = '0';
   \   000001A8   0x45B1             CMP      R9,R6
   \   000001AA   0xD201             BCS.N    ??cvt_16
   \   000001AC   0x2030             MOVS     R0,#+48
   \   000001AE   0x7030             STRB     R0,[R6, #+0]
     96                          p ++;
   \                     ??cvt_16:
   \   000001B0   0x1C76             ADDS     R6,R6,#+1
   \   000001B2   0xE7E3             B.N      ??cvt_13
     97                      }
     98                  }
     99              }
    100              * p = '\0';
   \                     ??cvt_14:
   \   000001B4   0x2000             MOVS     R0,#+0
   \   000001B6   0x7030             STRB     R0,[R6, #+0]
    101              return buf;
   \   000001B8   0x4648             MOV      R0,R9
   \                     ??cvt_10:
   \   000001BA   0xB005             ADD      SP,SP,#+20
   \   000001BC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    102          }
    103          
    104          /*char *ecvt(double arg, int ndigits, int *decpt, int *sign)
    105          {
    106          return cvt(arg, ndigits, decpt, sign, gettib()->cvtbuf, 1);
    107          }*/
    108          

   \                                 In section .text, align 2, keep-with-next
    109          char * ecvtbuf( double arg, int ndigits, int * decpt, int * sign, char * buf )
    110          {
   \                     ecvtbuf:
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \   00000010   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    111              return cvt( arg, ndigits, decpt, sign, buf, 1 );
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9002             STR      R0,[SP, #+8]
   \   00000018   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   0000001C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000020   0x003B             MOVS     R3,R7
   \   00000022   0x0032             MOVS     R2,R6
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x.... 0x....      BL       cvt
   \   0000002C   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    112          }
    113          
    114          /*char *fcvt(double arg, int ndigits, int *decpt, int *sign)
    115          {
    116          return cvt(arg, ndigits, decpt, sign, gettib()->cvtbuf, 0);
    117          }*/
    118          

   \                                 In section .text, align 2, keep-with-next
    119          char * fcvtbuf( double arg, int ndigits, int * decpt, int * sign, char * buf )
    120          {
   \                     fcvtbuf:
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \   00000010   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    121              return cvt( arg, ndigits, decpt, sign, buf, 0 );
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9002             STR      R0,[SP, #+8]
   \   00000018   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   0000001C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000020   0x003B             MOVS     R3,R7
   \   00000022   0x0032             MOVS     R2,R6
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x.... 0x....      BL       cvt
   \   0000002C   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    122          }

   \                                 In section .text, align 2, keep-with-next
    123          void cfltcvt( double value, char * buffer, char fmt, int precision )
    124          {
   \                     cfltcvt:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x468B             MOV      R11,R1
   \   0000000A   0x0014             MOVS     R4,R2
   \   0000000C   0x4699             MOV      R9,R3
   \   0000000E   0xF8DD 0x8080      LDR      R8,[SP, #+128]
    125              int decpt, sign, exp, pos;
    126              char * digits = NULL;
   \   00000012   0x2700             MOVS     R7,#+0
    127              char cvtbuf[CVTBUFSIZE + 1];
    128              int capexp = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9005             STR      R0,[SP, #+20]
    129              int magnitude;
    130              if ( fmt == 'G' || fmt == 'E' )
   \   00000018   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000001C   0xF1B9 0x0F47      CMP      R9,#+71
   \   00000020   0xD004             BEQ.N    ??cfltcvt_0
   \   00000022   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000026   0xF1B9 0x0F45      CMP      R9,#+69
   \   0000002A   0xD103             BNE.N    ??cfltcvt_1
    131              {
    132                  capexp = 1;
   \                     ??cfltcvt_0:
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x9005             STR      R0,[SP, #+20]
    133                  fmt += 'a' - 'A';
   \   00000030   0xF119 0x0920      ADDS     R9,R9,#+32
    134              }
    135              if ( fmt == 'g' )
   \                     ??cfltcvt_1:
   \   00000034   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000038   0xF1B9 0x0F67      CMP      R9,#+103
   \   0000003C   0xD120             BNE.N    ??cfltcvt_2
    136              {
    137                  digits = ecvtbuf( value, precision, & decpt, & sign, cvtbuf );
   \   0000003E   0xA806             ADD      R0,SP,#+24
   \   00000040   0x9001             STR      R0,[SP, #+4]
   \   00000042   0xA803             ADD      R0,SP,#+12
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0xAB02             ADD      R3,SP,#+8
   \   00000048   0x4642             MOV      R2,R8
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x4659             MOV      R1,R11
   \   0000004E   0x.... 0x....      BL       ecvtbuf
   \   00000052   0x0007             MOVS     R7,R0
    138                  magnitude = decpt - 1;
   \   00000054   0x9802             LDR      R0,[SP, #+8]
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0x9004             STR      R0,[SP, #+16]
    139                  if ( magnitude < - 4  ||  magnitude > precision - 1 )
   \   0000005A   0x9804             LDR      R0,[SP, #+16]
   \   0000005C   0xF110 0x0F04      CMN      R0,#+4
   \   00000060   0xDB04             BLT.N    ??cfltcvt_3
   \   00000062   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   00000066   0x9904             LDR      R1,[SP, #+16]
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xDA04             BGE.N    ??cfltcvt_4
    140                  {
    141                      fmt = 'e';
   \                     ??cfltcvt_3:
   \   0000006C   0x2065             MOVS     R0,#+101
   \   0000006E   0x4681             MOV      R9,R0
    142                      precision -= 1;
   \   00000070   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \   00000074   0xE004             B.N      ??cfltcvt_2
    143                  }
    144                  else
    145                  {
    146                      fmt = 'f';
   \                     ??cfltcvt_4:
   \   00000076   0x2066             MOVS     R0,#+102
   \   00000078   0x4681             MOV      R9,R0
    147                      precision -= decpt;
   \   0000007A   0x9802             LDR      R0,[SP, #+8]
   \   0000007C   0xEBB8 0x0800      SUBS     R8,R8,R0
    148                  }
    149              }
    150              if ( fmt == 'e' )
   \                     ??cfltcvt_2:
   \   00000080   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000084   0xF1B9 0x0F65      CMP      R9,#+101
   \   00000088   0xD166             BNE.N    ??cfltcvt_5
    151              {
    152                  digits = ecvtbuf( value, precision + 1, & decpt, & sign, cvtbuf );
   \   0000008A   0xA806             ADD      R0,SP,#+24
   \   0000008C   0x9001             STR      R0,[SP, #+4]
   \   0000008E   0xA803             ADD      R0,SP,#+12
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0xAB02             ADD      R3,SP,#+8
   \   00000094   0xF118 0x0201      ADDS     R2,R8,#+1
   \   00000098   0x4650             MOV      R0,R10
   \   0000009A   0x4659             MOV      R1,R11
   \   0000009C   0x.... 0x....      BL       ecvtbuf
   \   000000A0   0x0007             MOVS     R7,R0
    153          
    154                  if ( sign ) * buffer ++ = '-';
   \   000000A2   0x9803             LDR      R0,[SP, #+12]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD002             BEQ.N    ??cfltcvt_6
   \   000000A8   0x202D             MOVS     R0,#+45
   \   000000AA   0x7020             STRB     R0,[R4, #+0]
   \   000000AC   0x1C64             ADDS     R4,R4,#+1
    155                  * buffer ++ = * digits;
   \                     ??cfltcvt_6:
   \   000000AE   0x7838             LDRB     R0,[R7, #+0]
   \   000000B0   0x7020             STRB     R0,[R4, #+0]
   \   000000B2   0x1C64             ADDS     R4,R4,#+1
    156                  if ( precision > 0 ) * buffer ++ = '.';
   \   000000B4   0xF1B8 0x0F01      CMP      R8,#+1
   \   000000B8   0xDB02             BLT.N    ??cfltcvt_7
   \   000000BA   0x202E             MOVS     R0,#+46
   \   000000BC   0x7020             STRB     R0,[R4, #+0]
   \   000000BE   0x1C64             ADDS     R4,R4,#+1
    157                  memcpy( buffer, digits + 1, precision );
   \                     ??cfltcvt_7:
   \   000000C0   0x4642             MOV      R2,R8
   \   000000C2   0x1C79             ADDS     R1,R7,#+1
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0x.... 0x....      BL       memcpy
    158                  buffer += precision;
   \   000000CA   0xEB18 0x0404      ADDS     R4,R8,R4
    159                  * buffer ++ = capexp ? 'E' : 'e';
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x1C44             ADDS     R4,R0,#+1
   \   000000D2   0x9905             LDR      R1,[SP, #+20]
   \   000000D4   0x2900             CMP      R1,#+0
   \   000000D6   0xD001             BEQ.N    ??cfltcvt_8
   \   000000D8   0x2145             MOVS     R1,#+69
   \   000000DA   0xE000             B.N      ??cfltcvt_9
   \                     ??cfltcvt_8:
   \   000000DC   0x2165             MOVS     R1,#+101
   \                     ??cfltcvt_9:
   \   000000DE   0x7001             STRB     R1,[R0, #+0]
    160                  if ( decpt == 0 )
   \   000000E0   0x9802             LDR      R0,[SP, #+8]
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD10D             BNE.N    ??cfltcvt_10
    161                  {
    162                      if ( value == 0.0 )
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x4652             MOV      R2,R10
   \   000000EC   0x465B             MOV      R3,R11
   \   000000EE   0x.... 0x....      BL       __aeabi_cdcmpeq
   \   000000F2   0xD102             BNE.N    ??cfltcvt_11
    163                          exp = 0;
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x0005             MOVS     R5,R0
   \   000000F8   0xE006             B.N      ??cfltcvt_12
    164                      else
    165                          exp = - 1;
   \                     ??cfltcvt_11:
   \   000000FA   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000FE   0x0005             MOVS     R5,R0
   \   00000100   0xE002             B.N      ??cfltcvt_12
    166                  }
    167                  else
    168                      exp = decpt - 1;
   \                     ??cfltcvt_10:
   \   00000102   0x9802             LDR      R0,[SP, #+8]
   \   00000104   0x1E40             SUBS     R0,R0,#+1
   \   00000106   0x0005             MOVS     R5,R0
    169          
    170                  if ( exp < 0 )
   \                     ??cfltcvt_12:
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xD504             BPL.N    ??cfltcvt_13
    171                  {
    172                      * buffer ++ = '-';
   \   0000010C   0x202D             MOVS     R0,#+45
   \   0000010E   0x7020             STRB     R0,[R4, #+0]
   \   00000110   0x1C64             ADDS     R4,R4,#+1
    173                      exp = - exp;
   \   00000112   0x426D             RSBS     R5,R5,#+0
   \   00000114   0xE002             B.N      ??cfltcvt_14
    174                  }
    175                  else
    176                      * buffer ++ = '+';
   \                     ??cfltcvt_13:
   \   00000116   0x202B             MOVS     R0,#+43
   \   00000118   0x7020             STRB     R0,[R4, #+0]
   \   0000011A   0x1C64             ADDS     R4,R4,#+1
    177                  buffer[2] = ( exp % 10 ) + '0';
   \                     ??cfltcvt_14:
   \   0000011C   0x200A             MOVS     R0,#+10
   \   0000011E   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000122   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000126   0x3030             ADDS     R0,R0,#+48
   \   00000128   0x70A0             STRB     R0,[R4, #+2]
    178                  exp = exp / 10;
   \   0000012A   0x200A             MOVS     R0,#+10
   \   0000012C   0xFB95 0xF5F0      SDIV     R5,R5,R0
    179                  buffer[1] = ( exp % 10 ) + '0';
   \   00000130   0x200A             MOVS     R0,#+10
   \   00000132   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000136   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   0000013A   0x3030             ADDS     R0,R0,#+48
   \   0000013C   0x7060             STRB     R0,[R4, #+1]
    180                  exp = exp / 10;
   \   0000013E   0x200A             MOVS     R0,#+10
   \   00000140   0xFB95 0xF5F0      SDIV     R5,R5,R0
    181                  buffer[0] = ( exp % 10 ) + '0';
   \   00000144   0x200A             MOVS     R0,#+10
   \   00000146   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   0000014A   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   0000014E   0x3030             ADDS     R0,R0,#+48
   \   00000150   0x7020             STRB     R0,[R4, #+0]
    182                  buffer += 3;
   \   00000152   0xF204 0x0403      ADDW     R4,R4,#+3
   \   00000156   0xE057             B.N      ??cfltcvt_15
    183              }
    184              else if ( fmt == 'f' )
   \                     ??cfltcvt_5:
   \   00000158   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000015C   0xF1B9 0x0F66      CMP      R9,#+102
   \   00000160   0xD152             BNE.N    ??cfltcvt_15
    185              {
    186                  digits = fcvtbuf( value, precision, & decpt, & sign, cvtbuf );
   \   00000162   0xA806             ADD      R0,SP,#+24
   \   00000164   0x9001             STR      R0,[SP, #+4]
   \   00000166   0xA803             ADD      R0,SP,#+12
   \   00000168   0x9000             STR      R0,[SP, #+0]
   \   0000016A   0xAB02             ADD      R3,SP,#+8
   \   0000016C   0x4642             MOV      R2,R8
   \   0000016E   0x4650             MOV      R0,R10
   \   00000170   0x4659             MOV      R1,R11
   \   00000172   0x.... 0x....      BL       fcvtbuf
   \   00000176   0x0007             MOVS     R7,R0
    187                  if ( sign ) * buffer ++ = '-';
   \   00000178   0x9803             LDR      R0,[SP, #+12]
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD002             BEQ.N    ??cfltcvt_16
   \   0000017E   0x202D             MOVS     R0,#+45
   \   00000180   0x7020             STRB     R0,[R4, #+0]
   \   00000182   0x1C64             ADDS     R4,R4,#+1
    188                  if (* digits )
   \                     ??cfltcvt_16:
   \   00000184   0x7838             LDRB     R0,[R7, #+0]
   \   00000186   0x2800             CMP      R0,#+0
   \   00000188   0xD02C             BEQ.N    ??cfltcvt_17
    189                  {
    190                      if ( decpt <= 0 )
   \   0000018A   0x9802             LDR      R0,[SP, #+8]
   \   0000018C   0x2801             CMP      R0,#+1
   \   0000018E   0xDA17             BGE.N    ??cfltcvt_18
    191                      {
    192                          * buffer ++ = '0';
   \   00000190   0x2030             MOVS     R0,#+48
   \   00000192   0x7020             STRB     R0,[R4, #+0]
   \   00000194   0x1C64             ADDS     R4,R4,#+1
    193                          * buffer ++ = '.';
   \   00000196   0x202E             MOVS     R0,#+46
   \   00000198   0x7020             STRB     R0,[R4, #+0]
   \   0000019A   0x1C64             ADDS     R4,R4,#+1
    194                          for ( pos = 0; pos < - decpt; pos ++) * buffer ++ = '0';
   \   0000019C   0x2000             MOVS     R0,#+0
   \   0000019E   0x0006             MOVS     R6,R0
   \                     ??cfltcvt_19:
   \   000001A0   0x9802             LDR      R0,[SP, #+8]
   \   000001A2   0x42C6             CMN      R6,R0
   \   000001A4   0xDA04             BGE.N    ??cfltcvt_20
   \   000001A6   0x2030             MOVS     R0,#+48
   \   000001A8   0x7020             STRB     R0,[R4, #+0]
   \   000001AA   0x1C64             ADDS     R4,R4,#+1
   \   000001AC   0x1C76             ADDS     R6,R6,#+1
   \   000001AE   0xE7F7             B.N      ??cfltcvt_19
    195                          while (* digits ) * buffer ++ = * digits ++;
   \                     ??cfltcvt_20:
   \   000001B0   0x7838             LDRB     R0,[R7, #+0]
   \   000001B2   0x2800             CMP      R0,#+0
   \   000001B4   0xD028             BEQ.N    ??cfltcvt_15
   \   000001B6   0x7838             LDRB     R0,[R7, #+0]
   \   000001B8   0x7020             STRB     R0,[R4, #+0]
   \   000001BA   0x1C7F             ADDS     R7,R7,#+1
   \   000001BC   0x1C64             ADDS     R4,R4,#+1
   \   000001BE   0xE7F7             B.N      ??cfltcvt_20
    196                      }
    197                      else
    198                      {
    199                          pos = 0;
   \                     ??cfltcvt_18:
   \   000001C0   0x2000             MOVS     R0,#+0
   \   000001C2   0x0006             MOVS     R6,R0
    200                          while (* digits )
   \                     ??cfltcvt_21:
   \   000001C4   0x7838             LDRB     R0,[R7, #+0]
   \   000001C6   0x2800             CMP      R0,#+0
   \   000001C8   0xD01E             BEQ.N    ??cfltcvt_15
    201                          {
    202                              if ( pos ++ == decpt ) * buffer ++ = '.';
   \   000001CA   0x0030             MOVS     R0,R6
   \   000001CC   0x1C46             ADDS     R6,R0,#+1
   \   000001CE   0x9902             LDR      R1,[SP, #+8]
   \   000001D0   0x4288             CMP      R0,R1
   \   000001D2   0xD102             BNE.N    ??cfltcvt_22
   \   000001D4   0x202E             MOVS     R0,#+46
   \   000001D6   0x7020             STRB     R0,[R4, #+0]
   \   000001D8   0x1C64             ADDS     R4,R4,#+1
    203                              * buffer ++ = * digits ++;
   \                     ??cfltcvt_22:
   \   000001DA   0x7838             LDRB     R0,[R7, #+0]
   \   000001DC   0x7020             STRB     R0,[R4, #+0]
   \   000001DE   0x1C7F             ADDS     R7,R7,#+1
   \   000001E0   0x1C64             ADDS     R4,R4,#+1
   \   000001E2   0xE7EF             B.N      ??cfltcvt_21
    204                          }
    205                      }
    206                  }
    207                  else
    208                  {
    209                      * buffer ++ = '0';
   \                     ??cfltcvt_17:
   \   000001E4   0x2030             MOVS     R0,#+48
   \   000001E6   0x7020             STRB     R0,[R4, #+0]
   \   000001E8   0x1C64             ADDS     R4,R4,#+1
    210                      if ( precision > 0 )
   \   000001EA   0xF1B8 0x0F01      CMP      R8,#+1
   \   000001EE   0xDB0B             BLT.N    ??cfltcvt_15
    211                      {
    212                          * buffer ++ = '.';
   \   000001F0   0x202E             MOVS     R0,#+46
   \   000001F2   0x7020             STRB     R0,[R4, #+0]
   \   000001F4   0x1C64             ADDS     R4,R4,#+1
    213                          for ( pos = 0; pos < precision; pos ++) * buffer ++ = '0';
   \   000001F6   0x2000             MOVS     R0,#+0
   \   000001F8   0x0006             MOVS     R6,R0
   \                     ??cfltcvt_23:
   \   000001FA   0x4546             CMP      R6,R8
   \   000001FC   0xDA04             BGE.N    ??cfltcvt_15
   \   000001FE   0x2030             MOVS     R0,#+48
   \   00000200   0x7020             STRB     R0,[R4, #+0]
   \   00000202   0x1C64             ADDS     R4,R4,#+1
   \   00000204   0x1C76             ADDS     R6,R6,#+1
   \   00000206   0xE7F8             B.N      ??cfltcvt_23
    214                      }
    215                  }
    216              }
    217              * buffer = '\0';
   \                     ??cfltcvt_15:
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x7020             STRB     R0,[R4, #+0]
    218          }
   \   0000020C   0xB017             ADD      SP,SP,#+92
   \   0000020E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0xEB851EB8         DC32     0xeb851eb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x3F9EB851         DC32     0x3f9eb851

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     128   cfltcvt
       128   -> __aeabi_cdcmpeq
       128   -> ecvtbuf
       128   -> fcvtbuf
       128   -> memcpy
      56   cvt
        56   -> __aeabi_cdcmpeq
        56   -> __aeabi_cdcmple
        56   -> __aeabi_cdrcmple
        56   -> __aeabi_d2iz
        56   -> __aeabi_dadd
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> modf
      40   ecvtbuf
        40   -> cvt
      40   fcvtbuf
        40   -> cvt
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
     530  cfltcvt
     448  cvt
      48  ecvtbuf
      48  fcvtbuf
      22  memcpy

 
 1 112 bytes in section .text
 
 1 090 bytes of CODE memory (+ 22 bytes shared)

Errors: none
Warnings: none
