###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      20/Mar/2017  17:17:58 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\iap\iap_uart.c         #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\HuaceApp\iap\iap_uart.c -lCN    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\iap_uart #
#                    .lst                                                     #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\iap_uart. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\HuaceApp\iap\iap_uart.c
      1          /**********************************************************************
      2          * $Id$		iap_uart.c			2011-06-02
      3          *//**
      4          * @file		iap_uart.c
      5          * @brief	Contains some utilities that used for debugging through UART
      6          * @version	1.0
      7          * @date		02. June. 2011
      8          * @author	NXP MCU SW Application Team
      9          * 
     10          * Copyright(C) 2011, NXP Semiconductor
     11          * All rights reserved.
     12          *
     13          #include <LPC177x_8x.H>
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          **********************************************************************/
     26          #include "bsp.h"
     27          #include "lpc177x_8x_timer.h"
     28          #include "iap_uart.h"
     29          //#include "led.h"
     30          #include "lpc177x_8x_pinsel.h"
     31          #include "string.h"
     32          
     33          //unsigned char *ReceiverID = "1234567890";
     34          //extern unsigned char ReceiverID[];
     35          //extern volatile uint8_t packet_end_flag;
     36          //extern volatile uint8_t update_timeout_flag;	   //XULIANG 2011-11-11
     37          /*********************************************************************//**
     38           * @brief		Initialize IAP UART port
     39           * @param[in]	None
     40           * @return		None
     41           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     42          void iap_uart_init(unsigned int baudrate)
     43          {
   \                     iap_uart_init:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     44             	UART_CFG_Type UARTConfigStruct;
     45          	/*
     46          	 * Initialize UART0 pin connect
     47          	 * P0.2: TXD
     48          	 * P0.3: RXD
     49          	 */
     50          	PINSEL_ConfigPin (0, 2, 1);
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       PINSEL_ConfigPin
     51          	PINSEL_ConfigPin (0, 3, 1);
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x2103             MOVS     R1,#+3
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       PINSEL_ConfigPin
     52          
     53          	/* Initialize UART Configuration parameter structure to default state:
     54          	 * Baudrate = 9600bps
     55          	 * 8 data bit
     56          	 * 1 Stop bit
     57          	 * None parity
     58          	 */
     59          	UART_ConfigStructInit(&UARTConfigStruct);
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x.... 0x....      BL       UART_ConfigStructInit
     60          	// Re-configure baudrate to 115200bps
     61          	UARTConfigStruct.Baud_rate = baudrate;//9600;//115200;
   \   0000001E   0x9400             STR      R4,[SP, #+0]
     62          
     63          	// Initialize IAP_UART_PORT peripheral with given to corresponding parameter
     64          	UART_Init(IAP_UART_PORT, &UARTConfigStruct);
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x....             LDR.N    R0,??DataTable4  ;; 0x4000c000
   \   00000024   0x.... 0x....      BL       UART_Init
     65          
     66          	// Enable UART Transmit
     67          	UART_TxCmd(IAP_UART_PORT, ENABLE);
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x....             LDR.N    R0,??DataTable4  ;; 0x4000c000
   \   0000002C   0x.... 0x....      BL       UART_TxCmd
     68          }
   \   00000030   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     69          /*************** //XULIANG 2012-05-10//******************************/

   \                                 In section .text, align 2, keep-with-next
     70          void IAP_Change_BaudRate(unsigned int baudrate)
     71          {
   \                     IAP_Change_BaudRate:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     72             UART_Change_BaudRate(IAP_UART_PORT,  baudrate);
   \   00000004   0x0021             MOVS     R1,R4
   \   00000006   0x....             LDR.N    R0,??DataTable4  ;; 0x4000c000
   \   00000008   0x.... 0x....      BL       UART_Change_BaudRate
     73          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     74          /******************************************************************************/
     75          //zxf

   \                                 In section .text, align 2, keep-with-next
     76          unsigned char uGetString(unsigned char ch1, unsigned char* buffa, unsigned char num)
     77          {
   \                     uGetString:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     78          	unsigned char i, ch,j;
     79          	unsigned int uRead;
     80          	
     81          	i = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0007             MOVS     R7,R0
     82          	j = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4681             MOV      R9,R0
     83          	while(1)
     84          	{
     85          		uRead = uGetChar();
   \                     ??uGetString_0:
   \   00000012   0x.... 0x....      BL       uGetChar
   \   00000016   0x4682             MOV      R10,R0
     86          		if(uRead == 0xFFFF) 
   \   00000018   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000001C   0x4582             CMP      R10,R0
   \   0000001E   0xD041             BEQ.N    ??uGetString_1
     87          			break;
     88          
     89          		ch = (unsigned char)uRead;
   \                     ??uGetString_2:
   \   00000020   0x4650             MOV      R0,R10
   \   00000022   0x4680             MOV      R8,R0
     90          		if(i == 0 && ch == '@')
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0x2F00             CMP      R7,#+0
   \   00000028   0xD109             BNE.N    ??uGetString_3
   \   0000002A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002E   0xF1B8 0x0F40      CMP      R8,#+64
   \   00000032   0xD104             BNE.N    ??uGetString_3
     91          	 		buffa[i++] = ch;
   \   00000034   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000036   0xF807 0x8005      STRB     R8,[R7, R5]
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \   0000003C   0xE02E             B.N      ??uGetString_4
     92          		else if(i == 1 && ch == ch1) 
   \                     ??uGetString_3:
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x2F01             CMP      R7,#+1
   \   00000042   0xD109             BNE.N    ??uGetString_5
   \   00000044   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x45A0             CMP      R8,R4
   \   0000004C   0xD104             BNE.N    ??uGetString_5
     93          			buffa[i++] = ch;			 
   \   0000004E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   0xF807 0x8005      STRB     R8,[R7, R5]
   \   00000054   0x1C7F             ADDS     R7,R7,#+1
   \   00000056   0xE021             B.N      ??uGetString_4
     94          		else if(i == 2 && ch == 255- ch1) 
   \                     ??uGetString_5:
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x2F02             CMP      R7,#+2
   \   0000005C   0xD10B             BNE.N    ??uGetString_6
   \   0000005E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xF1D4 0x00FF      RSBS     R0,R4,#+255
   \   00000068   0x4580             CMP      R8,R0
   \   0000006A   0xD104             BNE.N    ??uGetString_6
     95          			buffa[i++] = ch;
   \   0000006C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006E   0xF807 0x8005      STRB     R8,[R7, R5]
   \   00000072   0x1C7F             ADDS     R7,R7,#+1
   \   00000074   0xE012             B.N      ??uGetString_4
     96          		else if(i > 2) buffa[i++] = ch;
   \                     ??uGetString_6:
   \   00000076   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000078   0x2F03             CMP      R7,#+3
   \   0000007A   0xDB04             BLT.N    ??uGetString_7
   \   0000007C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007E   0xF807 0x8005      STRB     R8,[R7, R5]
   \   00000082   0x1C7F             ADDS     R7,R7,#+1
   \   00000084   0xE00A             B.N      ??uGetString_4
     97          		else
     98          		{
     99          			j++;
   \                     ??uGetString_7:
   \   00000086   0xF119 0x0901      ADDS     R9,R9,#+1
    100          			i = 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x0007             MOVS     R7,R0
    101          			if(j >= 20)  
   \   0000008E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000092   0xF1B9 0x0F14      CMP      R9,#+20
   \   00000096   0xDB01             BLT.N    ??uGetString_4
    102          			  return 0; 
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xE005             B.N      ??uGetString_8
    103          		}
    104          
    105          		if(i >= num)
   \                     ??uGetString_4:
   \   0000009C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0x42B7             CMP      R7,R6
   \   000000A2   0xD3B6             BCC.N    ??uGetString_0
    106          			break;
    107          	}
    108          	return i;				
   \                     ??uGetString_1:
   \   000000A4   0x0038             MOVS     R0,R7
   \   000000A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??uGetString_8:
   \   000000A8   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    109          }
    110          /* //zxf
    111          unsigned char uGetString(unsigned char ch1, unsigned char ch2, unsigned char *buff, unsigned char num)
    112          {
    113              unsigned char i,ch;
    114          	unsigned short uRead;
    115              unsigned char j; //edit 2012.10.24
    116          	i = 0;
    117          	j = 0;	 //edit 2012.10.24
    118          	while(1)
    119          	{
    120          	   uRead = uGetChar();
    121          	   if(0xFFFF == uRead) break;
    122          	   ch = (unsigned char)uRead;
    123          	   if(0 == i && '$' == ch) 
    124          	   		buff[i++] = ch;
    125          	   else if(1 == i && '$' == ch) 
    126          	   		buff[i++] = ch;
    127          	   else if(2 == i && ch1 == ch)
    128          	   	 	buff[i++] = ch;
    129          	   else if(3 == i)
    130          	   {
    131          	      if(ch == ch2) 
    132          		  		buff[i++] = ch;
    133          		  else 
    134          		  		return 0;
    135          	   }
    136          	   else if(i > 3) 
    137          	   		buff[i++] = ch;
    138          	   else  
    139          	   		i = 0;
    140          	   if(i >= num) 
    141          	   		break;
    142          	   else
    143          	   { 
    144          	     //edit 2012.10.24
    145          	     if(0 == i && '$' != ch)
    146          		 {
    147          		   	 j++;  
    148          			 if(j > 100) 
    149          			 {
    150          			    j = 0;
    151          			 	break; 
    152          
    153          			 }
    154          		 }
    155          	   }
    156          	  
    157          	 }
    158          	 return i;
    159          }
    160          */
    161          
    162          /******************************************************************************************/
    163          //zxf

   \                                 In section .text, align 2, keep-with-next
    164          unsigned short uGetChar(void)
    165          {
    166           // g_DeviceBT.Buf[g_DeviceBT.WrSp]
    167            char c;
    168            
    169            if(g_DeviceBT.WrSp != g_DeviceBT.RdSp)
   \                     uGetChar:
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x8B00             LDRH     R0,[R0, #+24]
   \   00000004   0x....             LDR.N    R2,??DataTable4_1
   \   00000006   0x8B52             LDRH     R2,[R2, #+26]
   \   00000008   0x4290             CMP      R0,R2
   \   0000000A   0xD018             BEQ.N    ??uGetChar_0
    170            {
    171              c = g_DeviceBT.Buf[g_DeviceBT.RdSp];
   \   0000000C   0x....             LDR.N    R0,??DataTable4_1
   \   0000000E   0x8B40             LDRH     R0,[R0, #+26]
   \   00000010   0x....             LDR.N    R2,??DataTable4_1
   \   00000012   0x6952             LDR      R2,[R2, #+20]
   \   00000014   0x5C80             LDRB     R0,[R0, R2]
   \   00000016   0x0001             MOVS     R1,R0
    172              INCREASE_POINTER(g_DeviceBT.RdSp);
   \   00000018   0x....             LDR.N    R0,??DataTable4_1
   \   0000001A   0x8B40             LDRH     R0,[R0, #+26]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x....             LDR.N    R2,??DataTable4_1
   \   00000020   0x8350             STRH     R0,[R2, #+26]
   \   00000022   0x....             LDR.N    R0,??DataTable4_1
   \   00000024   0x8B40             LDRH     R0,[R0, #+26]
   \   00000026   0xF44F 0x6200      MOV      R2,#+2048
   \   0000002A   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   0000002E   0xFB03 0x0312      MLS      R3,R3,R2,R0
   \   00000032   0x....             LDR.N    R0,??DataTable4_1
   \   00000034   0x8343             STRH     R3,[R0, #+26]
    173                return (unsigned short)c;
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x0008             MOVS     R0,R1
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0xE001             B.N      ??uGetChar_1
    174            }
    175            else
    176              return 0xffff;
   \                     ??uGetChar_0:
   \   0000003E   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??uGetChar_1:
   \   00000042   0x4770             BX       LR               ;; return
    177            
    178              
    179          }
    180           
    181                          
    182                          
    183                       /*   
    184          unsigned short uGetChar(void)
    185          {
    186              unsigned short uReturn;
    187          	unsigned short uCounter = 0;
    188          	
    189          	LPC_TIM2->TCR |= (1<<1); //Reset Counter
    190          	LPC_TIM2->TCR &= ~(1<<1); //release reset  
    191          	// To start timer
    192          	TIM_Cmd(BRD_TIMER_USED, ENABLE);
    193          	///ClearDataLed();
    194          	uCounter = 0;
    195          	while(1)
    196          	{
    197          	    if(LPC_UART0->LSR & UART_LSR_RDR )	/// Receive Data Ready 
    198          		{
    199          		    ///SetDataLed();
    200          			uCounter = 0;
    201          			uReturn = LPC_UART0->RBR;
    202          			return uReturn;
    203          		}
    204          		if(uCounter >= 2)
    205          		{
    206          		    uReturn = 0xFFFF;
    207          			//packet_end_flag = 1;
    208          			//update_timeout_flag = 1;       //XULIANG 2011-11-11
    209          			return uReturn;
    210          		}
    211          	    if (TIM_GetIntStatus(BRD_TIMER_USED, TIM_MR0_INT)== SET)
    212          	    {
    213          		    uCounter++;
    214          			TIM_ClearIntPending(BRD_TIMER_USED, TIM_MR0_INT);
    215          	     }
    216          	}
    217          }
    218          */
    219          /*********************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          unsigned short Time_Delay(void)
    221          {
   \                     Time_Delay:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    222              unsigned short uReturn;
    223          	unsigned short uCounter = 0;
   \   00000002   0x2500             MOVS     R5,#+0
    224          	
    225          	LPC_TIM2->TCR |= (1<<1); //Reset Counter
   \   00000004   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40090004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000000C   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40090004
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    226          	LPC_TIM2->TCR &= ~(1<<1); //release reset  
   \   00000010   0x....             LDR.N    R0,??DataTable4_2  ;; 0x40090004
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000018   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40090004
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    227          	// To start timer
    228          	TIM_Cmd(BRD_TIMER_USED, ENABLE);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0xF05F 0x2040      MOVS     R0,#+1073758208
   \   00000022   0x.... 0x....      BL       TIM_Cmd
    229          	uCounter = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x0005             MOVS     R5,R0
    230          	while(1)
    231          	{
    232          		if(uCounter >= 2)
   \                     ??Time_Delay_0:
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x2D02             CMP      R5,#+2
   \   0000002E   0xDB05             BLT.N    ??Time_Delay_1
    233          		{
    234          		    uReturn = 0xFFFF;
   \   00000030   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000034   0x0004             MOVS     R4,R0
    235          			//packet_end_flag = 1;
    236          			//update_timeout_flag = 1;       //XULIANG 2011-11-11
    237          			return uReturn;
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0xE00D             B.N      ??Time_Delay_2
    238          		}
    239          	    if (TIM_GetIntStatus(BRD_TIMER_USED, TIM_MR0_INT)== SET)
   \                     ??Time_Delay_1:
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xF05F 0x2040      MOVS     R0,#+1073758208
   \   00000042   0x.... 0x....      BL       TIM_GetIntStatus
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD1EF             BNE.N    ??Time_Delay_0
    240          	    {
    241          		    uCounter++;
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
    242          			TIM_ClearIntPending(BRD_TIMER_USED, TIM_MR0_INT);
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xF05F 0x2040      MOVS     R0,#+1073758208
   \   00000052   0x.... 0x....      BL       TIM_ClearIntPending
   \   00000056   0xE7E8             B.N      ??Time_Delay_0
    243          	     }
    244          	}
   \                     ??Time_Delay_2:
   \   00000058   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    245          }
    246          /*********************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    247          void Send_in_Process(unsigned char ch1, unsigned char ch2, unsigned char len)
    248          {
   \                     Send_in_Process:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    249              unsigned char buff[42];
    250          	unsigned char checksum;
    251          	register unsigned char i,n,nReceiverID;
    252          
    253             	uint8_t* pReceiverTypeIDProdData=NULL;	//add by hefaqiang 20130710
   \   0000000C   0xF05F 0x0A00      MOVS     R10,#+0
    254          
    255          	buff[0] = '$';
   \   00000010   0x2024             MOVS     R0,#+36
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    256          	buff[1] = '$';
   \   00000016   0x2024             MOVS     R0,#+36
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    257          	buff[2] = ch1;
   \   0000001C   0xF88D 0x4002      STRB     R4,[SP, #+2]
    258          	buff[3] = ch2;
   \   00000020   0xF88D 0x5003      STRB     R5,[SP, #+3]
    259          	buff[4] = 0x00;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0004      STRB     R0,[SP, #+4]
    260          	buff[5] = 0x01;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xF88D 0x0005      STRB     R0,[SP, #+5]
    261          	n = 6;
   \   00000030   0x2006             MOVS     R0,#+6
   \   00000032   0x4681             MOV      R9,R0
    262          	if(('S' == ch1) && ('S' == ch2))
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x2C53             CMP      R4,#+83
   \   00000038   0xD107             BNE.N    ??Send_in_Process_0
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D53             CMP      R5,#+83
   \   0000003E   0xD104             BNE.N    ??Send_in_Process_0
    263          	{
    264          /***********************************Add by  hefaqiang******************************/
    265          		//nReceiverID=sizeof(HW_ConfPacket->ReceiverType)+sizeof(HW_ConfPacket->ReceiverID)+sizeof(HW_ConfPacket->ProductDate);
    266          		//pReceiverTypeIDProdData=(uint8_t*)&HW_ConfPacket->ReceiverType;
    267          		//for(i=0;i<nReceiverID;i++)
    268          		//		{
    269          		//			if(i==2)
    270          		//				buff[n++]='S';	  //协议要求要修改这个变量,通知上位机更改波特率  
    271          		//			else
    272          		//				buff[n++]=pReceiverTypeIDProdData[i];
    273          		//		}
    274           /***********************************End Add by  hefaqiang******************************/
    275          /*
    276          	 for(i = 0; i < strlen(ReceiverID); i++)
    277          	   {
    278          	       buff[n++] = ReceiverID[i];
    279          	   }
    280          */	   
    281          	   buff[5] = n - 6;
   \   00000040   0xF1B9 0x0006      SUBS     R0,R9,#+6
   \   00000044   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000048   0xE006             B.N      ??Send_in_Process_1
    282          	}
    283          	else
    284          	{
    285          	   buff[n++] = len;
   \                     ??Send_in_Process_0:
   \   0000004A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000004E   0xA800             ADD      R0,SP,#+0
   \   00000050   0xF809 0x6000      STRB     R6,[R9, R0]
   \   00000054   0xF119 0x0901      ADDS     R9,R9,#+1
    286          	}
    287          	checksum = 0;
   \                     ??Send_in_Process_1:
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0007             MOVS     R7,R0
    288          	for(i = 0; i < n; i++) 
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x4680             MOV      R8,R0
   \                     ??Send_in_Process_2:
   \   00000060   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000064   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000068   0x45C8             CMP      R8,R9
   \   0000006A   0xD208             BCS.N    ??Send_in_Process_3
    289          			checksum ^= buff[i];
   \   0000006C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000070   0xA800             ADD      R0,SP,#+0
   \   00000072   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   00000076   0x4047             EORS     R7,R0,R7
   \   00000078   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000007C   0xE7F0             B.N      ??Send_in_Process_2
    290          	buff[n++] = checksum;
   \                     ??Send_in_Process_3:
   \   0000007E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000082   0xA800             ADD      R0,SP,#+0
   \   00000084   0xF809 0x7000      STRB     R7,[R9, R0]
   \   00000088   0xF119 0x0901      ADDS     R9,R9,#+1
    291          	buff[n++] = '\r';
   \   0000008C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000090   0xA800             ADD      R0,SP,#+0
   \   00000092   0x210D             MOVS     R1,#+13
   \   00000094   0xF809 0x1000      STRB     R1,[R9, R0]
   \   00000098   0xF119 0x0901      ADDS     R9,R9,#+1
    292          	buff[n++] = '\n';
   \   0000009C   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000A0   0xA800             ADD      R0,SP,#+0
   \   000000A2   0x210A             MOVS     R1,#+10
   \   000000A4   0xF809 0x1000      STRB     R1,[R9, R0]
   \   000000A8   0xF119 0x0901      ADDS     R9,R9,#+1
    293          	SendString(buff, n);
   \   000000AC   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000B0   0x4649             MOV      R1,R9
   \   000000B2   0xA800             ADD      R0,SP,#+0
   \   000000B4   0x.... 0x....      BL       SendString
    294          }
   \   000000B8   0xB00C             ADD      SP,SP,#+48
   \   000000BA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    295          /**************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    296          void SendString(unsigned char *buff, unsigned int num)
    297          {
   \                     SendString:
   \   00000000   0xB410             PUSH     {R4}
    298              unsigned int i;
    299          	for(i = 0; i < num; i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x001A             MOVS     R2,R3
   \                     ??SendString_0:
   \   00000006   0x428A             CMP      R2,R1
   \   00000008   0xD208             BCS.N    ??SendString_1
    300          	{
    301                 while( !(LPC_UART0->LSR & UART_LSR_THRE) );	//While THR is NOT empty, wait!
   \                     ??SendString_2:
   \   0000000A   0x....             LDR.N    R3,??DataTable4_3  ;; 0x4000c014
   \   0000000C   0x781B             LDRB     R3,[R3, #+0]
   \   0000000E   0x069B             LSLS     R3,R3,#+26
   \   00000010   0xD5FB             BPL.N    ??SendString_2
    302          	   LPC_UART0->THR = buff[i];			//Load new data	 
   \   00000012   0x5C13             LDRB     R3,[R2, R0]
   \   00000014   0x....             LDR.N    R4,??DataTable4  ;; 0x4000c000
   \   00000016   0x7023             STRB     R3,[R4, #+0]
    303          	  // if(1 == update_timeout_flag)
    304          	  // {SetSateLed();}
    305          	}
   \   00000018   0x1C52             ADDS     R2,R2,#+1
   \   0000001A   0xE7F4             B.N      ??SendString_0
    306          	//if(1 == update_timeout_flag)
    307          	//{ClearSateLed();}
    308          }
   \                     ??SendString_1:
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4000C000         DC32     0x4000c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     g_DeviceBT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40090004         DC32     0x40090004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4000C014         DC32     0x4000c014

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   IAP_Change_BaudRate
         8   -> UART_Change_BaudRate
       4   SendString
      80   Send_in_Process
        80   -> SendString
      16   Time_Delay
        16   -> TIM_ClearIntPending
        16   -> TIM_Cmd
        16   -> TIM_GetIntStatus
      16   iap_uart_init
        16   -> PINSEL_ConfigPin
        16   -> UART_ConfigStructInit
        16   -> UART_Init
        16   -> UART_TxCmd
       0   uGetChar
      32   uGetString
        32   -> uGetChar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      14  IAP_Change_BaudRate
      32  SendString
     190  Send_in_Process
      90  Time_Delay
      50  iap_uart_init
      68  uGetChar
     172  uGetString

 
 632 bytes in section .text
 
 632 bytes of CODE memory

Errors: none
Warnings: 4
