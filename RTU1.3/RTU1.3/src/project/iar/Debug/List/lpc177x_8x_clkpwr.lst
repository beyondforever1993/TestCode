###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_clkpwr.c                          #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_clkpwr.c -lCN                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\lpc177x_8x_clkpwr.lst                      #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\lpc177x_8x_clkpwr.o                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Drivers\source\lpc177x_8x_clkpwr.c
      1          /**********************************************************************
      2          * $Id$		lpc177x_8x_clkpwr.c			2011-06-02
      3          *//**
      4          * @file		lpc177x_8x_clkpwr.c
      5          * @brief	Contains all functions support for Clock and Power Control
      6          *			firmware library on LPC177x_8x
      7          * @version	1.0
      8          * @date		02. June. 2011
      9          * @author	NXP MCU SW Application Team
     10          * 
     11          * Copyright(C) 2011, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          **********************************************************************/
     26          
     27          /* Peripheral group ----------------------------------------------------------- */
     28          /** @addtogroup CLKPWR
     29           * @{
     30           */
     31          
     32          /* Includes ------------------------------------------------------------------- */
     33          #include "lpc177x_8x_clkpwr.h"

   \                                 In section .text, align 4, keep-with-next
   \   00000000   0xBF30             wfi
   \   00000002   0x4770             BX       LR               ;; return
     34          
     35          

   \                                 In section .bss, align 4
     36          uint32_t USBFrequency = 0;
   \                     USBFrequency:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     37          uint32_t SPIFIFrequency = 0;
   \                     SPIFIFrequency:
   \   00000000                      DS8 4
     38          /* Public Functions ----------------------------------------------------------- */
     39          /** @addtogroup CLKPWR_Public_Functions
     40           * @{
     41           */
     42          
     43          /*********************************************************************//**
     44           * @brief 		Set value of each Peripheral Clock Selection
     45           * @param[in]	ClkType clock type that will be divided, should be:
     46           * 				- CLKPWR_CLKTYPE_CPU 		: CPU clock
     47           * 				- CLKPWR_CLKTYPE_PER		: Peripheral clock
     48           * 				- CLKPWR_CLKTYPE_EMC 		: EMC clock
     49           * 				- CLKPWR_CLKTYPE_USB 		: USB clock
     50           * @param[in]	DivVal	Value of divider. This value should be set as follows:
     51           * 					- CPU clock: DivVal must be in range: 0..31
     52           * 					- Peripheral clock: DivVal must be in range: 0..31
     53           * 					- EMC clock: DivVal must be:
     54           * 							+ 0: The EMC uses the same clock as the CPU
     55           * 							+ 1: The EMC uses a clock at half the rate of the CPU
     56           *   				- USB clock: DivVal must be:
     57           * 							+ 0: the divider is turned off, no clock will
     58           * 								 be provided to the USB subsystem
     59           * 							+ 4: PLL0 output is divided by 4. PLL0 output must be 192MHz
     60           * 							+ 6: PLL0 output is divided by 6. PLL0 output must be 288MHz
     61           * @return none
     62           * Note: Pls assign right DivVal, this function will not check if it is illegal.
     63           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     64          void CLKPWR_SetCLKDiv (uint8_t ClkType, uint8_t DivVal)
     65          {
   \                     CLKPWR_SetCLKDiv:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     66          	switch(ClkType)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD005             BEQ.N    ??CLKPWR_SetCLKDiv_0
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD00F             BEQ.N    ??CLKPWR_SetCLKDiv_1
   \   00000010   0xD308             BCC.N    ??CLKPWR_SetCLKDiv_2
   \   00000012   0x2C03             CMP      R4,#+3
   \   00000014   0xD012             BEQ.N    ??CLKPWR_SetCLKDiv_3
   \   00000016   0xE01E             B.N      ??CLKPWR_SetCLKDiv_4
     67          	{
     68          	case CLKPWR_CLKTYPE_CPU:
     69          		LPC_SC->CCLKSEL = DivVal;
   \                     ??CLKPWR_SetCLKDiv_0:
   \   00000018   0x....             LDR.N    R0,??DataTable6  ;; 0x400fc104
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x6005             STR      R5,[R0, #+0]
     70          		SystemCoreClockUpdate(); //Update clock
   \   0000001E   0x.... 0x....      BL       SystemCoreClockUpdate
     71          		break;
   \   00000022   0xE019             B.N      ??CLKPWR_SetCLKDiv_5
     72          	case CLKPWR_CLKTYPE_PER:
     73          		LPC_SC->PCLKSEL = DivVal;
   \                     ??CLKPWR_SetCLKDiv_2:
   \   00000024   0x....             LDR.N    R0,??DataTable6_1  ;; 0x400fc1a8
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x6005             STR      R5,[R0, #+0]
     74          		SystemCoreClockUpdate(); //Update clock
   \   0000002A   0x.... 0x....      BL       SystemCoreClockUpdate
     75          		break;
   \   0000002E   0xE013             B.N      ??CLKPWR_SetCLKDiv_5
     76          	case CLKPWR_CLKTYPE_EMC:
     77          		LPC_SC->EMCCLKSEL = DivVal;
   \                     ??CLKPWR_SetCLKDiv_1:
   \   00000030   0x....             LDR.N    R0,??DataTable6_2  ;; 0x400fc100
   \   00000032   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000034   0x6005             STR      R5,[R0, #+0]
     78          		SystemCoreClockUpdate(); //Update clock
   \   00000036   0x.... 0x....      BL       SystemCoreClockUpdate
     79          		break;
   \   0000003A   0xE00D             B.N      ??CLKPWR_SetCLKDiv_5
     80          	case CLKPWR_CLKTYPE_USB:
     81          		LPC_SC->USBCLKSEL &= ~(0x0000001F);
   \                     ??CLKPWR_SetCLKDiv_3:
   \   0000003C   0x....             LDR.N    R0,??DataTable6_3  ;; 0x400fc108
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x0940             LSRS     R0,R0,#+5
   \   00000042   0x0140             LSLS     R0,R0,#+5
   \   00000044   0x....             LDR.N    R1,??DataTable6_3  ;; 0x400fc108
   \   00000046   0x6008             STR      R0,[R1, #+0]
     82          		LPC_SC->USBCLKSEL |= DivVal;
   \   00000048   0x....             LDR.N    R0,??DataTable6_3  ;; 0x400fc108
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x4328             ORRS     R0,R5,R0
   \   00000050   0x....             LDR.N    R1,??DataTable6_3  ;; 0x400fc108
   \   00000052   0x6008             STR      R0,[R1, #+0]
     83          		break;
   \   00000054   0xE000             B.N      ??CLKPWR_SetCLKDiv_5
     84          	default:
     85          		while(1);//Error Loop;
   \                     ??CLKPWR_SetCLKDiv_4:
   \   00000056   0xE7FE             B.N      ??CLKPWR_SetCLKDiv_4
     86          	}
     87          }
   \                     ??CLKPWR_SetCLKDiv_5:
   \   00000058   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     88          
     89          /*********************************************************************//**
     90           * @brief 		Get current clock value
     91           * @param[in]	ClkType clock type that will be divided, should be:
     92           * 				- CLKPWR_CLKTYPE_CPU 		: CPU clock
     93           * 				- CLKPWR_CLKTYPE_PER		: Peripheral clock
     94           * 				- CLKPWR_CLKTYPE_EMC 		: EMC clock
     95           * 				- CLKPWR_CLKTYPE_USB 		: USB clock
     96           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     97          uint32_t CLKPWR_GetCLK (uint8_t ClkType)
     98          {
   \                     CLKPWR_GetCLK:
   \   00000000   0x0001             MOVS     R1,R0
     99          	switch(ClkType)
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD005             BEQ.N    ??CLKPWR_GetCLK_0
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD009             BEQ.N    ??CLKPWR_GetCLK_1
   \   0000000C   0xD305             BCC.N    ??CLKPWR_GetCLK_2
   \   0000000E   0x2903             CMP      R1,#+3
   \   00000010   0xD009             BEQ.N    ??CLKPWR_GetCLK_3
   \   00000012   0xE00B             B.N      ??CLKPWR_GetCLK_4
    100          	{
    101          		case CLKPWR_CLKTYPE_CPU:
    102          			return SystemCoreClock;
   \                     ??CLKPWR_GetCLK_0:
   \   00000014   0x....             LDR.N    R0,??DataTable6_4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xE009             B.N      ??CLKPWR_GetCLK_5
    103          
    104          		case CLKPWR_CLKTYPE_PER:
    105          			return PeripheralClock;
   \                     ??CLKPWR_GetCLK_2:
   \   0000001A   0x....             LDR.N    R0,??DataTable6_5
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xE006             B.N      ??CLKPWR_GetCLK_5
    106          
    107          		case CLKPWR_CLKTYPE_EMC:
    108          			return EMCClock;
   \                     ??CLKPWR_GetCLK_1:
   \   00000020   0x....             LDR.N    R0,??DataTable6_6
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xE003             B.N      ??CLKPWR_GetCLK_5
    109          
    110          		case CLKPWR_CLKTYPE_USB:
    111          			return USBClock;
   \                     ??CLKPWR_GetCLK_3:
   \   00000026   0x....             LDR.N    R0,??DataTable6_7
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xE000             B.N      ??CLKPWR_GetCLK_5
    112          
    113          		default:
    114          			while(1);//error loop
   \                     ??CLKPWR_GetCLK_4:
   \   0000002C   0xE7FE             B.N      ??CLKPWR_GetCLK_4
    115          	}
   \                     ??CLKPWR_GetCLK_5:
   \   0000002E   0x4770             BX       LR               ;; return
    116          }
    117          
    118          /*********************************************************************//**
    119           * @brief 		Configure power supply for each peripheral according to NewState
    120           * @param[in]	PPType	Type of peripheral used to enable power,
    121           *     			should be one of the following:
    122           *     			-  CLKPWR_PCONP_PCLCD		: LCD
    123           *     			-  CLKPWR_PCONP_PCTIM0 		: Timer 0
    124          				-  CLKPWR_PCONP_PCTIM1 		: Timer 1
    125          				-  CLKPWR_PCONP_PCUART0  	: UART 0
    126          				-  CLKPWR_PCONP_PCUART1   	: UART 1
    127          				-  CLKPWR_PCONP_PCPWM0		: PWM 0
    128          				-  CLKPWR_PCONP_PCPWM1 		: PWM 1
    129          				-  CLKPWR_PCONP_PCI2C0 		: I2C 0
    130          				-  CLKPWR_PCONP_PCUART4		: UART4
    131          				-  CLKPWR_PCONP_PCRTC   	: RTC
    132          				-  CLKPWR_PCONP_PCSSP1 		: SSP 1
    133          				-  CLKPWR_PCONP_PCEMC		: EMC
    134          				-  CLKPWR_PCONP_PCADC   		: ADC
    135          				-  CLKPWR_PCONP_PCAN1   	: CAN 1
    136          				-  CLKPWR_PCONP_PCAN2   	: CAN 2
    137          				-  CLKPWR_PCONP_PCGPIO 		: GPIO
    138          				-  CLKPWR_PCONP_PCMC 		: MCPWM
    139          				-  CLKPWR_PCONP_PCQEI 		: QEI
    140          				-  CLKPWR_PCONP_PCI2C1   	: I2C 1
    141          				-  CLKPWR_PCONP_PCSSP2		: SSP 2
    142          				-  CLKPWR_PCONP_PCSSP0 		: SSP 0
    143          				-  CLKPWR_PCONP_PCTIM2 		: Timer 2
    144          				-  CLKPWR_PCONP_PCTIM3 		: Timer 3
    145          				-  CLKPWR_PCONP_PCUART2  	: UART 2
    146          				-  CLKPWR_PCONP_PCUART3   	: UART 3
    147          				-  CLKPWR_PCONP_PCI2C2 		: I2C 2
    148          				-  CLKPWR_PCONP_PCI2S   	: I2S
    149          				-  CLKPWR_PCONP_PCSDC		: SDC
    150          				-  CLKPWR_PCONP_PCGPDMA   	: GPDMA
    151          				-  CLKPWR_PCONP_PCENET 		: Ethernet
    152          				-  CLKPWR_PCONP_PCUSB   	: USB
    153           *
    154           * @param[in]	NewState	New state of Peripheral Power, should be:
    155           * 				- ENABLE	: Enable power for this peripheral
    156           * 				- DISABLE	: Disable power for this peripheral
    157           *
    158           * @return none
    159           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    160          void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
    161          {
    162          	if (NewState == ENABLE)
   \                     CLKPWR_ConfigPPWR:
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2901             CMP      R1,#+1
   \   00000004   0xD105             BNE.N    ??CLKPWR_ConfigPPWR_0
    163          	{
    164          		LPC_SC->PCONP |= PPType;
   \   00000006   0x....             LDR.N    R2,??DataTable6_8  ;; 0x400fc0c4
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4302             ORRS     R2,R0,R2
   \   0000000C   0x....             LDR.N    R3,??DataTable6_8  ;; 0x400fc0c4
   \   0000000E   0x601A             STR      R2,[R3, #+0]
   \   00000010   0xE007             B.N      ??CLKPWR_ConfigPPWR_1
    165          	}
    166          	else if (NewState == DISABLE)
   \                     ??CLKPWR_ConfigPPWR_0:
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD104             BNE.N    ??CLKPWR_ConfigPPWR_1
    167          	{
    168          		LPC_SC->PCONP &= ~PPType;
   \   00000018   0x....             LDR.N    R2,??DataTable6_8  ;; 0x400fc0c4
   \   0000001A   0x6812             LDR      R2,[R2, #+0]
   \   0000001C   0x4382             BICS     R2,R2,R0
   \   0000001E   0x....             LDR.N    R3,??DataTable6_8  ;; 0x400fc0c4
   \   00000020   0x601A             STR      R2,[R3, #+0]
    169          	}
    170          }
   \                     ??CLKPWR_ConfigPPWR_1:
   \   00000022   0x4770             BX       LR               ;; return
    171          
    172          #if 0
    173          // nxp21346
    174          /*********************************************************************//**
    175           * @brief 		Configure hardware reset for each peripheral according to NewState
    176           * @param[in]	PPType	Type of peripheral used to enable power,
    177           *     			should be one of the following:
    178           *     			-  CLKPWR_RSTCON0_LCD		: LCD
    179           *     			-  CLKPWR_RSTCON0_TIM0 		: Timer 0
    180          				-  CLKPWR_RSTCON0_TIM1 		: Timer 1
    181          				-  CLKPWR_RSTCON0_UART0  	: UART 0
    182          				-  CLKPWR_RSTCON0_UART1   	: UART 1
    183          				-  CLKPWR_RSTCON0_PWM0 		: PWM 0
    184          				-  CLKPWR_RSTCON0_PWM1 		: PWM 1
    185          				-  CLKPWR_RSTCON0_I2C0		: I2C 0
    186          				-  CLKPWR_RSTCON0_UART4   	: UART 4
    187          				-  CLKPWR_RSTCON0_RTC 		: RTC
    188          				-  CLKPWR_RSTCON0_SSP1		: SSP 1
    189          				-  CLKPWR_RSTCON0_EMC   	: EMC
    190          				-  CLKPWR_RSTCON0_ADC   	: ADC
    191          				-  CLKPWR_RSTCON0_CAN1   	: CAN 1
    192          				-  CLKPWR_RSTCON0_CAN2 		: CAN 2
    193          				-  CLKPWR_RSTCON0_GPIO 		: GPIO
    194          				-  CLKPWR_RSTCON0_MCPWM 	: MCPWM
    195          				-  CLKPWR_RSTCON0_QEI   	: QEI
    196          				-  CLKPWR_RSTCON0_I2C1		: I2C 1
    197          				-  CLKPWR_RSTCON0_SSP2 		: SSP 2
    198          				-  CLKPWR_RSTCON0_SSP0 		: SSP 0
    199          				-  CLKPWR_RSTCON0_TIM2 		: Timer 2
    200          				-  CLKPWR_RSTCON0_TIM3  	: Timer 3
    201          				-  CLKPWR_RSTCON0_UART2  	: UART 2
    202          				-  CLKPWR_RSTCON0_UART3   	: UART 3
    203          				-  CLKPWR_RSTCON0_I2C2 		: I2C 2
    204          				-  CLKPWR_RSTCON0_I2S   	: I2S
    205          				-  CLKPWR_RSTCON0_SDC		: SDC
    206          				-  CLKPWR_RSTCON0_GPDMA   	: GPDMA
    207          				-  CLKPWR_RSTCON0_ENET 		: Ethernet
    208          				-  CLKPWR_RSTCON0_USB   	: USB
    209           *
    210           * @param[in]	NewState	New state of Peripheral Power, should be:
    211           * 				- ENABLE	: Enable power for this peripheral
    212           * 				- DISABLE	: Disable power for this peripheral
    213           *
    214           * @return none
    215           **********************************************************************/
    216          void CLKPWR_ConfigReset(uint8_t PType, FunctionalState NewState)
    217          {
    218          	if(PType < 32)
    219          	{
    220          		if(NewState == ENABLE)
    221          			LPC_SC->RSTCON0 |=(1<<PType);
    222          		else
    223          			LPC_SC->RSTCON0 &=~(1<<PType);
    224          	}
    225          	else
    226          	{
    227          		if(NewState == ENABLE)
    228          			LPC_SC->RSTCON1 |= (1<<(PType - 31));
    229          		else
    230          			LPC_SC->RSTCON1 &= ~(1<<(PType - 31));
    231          	}
    232          }
    233          // nxp21346
    234          #endif
    235          
    236          /*********************************************************************//**
    237           * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
    238           * @param[in]	None
    239           * @return		None
    240           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    241          void CLKPWR_Sleep(void)
    242          {
    243          	LPC_SC->PCON = 0x00;
   \                     CLKPWR_Sleep:
   \   00000000   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400fc0c0
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
    244          	/* Sleep Mode*/
    245          	__WFI();
   \   00000006   0xBF30             WFI      
    246          }
   \   00000008   0x4770             BX       LR               ;; return
    247          
    248          
    249          /*********************************************************************//**
    250           * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
    251           * @param[in]	None
    252           * @return		None
    253           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          void CLKPWR_DeepSleep(void)
    255          {
    256              /* Deep-Sleep Mode, set SLEEPDEEP bit */
    257          	SCB->SCR = 0x4;
   \                     CLKPWR_DeepSleep:
   \   00000000   0x....             LDR.N    R0,??DataTable6_10  ;; 0xe000ed10
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
    258          	LPC_SC->PCON = 0x8;
   \   00000006   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400fc0c0
   \   00000008   0x2108             MOVS     R1,#+8
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    259          	/* Deep Sleep Mode*/
    260          	__WFI();
   \   0000000C   0xBF30             WFI      
    261          }
   \   0000000E   0x4770             BX       LR               ;; return
    262          
    263          
    264          /*********************************************************************//**
    265           * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
    266           * @param[in]	None
    267           * @return		None
    268           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    269          void CLKPWR_PowerDown(void)
    270          {
    271              /* Deep-Sleep Mode, set SLEEPDEEP bit */
    272          	SCB->SCR = 0x4;
   \                     CLKPWR_PowerDown:
   \   00000000   0x....             LDR.N    R0,??DataTable6_10  ;; 0xe000ed10
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
    273          	LPC_SC->PCON = 0x09;
   \   00000006   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400fc0c0
   \   00000008   0x2109             MOVS     R1,#+9
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    274          	/* Power Down Mode*/
    275          	__WFI();
   \   0000000C   0xBF30             WFI      
    276          }
   \   0000000E   0x4770             BX       LR               ;; return
    277          
    278          
    279          /*********************************************************************//**
    280           * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
    281           * @param[in]	None
    282           * @return		None
    283           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    284          void CLKPWR_DeepPowerDown(void)
    285          {
    286              /* Deep-Sleep Mode, set SLEEPDEEP bit */
    287          	SCB->SCR = 0x4;
   \                     CLKPWR_DeepPowerDown:
   \   00000000   0x....             LDR.N    R0,??DataTable6_10  ;; 0xe000ed10
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
    288          	LPC_SC->PCON = 0x03;
   \   00000006   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400fc0c0
   \   00000008   0x2103             MOVS     R1,#+3
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    289          	/* Deep Power Down Mode*/
    290          	__WFI();
   \   0000000C   0xBF30             WFI      
    291          }
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x400FC104         DC32     0x400fc104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x400FC100         DC32     0x400fc100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x400FC108         DC32     0x400fc108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     PeripheralClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     EMCClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     USBClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x400FC0C0         DC32     0x400fc0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0xE000ED10         DC32     0xe000ed10
    292          
    293          /**
    294           * @}
    295           */
    296          
    297          /**
    298           * @}
    299           */
    300          
    301          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CLKPWR_ConfigPPWR
       0   CLKPWR_DeepPowerDown
       0   CLKPWR_DeepSleep
       0   CLKPWR_GetCLK
       0   CLKPWR_PowerDown
      16   CLKPWR_SetCLKDiv
        16   -> SystemCoreClockUpdate
       0   CLKPWR_Sleep
       0   __WFI


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      36  CLKPWR_ConfigPPWR
      16  CLKPWR_DeepPowerDown
      16  CLKPWR_DeepSleep
      48  CLKPWR_GetCLK
      16  CLKPWR_PowerDown
      90  CLKPWR_SetCLKDiv
      10  CLKPWR_Sleep
       4  SPIFIFrequency
       4  USBFrequency
       4  __WFI

 
   8 bytes in section .bss
 280 bytes in section .text
 
 280 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
