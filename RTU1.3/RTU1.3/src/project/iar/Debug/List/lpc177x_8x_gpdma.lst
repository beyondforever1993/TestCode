###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:40 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_gpdma.c                           #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_gpdma.c -lCN                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\lpc177x_8x_gpdma.lst                       #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\lpc177x_8x_gpdma.o                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Drivers\source\lpc177x_8x_gpdma.c
      1          /*********************************************************************
      2          * $Id$		lpc177x_8x_gpdma.c			2011-06-02
      3          *//**
      4          * @file		lpc177x_8x_gpdma.c
      5          * @brief	Contains all functions support for GPDMA firmware library
      6          *			on LPC177x_8x
      7          * @version	1.0
      8          * @date		02. June. 2011
      9          * @author	NXP MCU SW Application Team
     10          * 
     11          * Copyright(C) 2011, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          * Permission to use, copy, modify, and distribute this software and its
     26          * documentation is hereby granted, under NXP Semiconductors'
     27          * relevant copyright in the software, without fee, provided that it
     28          * is used in conjunction with NXP Semiconductors microcontrollers.  This
     29          * copyright, permission, and disclaimer notice must appear in all copies of
     30          * this code.
     31          **********************************************************************/
     32          
     33          /* Peripheral group ----------------------------------------------------------- */
     34          /** @addtogroup GPDMA
     35           * @{
     36           */
     37          #ifdef __BUILD_WITH_EXAMPLE__
     38          #include "lpc177x_8x_libcfg.h"
     39          #else
     40          #include "lpc177x_8x_libcfg_default.h"
     41          #endif /* __BUILD_WITH_EXAMPLE__ */
     42          #ifdef _GPDMA
     43          
     44          /* Includes ------------------------------------------------------------------- */
     45          #include "lpc177x_8x_gpdma.h"
     46          #include "lpc177x_8x_clkpwr.h"
     47          
     48          /* Private Variables ---------------------------------------------------------- */
     49          /** @defgroup GPDMA_Private_Variables GPDMA Private Variables
     50           * @{
     51           */
     52          
     53          /**
     54           * @brief Lookup Table of Connection Type matched with
     55           * Peripheral Data (FIFO) register base address
     56           */

   \                                 In section .data, align 4
     57          volatile const void *GPDMA_LUTPerAddr[] = {
   \                     GPDMA_LUTPerAddr:
   \   00000000   0x00000000         DC32 0H, 400C0080H, 40088008H, 40088008H, 40030008H, 40030008H
   \              0x400C0080   
   \              0x40088008   
   \              0x40088008   
   \              0x40030008   
   \              0x40030008   
   \   00000018   0x400AC008         DC32 400AC008H, 400AC008H, 40034004H, 4008C000H, 4000C000H, 4000C000H
   \              0x400AC008   
   \              0x40034004   
   \              0x4008C000   
   \              0x4000C000   
   \              0x4000C000   
   \   00000030   0x40010000         DC32 40010000H, 40010000H, 40098000H, 40098000H, 40004018H, 4000401CH
   \              0x40010000   
   \              0x40098000   
   \              0x40098000   
   \              0x40004018   
   \              0x4000401C   
   \   00000048   0x40008018         DC32 40008018H, 4000801CH, 40090018H, 4009001CH, 400A8008H, 400A800CH
   \              0x4000801C   
   \              0x40090018   
   \              0x4009001C   
   \              0x400A8008   
   \              0x400A800C   
   \   00000060   0x00000000         DC32 0H, 0H, 4009C000H, 4009C000H, 400A4000H, 400A4000H, 40094018H
   \              0x00000000   
   \              0x4009C000   
   \              0x4009C000   
   \              0x400A4000   
   \              0x400A4000   
   \              0x40094018   
   \   0000007C   0x4009401C         DC32 4009401CH
     58          		0,								// Revered
     59          		(&LPC_MCI->FIFO),				// SD Card
     60          		(&LPC_SSP0->DR),				// SSP0 Tx
     61          		(&LPC_SSP0->DR),				// SSP0 Rx
     62          		(&LPC_SSP1->DR),				// SSP1 Tx
     63          		(&LPC_SSP1->DR),				// SSP1 Rx
     64          		(&LPC_SSP2->DR),				// SSP2 Tx
     65          		(&LPC_SSP2->DR),				// SSP2 Rx
     66          		(&LPC_ADC->GDR),				// ADC
     67          		(&LPC_DAC->CR),					// DAC
     68          		(&LPC_UART0->/*RBTHDLR.*/THR),	// UART0 Tx
     69          		(&LPC_UART0->/*RBTHDLR.*/RBR),	// UART0 Rx
     70          		(&LPC_UART1->/*RBTHDLR.*/THR),	// UART1 Tx
     71          		(&LPC_UART1->/*RBTHDLR.*/RBR),	// UART1 Rx
     72          		(&LPC_UART2->/*RBTHDLR.*/THR),	// UART2 Tx
     73          		(&LPC_UART2->/*RBTHDLR.*/RBR),	// UART2 Rx
     74          		(&LPC_TIM0->MR0),				// MAT0.0
     75          		(&LPC_TIM0->MR1),				// MAT0.1
     76          		(&LPC_TIM1->MR0),				// MAT1.0
     77          		(&LPC_TIM1->MR1),				// MAT1.1
     78          		(&LPC_TIM2->MR0),				// MAT2.0
     79          		(&LPC_TIM2->MR1),				// MAT2.1
     80          		(&LPC_I2S->TXFIFO), 			// I2S Tx
     81          		(&LPC_I2S->RXFIFO), 			// I2S Rx
     82          		0,								// Reverse
     83          		0,								// Reverse
     84          		(&LPC_UART3->/*RBTHDLR.*/THR),	// UART3 Tx
     85          		(&LPC_UART3->/*RBTHDLR.*/RBR),	// UART3 Rx
     86          		(&LPC_UART4->/*RBTHDLR.*/THR),	// UART4 Tx
     87          		(&LPC_UART4->/*RBTHDLR.*/RBR),	// UART4 Rx
     88          		(&LPC_TIM3->MR0),				// MAT3.0
     89          		(&LPC_TIM3->MR1),				// MAT3.1
     90          };
     91          
     92          /**
     93           * @brief Lookup Table of GPDMA Channel Number matched with
     94           * GPDMA channel pointer
     95           */

   \                                 In section .data, align 4
     96          const LPC_GPDMACH_TypeDef *pGPDMACh[8] = {
   \                     pGPDMACh:
   \   00000000   0x20080100         DC32 20080100H, 20080120H, 20080140H, 20080160H, 20080180H, 200801A0H
   \              0x20080120   
   \              0x20080140   
   \              0x20080160   
   \              0x20080180   
   \              0x200801A0   
   \   00000018   0x200801C0         DC32 200801C0H, 200801E0H
   \              0x200801E0   
     97          		LPC_GPDMACH0,	// GPDMA Channel 0
     98          		LPC_GPDMACH1,	// GPDMA Channel 1
     99          		LPC_GPDMACH2,	// GPDMA Channel 2
    100          		LPC_GPDMACH3,	// GPDMA Channel 3
    101          		LPC_GPDMACH4,	// GPDMA Channel 4
    102          		LPC_GPDMACH5,	// GPDMA Channel 5
    103          		LPC_GPDMACH6,	// GPDMA Channel 6
    104          		LPC_GPDMACH7,	// GPDMA Channel 7
    105          };
    106          /**
    107           * @brief Optimized Peripheral Source and Destination burst size
    108           */

   \                                 In section .rodata, align 4
    109          const uint8_t GPDMA_LUTPerBurst[] = {
   \                     GPDMA_LUTPerBurst:
   \   00000000   0x00 0x02          DC8 0, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x04         
   \   00000017   0x04 0x00          DC8 4, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    110          		0,							// Reserved
    111          		GPDMA_BSIZE_8,				// SD Card
    112          		GPDMA_BSIZE_4,				// SSP0 Tx
    113          		GPDMA_BSIZE_4,				// SSP0 Rx
    114          		GPDMA_BSIZE_4,				// SSP1 Tx
    115          		GPDMA_BSIZE_4,				// SSP1 Rx
    116          		GPDMA_BSIZE_4,				// SSP2 Tx
    117          		GPDMA_BSIZE_4,				// SSP2 Rx
    118          		GPDMA_BSIZE_1,				// ADC
    119          		GPDMA_BSIZE_1,				// DAC
    120          		GPDMA_BSIZE_1,				// UART0 Tx
    121          		GPDMA_BSIZE_1,				// UART0 Rx
    122          		GPDMA_BSIZE_1,				// UART1 Tx
    123          		GPDMA_BSIZE_1,				// UART1 Rx
    124          		GPDMA_BSIZE_1,				// UART2 Tx
    125          		GPDMA_BSIZE_1,				// UART2 Rx
    126          		GPDMA_BSIZE_1,				// MAT0.0
    127          		GPDMA_BSIZE_1,				// MAT0.1
    128          		GPDMA_BSIZE_1,				// MAT1.0
    129          		GPDMA_BSIZE_1,				// MAT1.1
    130          		GPDMA_BSIZE_1,				// MAT2.0
    131          		GPDMA_BSIZE_1,				// MAT2.1
    132          		GPDMA_BSIZE_32, 			// I2S channel 0
    133          		GPDMA_BSIZE_32, 			// I2S channel 1
    134          		0,							// Reserved
    135          		0, 							// Reserved
    136          		GPDMA_BSIZE_1,				// UART3 Tx
    137          		GPDMA_BSIZE_1,				// UART3 Rx
    138          		GPDMA_BSIZE_1,				// UART4 Tx
    139          		GPDMA_BSIZE_1,				// UART4 Rx
    140          		GPDMA_BSIZE_1,				// MAT3.0
    141          		GPDMA_BSIZE_1,				// MAT3.1
    142          };
    143          /**
    144           * @brief Optimized Peripheral Source and Destination transfer width
    145           */

   \                                 In section .rodata, align 4
    146          const uint8_t GPDMA_LUTPerWid[] = {
   \                     GPDMA_LUTPerWid:
   \   00000000   0x00 0x02          DC8 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02         
   \   00000017   0x02 0x00          DC8 2, 0, 0, 0, 0, 0, 0, 2, 2
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x02         
    147          		0,								// Reserved
    148          		GPDMA_WIDTH_WORD,				// SD Card
    149          		GPDMA_WIDTH_BYTE,				// SSP0 Tx
    150          		GPDMA_WIDTH_BYTE,				// SSP0 Rx
    151          		GPDMA_WIDTH_BYTE,				// SSP1 Tx
    152          		GPDMA_WIDTH_BYTE,				// SSP1 Rx
    153          		GPDMA_WIDTH_BYTE,				// SSP2 Tx
    154          		GPDMA_WIDTH_BYTE,				// SSP2 Rx
    155          		GPDMA_WIDTH_WORD,				// ADC
    156          		GPDMA_WIDTH_BYTE,				// DAC
    157          		GPDMA_WIDTH_BYTE,				// UART0 Tx
    158          		GPDMA_WIDTH_BYTE,				// UART0 Rx
    159          		GPDMA_WIDTH_BYTE,				// UART1 Tx
    160          		GPDMA_WIDTH_BYTE,				// UART1 Rx
    161          		GPDMA_WIDTH_BYTE,				// UART2 Tx
    162          		GPDMA_WIDTH_BYTE,				// UART2 Rx
    163          		GPDMA_WIDTH_WORD,				// MAT0.0
    164          		GPDMA_WIDTH_WORD,				// MAT0.1
    165          		GPDMA_WIDTH_WORD,				// MAT1.0
    166          		GPDMA_WIDTH_WORD,				// MAT1.1
    167          		GPDMA_WIDTH_WORD,				// MAT2.0
    168          		GPDMA_WIDTH_WORD,				// MAT2.1
    169          		GPDMA_WIDTH_WORD, 				// I2S channel 0
    170          		GPDMA_WIDTH_WORD, 				// I2S channel 1
    171          		0,								// Reserved
    172          		0, 								// Reserved
    173          		GPDMA_WIDTH_BYTE,				// UART3 Tx
    174          		GPDMA_WIDTH_BYTE,				// UART3 Rx
    175          		GPDMA_WIDTH_BYTE,				// UART4 Tx
    176          		GPDMA_WIDTH_BYTE,				// UART4 Rx
    177          		GPDMA_WIDTH_WORD,				// MAT3.0
    178          		GPDMA_WIDTH_WORD,				// MAT3.1
    179          };
    180          
    181          /**
    182           * @}
    183           */
    184          
    185          /* Public Functions ----------------------------------------------------------- */
    186          /** @addtogroup GPDMA_Public_Functions
    187           * @{
    188           */
    189          
    190          /********************************************************************//**
    191           * @brief 		Initialize GPDMA controller
    192           * @param 		None
    193           * @return 		None
    194           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    195          void GPDMA_Init(void)
    196          {
   \                     GPDMA_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    197          	/* Enable GPDMA clock */
    198          	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCGPDMA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x5000      MOVS     R0,#+536870912
   \   00000008   0x.... 0x....      BL       CLKPWR_ConfigPPWR
    199          
    200          	// Reset all channel configuration register
    201          	LPC_GPDMACH0->CConfig = 0;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable4  ;; 0x20080110
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6001             STR      R1,[R0, #+0]
    202          	LPC_GPDMACH1->CConfig = 0;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable4_1  ;; 0x20080130
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    203          	LPC_GPDMACH2->CConfig = 0;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable4_2  ;; 0x20080150
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6001             STR      R1,[R0, #+0]
    204          	LPC_GPDMACH3->CConfig = 0;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable4_3  ;; 0x20080170
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    205          	LPC_GPDMACH4->CConfig = 0;
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable4_4  ;; 0x20080190
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6001             STR      R1,[R0, #+0]
    206          	LPC_GPDMACH5->CConfig = 0;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable4_5  ;; 0x200801b0
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    207          	LPC_GPDMACH6->CConfig = 0;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable4_6  ;; 0x200801d0
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x6001             STR      R1,[R0, #+0]
    208          	LPC_GPDMACH7->CConfig = 0;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable4_7  ;; 0x200801f0
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x6001             STR      R1,[R0, #+0]
    209          
    210          	/* Clear all DMA interrupt and error flag */
    211          	LPC_GPDMA->IntTCClear = 0xFF;
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable4_8  ;; 0x20080008
   \   00000050   0x21FF             MOVS     R1,#+255
   \   00000052   0x6001             STR      R1,[R0, #+0]
    212          	LPC_GPDMA->IntErrClr = 0xFF;
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable4_9  ;; 0x20080010
   \   00000058   0x21FF             MOVS     R1,#+255
   \   0000005A   0x6001             STR      R1,[R0, #+0]
    213          }
   \   0000005C   0xBD01             POP      {R0,PC}          ;; return
    214          
    215          /********************************************************************//**
    216           * @brief 		Setup GPDMA channel peripheral according to the specified
    217           *               parameters in the GPDMAChannelConfig.
    218           * @param[in]	GPDMAChannelConfig Pointer to a GPDMA_CH_CFG_Type
    219           * 									structure that contains the configuration
    220           * 									information for the specified GPDMA channel peripheral.
    221           * @return		ERROR if selected channel is enabled before
    222           * 				or SUCCESS if channel is configured successfully
    223           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    224          Status GPDMA_Setup(GPDMA_Channel_CFG_Type *GPDMAChannelConfig)
    225          {
   \                     GPDMA_Setup:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0001             MOVS     R1,R0
    226          	LPC_GPDMACH_TypeDef *pDMAch;
    227          	uint32_t tmp1, tmp2;
    228          
    229          	if (LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(GPDMAChannelConfig->ChannelNum))) {
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable4_10  ;; 0x2008001c
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2501             MOVS     R5,#+1
   \   0000000C   0x680E             LDR      R6,[R1, #+0]
   \   0000000E   0x40B5             LSLS     R5,R5,R6
   \   00000010   0x4028             ANDS     R0,R5,R0
   \   00000012   0x0600             LSLS     R0,R0,#+24
   \   00000014   0xD001             BEQ.N    ??GPDMA_Setup_0
    230          		// This channel is enabled, return ERROR, need to release this channel first
    231          		return ERROR;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE118             B.N      ??GPDMA_Setup_1
    232          	}
    233          
    234          	// Get Channel pointer
    235          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[GPDMAChannelConfig->ChannelNum];
   \                     ??GPDMA_Setup_0:
   \   0000001A   0x6808             LDR      R0,[R1, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable4_11
   \   00000020   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \   00000024   0x0002             MOVS     R2,R0
    236          
    237          	// Reset the Interrupt status
    238          	LPC_GPDMA->IntTCClear = GPDMA_DMACIntTCClear_Ch(GPDMAChannelConfig->ChannelNum);
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x680D             LDR      R5,[R1, #+0]
   \   0000002A   0x40A8             LSLS     R0,R0,R5
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x....             LDR.N    R5,??DataTable4_8  ;; 0x20080008
   \   00000030   0x6028             STR      R0,[R5, #+0]
    239          	LPC_GPDMA->IntErrClr = GPDMA_DMACIntErrClr_Ch(GPDMAChannelConfig->ChannelNum);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x680D             LDR      R5,[R1, #+0]
   \   00000036   0x40A8             LSLS     R0,R0,R5
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x....             LDR.N    R5,??DataTable4_9  ;; 0x20080010
   \   0000003C   0x6028             STR      R0,[R5, #+0]
    240          
    241          	// Clear DMA configure
    242          	pDMAch->CControl = 0x00;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x60D0             STR      R0,[R2, #+12]
    243          	pDMAch->CConfig = 0x00;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x6110             STR      R0,[R2, #+16]
    244          
    245          	/* Assign Linker List Item value */
    246          	pDMAch->CLLI = GPDMAChannelConfig->DMALLI;
   \   00000046   0x6A08             LDR      R0,[R1, #+32]
   \   00000048   0x6090             STR      R0,[R2, #+8]
    247          
    248          	/* Set value to Channel Control Registers */
    249          	switch (GPDMAChannelConfig->TransferType)
   \   0000004A   0x6948             LDR      R0,[R1, #+20]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD00A             BEQ.N    ??GPDMA_Setup_2
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD01F             BEQ.N    ??GPDMA_Setup_3
   \   00000054   0x2802             CMP      R0,#+2
   \   00000056   0xD047             BEQ.N    ??GPDMA_Setup_4
   \   00000058   0x2803             CMP      R0,#+3
   \   0000005A   0xD06F             BEQ.N    ??GPDMA_Setup_5
   \   0000005C   0x2805             CMP      R0,#+5
   \   0000005E   0xD019             BEQ.N    ??GPDMA_Setup_3
   \   00000060   0x2806             CMP      R0,#+6
   \   00000062   0xD041             BEQ.N    ??GPDMA_Setup_4
   \   00000064   0xE097             B.N      ??GPDMA_Setup_6
    250          	{
    251          	// Memory to memory
    252          	case GPDMA_TRANSFERTYPE_M2M:
    253          		// Assign physical source and destination address
    254          		pDMAch->CSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_2:
   \   00000066   0x68C8             LDR      R0,[R1, #+12]
   \   00000068   0x6010             STR      R0,[R2, #+0]
    255          		pDMAch->CDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   0000006A   0x6908             LDR      R0,[R1, #+16]
   \   0000006C   0x6050             STR      R0,[R2, #+4]
    256          		pDMAch->CControl
    257          				= GPDMA_DMACCxControl_TransferSize(GPDMAChannelConfig->TransferSize) \
    258          						| GPDMA_DMACCxControl_SBSize(GPDMA_BSIZE_32) \
    259          						| GPDMA_DMACCxControl_DBSize(GPDMA_BSIZE_32) \
    260          						| GPDMA_DMACCxControl_SWidth(GPDMAChannelConfig->TransferWidth) \
    261          						| GPDMA_DMACCxControl_DWidth(GPDMAChannelConfig->TransferWidth) \
    262          						| GPDMA_DMACCxControl_SI \
    263          						| GPDMA_DMACCxControl_DI \
    264          						| GPDMA_DMACCxControl_I;
   \   0000006E   0x6848             LDR      R0,[R1, #+4]
   \   00000070   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000072   0x0D00             LSRS     R0,R0,#+20
   \   00000074   0x7A0D             LDRB     R5,[R1, #+8]
   \   00000076   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000007A   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   0000007E   0x7A0D             LDRB     R5,[R1, #+8]
   \   00000080   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000084   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   00000088   0xF040 0x400C      ORR      R0,R0,#0x8C000000
   \   0000008C   0xF450 0x3010      ORRS     R0,R0,#0x24000
   \   00000090   0x60D0             STR      R0,[R2, #+12]
    265          		break;
   \   00000092   0xE082             B.N      ??GPDMA_Setup_7
    266          	// Memory to peripheral
    267          	case GPDMA_TRANSFERTYPE_M2P:
    268          	case GPDMA_TRANSFERTYPE_M2P_DEST_CTRL:
    269          		// Assign physical source
    270          		pDMAch->CSrcAddr = GPDMAChannelConfig->SrcMemAddr;
   \                     ??GPDMA_Setup_3:
   \   00000094   0x68C8             LDR      R0,[R1, #+12]
   \   00000096   0x6010             STR      R0,[R2, #+0]
    271          		// Assign peripheral destination address
    272          		pDMAch->CDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000098   0x69C8             LDR      R0,[R1, #+28]
   \   0000009A   0x....             LDR.N    R5,??DataTable4_12
   \   0000009C   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \   000000A0   0x6050             STR      R0,[R2, #+4]
    273          		pDMAch->CControl
    274          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    275          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    276          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    277          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    278          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    279          						| GPDMA_DMACCxControl_SI \
    280          						| GPDMA_DMACCxControl_I;
   \   000000A2   0x6848             LDR      R0,[R1, #+4]
   \   000000A4   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000A6   0x0D00             LSRS     R0,R0,#+20
   \   000000A8   0x69CD             LDR      R5,[R1, #+28]
   \   000000AA   0x....             LDR.N    R6,??DataTable4_13
   \   000000AC   0x5DAD             LDRB     R5,[R5, R6]
   \   000000AE   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000B2   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   000000B6   0x69CD             LDR      R5,[R1, #+28]
   \   000000B8   0x....             LDR.N    R6,??DataTable4_13
   \   000000BA   0x5DAD             LDRB     R5,[R5, R6]
   \   000000BC   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000C0   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   000000C4   0x69CD             LDR      R5,[R1, #+28]
   \   000000C6   0x....             LDR.N    R6,??DataTable4_14
   \   000000C8   0x5DAD             LDRB     R5,[R5, R6]
   \   000000CA   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000CE   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   000000D2   0x69CD             LDR      R5,[R1, #+28]
   \   000000D4   0x....             LDR.N    R6,??DataTable4_14
   \   000000D6   0x5DAD             LDRB     R5,[R5, R6]
   \   000000D8   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   000000DC   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   000000E0   0xF050 0x4004      ORRS     R0,R0,#0x84000000
   \   000000E4   0x60D0             STR      R0,[R2, #+12]
    281          		break;
   \   000000E6   0xE058             B.N      ??GPDMA_Setup_7
    282          	// Peripheral to memory
    283          	case GPDMA_TRANSFERTYPE_P2M:
    284          	case GPDMA_TRANSFERTYPE_P2M_SRC_CTRL:
    285          		// Assign peripheral source address
    286          		pDMAch->CSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_4:
   \   000000E8   0x6988             LDR      R0,[R1, #+24]
   \   000000EA   0x....             LDR.N    R5,??DataTable4_12
   \   000000EC   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \   000000F0   0x6010             STR      R0,[R2, #+0]
    287          		// Assign memory destination address
    288          		pDMAch->CDestAddr = GPDMAChannelConfig->DstMemAddr;
   \   000000F2   0x6908             LDR      R0,[R1, #+16]
   \   000000F4   0x6050             STR      R0,[R2, #+4]
    289          		pDMAch->CControl
    290          				= GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    291          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    292          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    293          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    294          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    295          						| GPDMA_DMACCxControl_DI \
    296          						| GPDMA_DMACCxControl_I;
   \   000000F6   0x6848             LDR      R0,[R1, #+4]
   \   000000F8   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   000000FA   0x0D00             LSRS     R0,R0,#+20
   \   000000FC   0x698D             LDR      R5,[R1, #+24]
   \   000000FE   0x....             LDR.N    R6,??DataTable4_13
   \   00000100   0x5DAD             LDRB     R5,[R5, R6]
   \   00000102   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000106   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   0000010A   0x698D             LDR      R5,[R1, #+24]
   \   0000010C   0x....             LDR.N    R6,??DataTable4_13
   \   0000010E   0x5DAD             LDRB     R5,[R5, R6]
   \   00000110   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000114   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   00000118   0x698D             LDR      R5,[R1, #+24]
   \   0000011A   0x....             LDR.N    R6,??DataTable4_14
   \   0000011C   0x5DAD             LDRB     R5,[R5, R6]
   \   0000011E   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000122   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   00000126   0x698D             LDR      R5,[R1, #+24]
   \   00000128   0x....             LDR.N    R6,??DataTable4_14
   \   0000012A   0x5DAD             LDRB     R5,[R5, R6]
   \   0000012C   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000130   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   00000134   0xF050 0x4008      ORRS     R0,R0,#0x88000000
   \   00000138   0x60D0             STR      R0,[R2, #+12]
    297          		break;
   \   0000013A   0xE02E             B.N      ??GPDMA_Setup_7
    298          	// Peripheral to peripheral
    299          	case GPDMA_TRANSFERTYPE_P2P:
    300          		// Assign peripheral source address
    301          		pDMAch->CSrcAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->SrcConn];
   \                     ??GPDMA_Setup_5:
   \   0000013C   0x6988             LDR      R0,[R1, #+24]
   \   0000013E   0x....             LDR.N    R5,??DataTable4_12
   \   00000140   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \   00000144   0x6010             STR      R0,[R2, #+0]
    302          		// Assign peripheral destination address
    303          		pDMAch->CDestAddr = (uint32_t)GPDMA_LUTPerAddr[GPDMAChannelConfig->DstConn];
   \   00000146   0x69C8             LDR      R0,[R1, #+28]
   \   00000148   0x....             LDR.N    R5,??DataTable4_12
   \   0000014A   0xF855 0x0020      LDR      R0,[R5, R0, LSL #+2]
   \   0000014E   0x6050             STR      R0,[R2, #+4]
    304          		pDMAch->CControl = GPDMA_DMACCxControl_TransferSize((uint32_t)GPDMAChannelConfig->TransferSize) \
    305          						| GPDMA_DMACCxControl_SBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->SrcConn]) \
    306          						| GPDMA_DMACCxControl_DBSize((uint32_t)GPDMA_LUTPerBurst[GPDMAChannelConfig->DstConn]) \
    307          						| GPDMA_DMACCxControl_SWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->SrcConn]) \
    308          						| GPDMA_DMACCxControl_DWidth((uint32_t)GPDMA_LUTPerWid[GPDMAChannelConfig->DstConn]) \
    309          						| GPDMA_DMACCxControl_I;
   \   00000150   0x6848             LDR      R0,[R1, #+4]
   \   00000152   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000154   0x0D00             LSRS     R0,R0,#+20
   \   00000156   0x698D             LDR      R5,[R1, #+24]
   \   00000158   0x....             LDR.N    R6,??DataTable4_13
   \   0000015A   0x5DAD             LDRB     R5,[R5, R6]
   \   0000015C   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000160   0xEA50 0x3005      ORRS     R0,R0,R5, LSL #+12
   \   00000164   0x69CD             LDR      R5,[R1, #+28]
   \   00000166   0x....             LDR.N    R6,??DataTable4_13
   \   00000168   0x5DAD             LDRB     R5,[R5, R6]
   \   0000016A   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000016E   0xEA50 0x30C5      ORRS     R0,R0,R5, LSL #+15
   \   00000172   0x698D             LDR      R5,[R1, #+24]
   \   00000174   0x....             LDR.N    R6,??DataTable4_14
   \   00000176   0x5DAD             LDRB     R5,[R5, R6]
   \   00000178   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000017C   0xEA50 0x4085      ORRS     R0,R0,R5, LSL #+18
   \   00000180   0x69CD             LDR      R5,[R1, #+28]
   \   00000182   0x....             LDR.N    R6,??DataTable4_14
   \   00000184   0x5DAD             LDRB     R5,[R5, R6]
   \   00000186   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   0000018A   0xEA50 0x5045      ORRS     R0,R0,R5, LSL #+21
   \   0000018E   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000192   0x60D0             STR      R0,[R2, #+12]
    310          		break;
   \   00000194   0xE001             B.N      ??GPDMA_Setup_7
    311          	// Do not support any more transfer type, return ERROR
    312          	default:
    313          		return ERROR;
   \                     ??GPDMA_Setup_6:
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0xE058             B.N      ??GPDMA_Setup_1
    314          	}
    315          
    316          	/* Re-Configure DMA Request Select for source peripheral */
    317          	if((GPDMAChannelConfig->SrcConn != 8)&&(GPDMAChannelConfig->SrcConn != 9))
   \                     ??GPDMA_Setup_7:
   \   0000019A   0x6988             LDR      R0,[R1, #+24]
   \   0000019C   0x2808             CMP      R0,#+8
   \   0000019E   0xD017             BEQ.N    ??GPDMA_Setup_8
   \   000001A0   0x6988             LDR      R0,[R1, #+24]
   \   000001A2   0x2809             CMP      R0,#+9
   \   000001A4   0xD014             BEQ.N    ??GPDMA_Setup_8
    318          	{
    319          		if (GPDMAChannelConfig->SrcConn > 15)
   \   000001A6   0x6988             LDR      R0,[R1, #+24]
   \   000001A8   0x2810             CMP      R0,#+16
   \   000001AA   0xD309             BCC.N    ??GPDMA_Setup_9
    320          		{
    321          			LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->SrcConn - 16));
   \   000001AC   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0x2501             MOVS     R5,#+1
   \   000001B2   0x698E             LDR      R6,[R1, #+24]
   \   000001B4   0x3E10             SUBS     R6,R6,#+16
   \   000001B6   0x40B5             LSLS     R5,R5,R6
   \   000001B8   0x4328             ORRS     R0,R5,R0
   \   000001BA   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001BC   0x6028             STR      R0,[R5, #+0]
   \   000001BE   0xE007             B.N      ??GPDMA_Setup_8
    322          		} else {
    323          			LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->SrcConn));
   \                     ??GPDMA_Setup_9:
   \   000001C0   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001C2   0x6800             LDR      R0,[R0, #+0]
   \   000001C4   0x2501             MOVS     R5,#+1
   \   000001C6   0x698E             LDR      R6,[R1, #+24]
   \   000001C8   0x40B5             LSLS     R5,R5,R6
   \   000001CA   0x43A8             BICS     R0,R0,R5
   \   000001CC   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001CE   0x6028             STR      R0,[R5, #+0]
    324          		}
    325          	}
    326          
    327          	/* Re-Configure DMA Request Select for Destination peripheral */
    328          	if((GPDMAChannelConfig->DstConn != 8)&&(GPDMAChannelConfig->DstConn != 9))
   \                     ??GPDMA_Setup_8:
   \   000001D0   0x69C8             LDR      R0,[R1, #+28]
   \   000001D2   0x2808             CMP      R0,#+8
   \   000001D4   0xD017             BEQ.N    ??GPDMA_Setup_10
   \   000001D6   0x69C8             LDR      R0,[R1, #+28]
   \   000001D8   0x2809             CMP      R0,#+9
   \   000001DA   0xD014             BEQ.N    ??GPDMA_Setup_10
    329          	{
    330          		if (GPDMAChannelConfig->DstConn > 15)
   \   000001DC   0x69C8             LDR      R0,[R1, #+28]
   \   000001DE   0x2810             CMP      R0,#+16
   \   000001E0   0xD309             BCC.N    ??GPDMA_Setup_11
    331          		{
    332          			LPC_SC->DMAREQSEL |= (1<<(GPDMAChannelConfig->DstConn - 16));
   \   000001E2   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001E4   0x6800             LDR      R0,[R0, #+0]
   \   000001E6   0x2501             MOVS     R5,#+1
   \   000001E8   0x69CE             LDR      R6,[R1, #+28]
   \   000001EA   0x3E10             SUBS     R6,R6,#+16
   \   000001EC   0x40B5             LSLS     R5,R5,R6
   \   000001EE   0x4328             ORRS     R0,R5,R0
   \   000001F0   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   000001F2   0x6028             STR      R0,[R5, #+0]
   \   000001F4   0xE007             B.N      ??GPDMA_Setup_10
    333          		} else {
    334          			LPC_SC->DMAREQSEL &= ~(1<<(GPDMAChannelConfig->DstConn));
   \                     ??GPDMA_Setup_11:
   \   000001F6   0x....             LDR.N    R0,??DataTable4_15  ;; 0x400fc1c4
   \   000001F8   0x6800             LDR      R0,[R0, #+0]
   \   000001FA   0x2501             MOVS     R5,#+1
   \   000001FC   0x69CE             LDR      R6,[R1, #+28]
   \   000001FE   0x40B5             LSLS     R5,R5,R6
   \   00000200   0x43A8             BICS     R0,R0,R5
   \   00000202   0x....             LDR.N    R5,??DataTable4_15  ;; 0x400fc1c4
   \   00000204   0x6028             STR      R0,[R5, #+0]
    335          		}
    336          	}
    337          
    338          	/* Enable DMA channels, little endian */
    339          	LPC_GPDMA->Config = GPDMA_DMACConfig_E;
   \                     ??GPDMA_Setup_10:
   \   00000206   0x....             LDR.N    R0,??DataTable4_16  ;; 0x20080030
   \   00000208   0x2501             MOVS     R5,#+1
   \   0000020A   0x6005             STR      R5,[R0, #+0]
    340          	while (!(LPC_GPDMA->Config & GPDMA_DMACConfig_E));
   \                     ??GPDMA_Setup_12:
   \   0000020C   0x....             LDR.N    R0,??DataTable4_16  ;; 0x20080030
   \   0000020E   0x6800             LDR      R0,[R0, #+0]
   \   00000210   0x07C0             LSLS     R0,R0,#+31
   \   00000212   0xD5FB             BPL.N    ??GPDMA_Setup_12
    341          
    342          	// Calculate absolute value for Connection number
    343          	tmp1 = GPDMAChannelConfig->SrcConn;
   \   00000214   0x6988             LDR      R0,[R1, #+24]
   \   00000216   0x0003             MOVS     R3,R0
    344          	tmp1 = ((tmp1 > 15) ? (tmp1 - 16) : tmp1);
   \   00000218   0x2B10             CMP      R3,#+16
   \   0000021A   0xD301             BCC.N    ??GPDMA_Setup_13
   \   0000021C   0x3B10             SUBS     R3,R3,#+16
   \   0000021E   0xE7FF             B.N      ??GPDMA_Setup_14
    345          	tmp2 = GPDMAChannelConfig->DstConn;
   \                     ??GPDMA_Setup_13:
   \                     ??GPDMA_Setup_14:
   \   00000220   0x69C8             LDR      R0,[R1, #+28]
   \   00000222   0x0004             MOVS     R4,R0
    346          	tmp2 = ((tmp2 > 15) ? (tmp2 - 16) : tmp2);
   \   00000224   0x2C10             CMP      R4,#+16
   \   00000226   0xD301             BCC.N    ??GPDMA_Setup_15
   \   00000228   0x3C10             SUBS     R4,R4,#+16
   \   0000022A   0xE7FF             B.N      ??GPDMA_Setup_16
    347          
    348          	// Configure DMA Channel, enable Error Counter and Terminate counter
    349          	pDMAch->CConfig = GPDMA_DMACCxConfig_IE | GPDMA_DMACCxConfig_ITC /*| GPDMA_DMACCxConfig_E*/ \
    350          		| GPDMA_DMACCxConfig_TransferType((uint32_t)GPDMAChannelConfig->TransferType) \
    351          		| GPDMA_DMACCxConfig_SrcPeripheral(tmp1) \
    352          		| GPDMA_DMACCxConfig_DestPeripheral(tmp2);
   \                     ??GPDMA_Setup_15:
   \                     ??GPDMA_Setup_16:
   \   0000022C   0x7D08             LDRB     R0,[R1, #+20]
   \   0000022E   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000232   0xF013 0x051F      ANDS     R5,R3,#0x1F
   \   00000236   0x006D             LSLS     R5,R5,#+1
   \   00000238   0xEA55 0x20C0      ORRS     R0,R5,R0, LSL #+11
   \   0000023C   0xF014 0x051F      ANDS     R5,R4,#0x1F
   \   00000240   0xEA50 0x1085      ORRS     R0,R0,R5, LSL #+6
   \   00000244   0xF450 0x4040      ORRS     R0,R0,#0xC000
   \   00000248   0x6110             STR      R0,[R2, #+16]
    353          
    354          	return SUCCESS;
   \   0000024A   0x2001             MOVS     R0,#+1
   \                     ??GPDMA_Setup_1:
   \   0000024C   0xBC70             POP      {R4-R6}
   \   0000024E   0x4770             BX       LR               ;; return
    355          }
    356          
    357          
    358          /*********************************************************************//**
    359           * @brief		Enable/Disable DMA channel
    360           * @param[in]	channelNum	GPDMA channel, should be in range from 0 to 7
    361           * @param[in]	NewState	New State of this command, should be:
    362           * 					- ENABLE.
    363           * 					- DISABLE.
    364           * @return		None
    365           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    366          void GPDMA_ChannelCmd(uint8_t channelNum, FunctionalState NewState)
    367          {
    368          	LPC_GPDMACH_TypeDef *pDMAch;
    369          
    370          	// Get Channel pointer
    371          	pDMAch = (LPC_GPDMACH_TypeDef *) pGPDMACh[channelNum];
   \                     GPDMA_ChannelCmd:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R3,??DataTable4_11
   \   00000004   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000008   0x001A             MOVS     R2,R3
    372          
    373          	if (NewState == ENABLE) {
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD104             BNE.N    ??GPDMA_ChannelCmd_0
    374          		pDMAch->CConfig |= GPDMA_DMACCxConfig_E;
   \   00000010   0x6913             LDR      R3,[R2, #+16]
   \   00000012   0xF053 0x0301      ORRS     R3,R3,#0x1
   \   00000016   0x6113             STR      R3,[R2, #+16]
   \   00000018   0xE003             B.N      ??GPDMA_ChannelCmd_1
    375          	} else {
    376          		pDMAch->CConfig &= ~GPDMA_DMACCxConfig_E;
   \                     ??GPDMA_ChannelCmd_0:
   \   0000001A   0x6913             LDR      R3,[R2, #+16]
   \   0000001C   0x085B             LSRS     R3,R3,#+1
   \   0000001E   0x005B             LSLS     R3,R3,#+1
   \   00000020   0x6113             STR      R3,[R2, #+16]
    377          	}
    378          }
   \                     ??GPDMA_ChannelCmd_1:
   \   00000022   0x4770             BX       LR               ;; return
    379          /*********************************************************************//**
    380           * @brief		Check if corresponding channel does have an active interrupt
    381           * 				request or not
    382           * @param[in]	type		type of status, should be:
    383           * 					- GPDMA_STAT_INT: 		GPDMA Interrupt Status
    384           * 					- GPDMA_STAT_INTTC: 	GPDMA Interrupt Terminal Count Request Status
    385           * 					- GPDMA_STAT_INTERR:	GPDMA Interrupt Error Status
    386           * 					- GPDMA_STAT_RAWINTTC:	GPDMA Raw Interrupt Terminal Count Status
    387           * 					- GPDMA_STAT_RAWINTERR:	GPDMA Raw Error Interrupt Status
    388           * 					- GPDMA_STAT_ENABLED_CH:GPDMA Enabled Channel Status
    389           * @param[in]	channel		GPDMA channel, should be in range from 0 to 7
    390           * @return		IntStatus	status of DMA channel interrupt after masking
    391           * 				Should be:
    392           * 					- SET: the corresponding channel has no active interrupt request
    393           * 					- RESET: the corresponding channel does have an active interrupt request
    394           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    395          IntStatus GPDMA_IntGetStatus(GPDMA_Status_Type type, uint8_t channel)
    396          {
   \                     GPDMA_IntGetStatus:
   \   00000000   0x0002             MOVS     R2,R0
    397          	switch (type)
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD006             BEQ.N    ??GPDMA_IntGetStatus_0
   \   00000008   0x2A02             CMP      R2,#+2
   \   0000000A   0xD01A             BEQ.N    ??GPDMA_IntGetStatus_1
   \   0000000C   0xD30E             BCC.N    ??GPDMA_IntGetStatus_2
   \   0000000E   0x2A04             CMP      R2,#+4
   \   00000010   0xD02D             BEQ.N    ??GPDMA_IntGetStatus_3
   \   00000012   0xD321             BCC.N    ??GPDMA_IntGetStatus_4
   \   00000014   0xE036             B.N      ??GPDMA_IntGetStatus_5
    398          	{
    399          	case GPDMA_STAT_INT: //check status of DMA channel interrupts
    400          		if (LPC_GPDMA->IntStat & (GPDMA_DMACIntStat_Ch(channel)))
   \                     ??GPDMA_IntGetStatus_0:
   \   00000016   0x....             LDR.N    R0,??DataTable4_17  ;; 0x20080000
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x408B             LSLS     R3,R3,R1
   \   0000001E   0x4018             ANDS     R0,R3,R0
   \   00000020   0x0600             LSLS     R0,R0,#+24
   \   00000022   0xD001             BEQ.N    ??GPDMA_IntGetStatus_6
    401          			return SET;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE037             B.N      ??GPDMA_IntGetStatus_7
    402          		return RESET;
   \                     ??GPDMA_IntGetStatus_6:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE035             B.N      ??GPDMA_IntGetStatus_7
    403          	case GPDMA_STAT_INTTC: // check terminal count interrupt request status for DMA
    404          		if (LPC_GPDMA->IntTCStat & GPDMA_DMACIntTCStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_2:
   \   0000002C   0x....             LDR.N    R0,??DataTable4_18  ;; 0x20080004
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x2301             MOVS     R3,#+1
   \   00000032   0x408B             LSLS     R3,R3,R1
   \   00000034   0x4018             ANDS     R0,R3,R0
   \   00000036   0x0600             LSLS     R0,R0,#+24
   \   00000038   0xD001             BEQ.N    ??GPDMA_IntGetStatus_8
    405          			return SET;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xE02C             B.N      ??GPDMA_IntGetStatus_7
    406          		return RESET;
   \                     ??GPDMA_IntGetStatus_8:
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE02A             B.N      ??GPDMA_IntGetStatus_7
    407          	case GPDMA_STAT_INTERR: //check interrupt status for DMA channels
    408          		if (LPC_GPDMA->IntErrStat & GPDMA_DMACIntTCClear_Ch(channel))
   \                     ??GPDMA_IntGetStatus_1:
   \   00000042   0x....             LDR.N    R0,??DataTable4_19  ;; 0x2008000c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0x408B             LSLS     R3,R3,R1
   \   0000004A   0x4018             ANDS     R0,R3,R0
   \   0000004C   0x0600             LSLS     R0,R0,#+24
   \   0000004E   0xD001             BEQ.N    ??GPDMA_IntGetStatus_9
    409          			return SET;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE021             B.N      ??GPDMA_IntGetStatus_7
    410          		return RESET;
   \                     ??GPDMA_IntGetStatus_9:
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE01F             B.N      ??GPDMA_IntGetStatus_7
    411          	case GPDMA_STAT_RAWINTTC: //check status of the terminal count interrupt for DMA channels
    412          		if (LPC_GPDMA->RawIntErrStat & GPDMA_DMACRawIntTCStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_4:
   \   00000058   0x....             LDR.N    R0,??DataTable4_20  ;; 0x20080018
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2301             MOVS     R3,#+1
   \   0000005E   0x408B             LSLS     R3,R3,R1
   \   00000060   0x4018             ANDS     R0,R3,R0
   \   00000062   0x0600             LSLS     R0,R0,#+24
   \   00000064   0xD001             BEQ.N    ??GPDMA_IntGetStatus_10
    413          			return SET;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xE016             B.N      ??GPDMA_IntGetStatus_7
    414          		return RESET;
   \                     ??GPDMA_IntGetStatus_10:
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE014             B.N      ??GPDMA_IntGetStatus_7
    415          	case GPDMA_STAT_RAWINTERR: //check status of the error interrupt for DMA channels
    416          		if (LPC_GPDMA->RawIntTCStat & GPDMA_DMACRawIntErrStat_Ch(channel))
   \                     ??GPDMA_IntGetStatus_3:
   \   0000006E   0x....             LDR.N    R0,??DataTable4_21  ;; 0x20080014
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0x408B             LSLS     R3,R3,R1
   \   00000076   0x4018             ANDS     R0,R3,R0
   \   00000078   0x0600             LSLS     R0,R0,#+24
   \   0000007A   0xD001             BEQ.N    ??GPDMA_IntGetStatus_11
    417          			return SET;
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xE00B             B.N      ??GPDMA_IntGetStatus_7
    418          		return RESET;
   \                     ??GPDMA_IntGetStatus_11:
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE009             B.N      ??GPDMA_IntGetStatus_7
    419          	default: //check enable status for DMA channels
    420          		if (LPC_GPDMA->EnbldChns & GPDMA_DMACEnbldChns_Ch(channel))
   \                     ??GPDMA_IntGetStatus_5:
   \   00000084   0x....             LDR.N    R0,??DataTable4_10  ;; 0x2008001c
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x2301             MOVS     R3,#+1
   \   0000008A   0x408B             LSLS     R3,R3,R1
   \   0000008C   0x4018             ANDS     R0,R3,R0
   \   0000008E   0x0600             LSLS     R0,R0,#+24
   \   00000090   0xD001             BEQ.N    ??GPDMA_IntGetStatus_12
    421          			return SET;
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE000             B.N      ??GPDMA_IntGetStatus_7
    422          		return RESET;
   \                     ??GPDMA_IntGetStatus_12:
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??GPDMA_IntGetStatus_7:
   \   00000098   0x4770             BX       LR               ;; return
    423          	}
    424          }
    425          
    426          /*********************************************************************//**
    427           * @brief		Clear one or more interrupt requests on DMA channels
    428           * @param[in]	type		type of interrupt request, should be:
    429           * 					- GPDMA_STATCLR_INTTC: 	GPDMA Interrupt Terminal Count Request Clear
    430           * 					- GPDMA_STATCLR_INTERR: GPDMA Interrupt Error Clear
    431           * @param[in]	channel		GPDMA channel, should be in range from 0 to 7
    432           * @return		None
    433           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    434          void GPDMA_ClearIntPending(GPDMA_StateClear_Type type, uint8_t channel)
    435          {
    436          	if (type == GPDMA_STATCLR_INTTC) // clears the terminal count interrupt request on DMA channel
   \                     GPDMA_ClearIntPending:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD105             BNE.N    ??GPDMA_ClearIntPending_0
    437          		LPC_GPDMA->IntTCClear = GPDMA_DMACIntTCClear_Ch(channel);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x408A             LSLS     R2,R2,R1
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x....             LDR.N    R3,??DataTable4_8  ;; 0x20080008
   \   0000000E   0x601A             STR      R2,[R3, #+0]
   \   00000010   0xE004             B.N      ??GPDMA_ClearIntPending_1
    438          	else // clear the error interrupt request
    439          		LPC_GPDMA->IntErrClr = GPDMA_DMACIntErrClr_Ch(channel);
   \                     ??GPDMA_ClearIntPending_0:
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x408A             LSLS     R2,R2,R1
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x....             LDR.N    R3,??DataTable4_9  ;; 0x20080010
   \   0000001A   0x601A             STR      R2,[R3, #+0]
    440          }
   \                     ??GPDMA_ClearIntPending_1:
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x20080110         DC32     0x20080110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x20080130         DC32     0x20080130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x20080150         DC32     0x20080150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x20080170         DC32     0x20080170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x20080190         DC32     0x20080190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x200801B0         DC32     0x200801b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x200801D0         DC32     0x200801d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x200801F0         DC32     0x200801f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x20080008         DC32     0x20080008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x20080010         DC32     0x20080010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x2008001C         DC32     0x2008001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     pGPDMACh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     GPDMA_LUTPerAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     GPDMA_LUTPerBurst

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     GPDMA_LUTPerWid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x400FC1C4         DC32     0x400fc1c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x20080030         DC32     0x20080030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x20080000         DC32     0x20080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x20080004         DC32     0x20080004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x2008000C         DC32     0x2008000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x20080018         DC32     0x20080018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x20080014         DC32     0x20080014
    441          
    442          /**
    443           * @}
    444           */
    445          
    446          #endif /* _GPDMA */
    447          
    448          /**
    449           * @}
    450           */
    451          
    452          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GPDMA_ChannelCmd
       0   GPDMA_ClearIntPending
       8   GPDMA_Init
         8   -> CLKPWR_ConfigPPWR
       0   GPDMA_IntGetStatus
      12   GPDMA_Setup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      36  GPDMA_ChannelCmd
      30  GPDMA_ClearIntPending
      94  GPDMA_Init
     154  GPDMA_IntGetStatus
     128  GPDMA_LUTPerAddr
      32  GPDMA_LUTPerBurst
      32  GPDMA_LUTPerWid
     592  GPDMA_Setup
      32  pGPDMACh

 
 160 bytes in section .data
  64 bytes in section .rodata
 994 bytes in section .text
 
 994 bytes of CODE  memory
  64 bytes of CONST memory
 160 bytes of DATA  memory

Errors: none
Warnings: none
