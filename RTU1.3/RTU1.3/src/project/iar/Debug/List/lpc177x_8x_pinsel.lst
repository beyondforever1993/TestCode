###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:41 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_pinsel.c                          #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Dri #
#                    vers\source\lpc177x_8x_pinsel.c -lCN                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\lpc177x_8x_pinsel.lst                      #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\lpc177x_8x_pinsel.o                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Drivers\source\lpc177x_8x_pinsel.c
      1          /**********************************************************************
      2          * $Id$		lpc177x_8x_pinsel.c			2011-06-02
      3          *//**
      4          * @file		lpc177x_8x_pinsel.c
      5          * @brief	Contains all functions support for Pin-connection block
      6          *			firmware library on LPC177x_8x
      7          * @version	1.0
      8          * @date		02. June. 2011
      9          * @author	NXP MCU SW Application Team
     10          * 
     11          * Copyright(C) 2011, NXP Semiconductor
     12          * All rights reserved.
     13          *
     14          ***********************************************************************
     15          * Software that is described herein is for illustrative purposes only
     16          * which provides customers with programming information regarding the
     17          * products. This software is supplied "AS IS" without any warranties.
     18          * NXP Semiconductors assumes no responsibility or liability for the
     19          * use of the software, conveys no license or title under any patent,
     20          * copyright, or mask work right to the product. NXP Semiconductors
     21          * reserves the right to make changes in the software without
     22          * notification. NXP Semiconductors also make no representation or
     23          * warranty that such application will be suitable for the specified
     24          * use without further testing or modification.
     25          **********************************************************************/
     26          
     27          /* Peripheral group ----------------------------------------------------------- */
     28          /** @addtogroup PINSEL
     29           * @{
     30           */
     31          
     32          /* Includes ------------------------------------------------------------------- */
     33          #include "lpc177x_8x_pinsel.h"
     34          
     35          #define PINSEL_I2C_MODE_POS				(8)
     36          #define PINSEL_I2C_MODE_NUMBITS			(2)
     37          #define PINSEL_I2C_MODE_BITMASK			(0x03)
     38          
     39          #define PINSEL_BASIC_MODE_POS			(3)
     40          #define PINSEL_BASIC_MODE_NUMBITS		(2)
     41          #define PINSEL_BASIC_MODE_BITMASK		(0x03)
     42          
     43          #define PINSEL_DACEN_POS				(16)
     44          #define PINSEL_DACEN_BITMASK			(0x01)
     45          #define PINSEL_DACEN_NUMBITS			(1)
     46          
     47          #define PINSEL_GLITCH_FILTER_POS				(8)
     48          #define PINSEL_GLITCH_FILTER_BITMASK			(0x01)
     49          #define PINSEL_GLITCH_FILTER_NUMBITS			(1)
     50          
     51          #define PINSEL_ADMODE_POS				(7)
     52          #define PINSEL_ADMODE_BITMASK			(0x01)
     53          #define PINSEL_ADMODE_NUMBITS			(1)
     54          
     55          /* Private Functions ---------------------------------------------------------- */
     56          
     57          /*********************************************************************//**
     58           * @brief		Get pointer to GPIO peripheral due to GPIO port
     59           * @param[in]	portnum		Port Number value, should be in range from 0..3.
     60           * @param[in]	pinnum		Pin number value, should be in range from 0..31
     61           * @return		Pointer to GPIO peripheral
     62           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          static uint32_t * PIN_GetPointer(uint8_t portnum, uint8_t pinnum)
     64          {
   \                     PIN_GetPointer:
   \   00000000   0x0002             MOVS     R2,R0
     65          	uint32_t *pPIN = NULL;
   \   00000002   0x2000             MOVS     R0,#+0
     66          	pPIN = (uint32_t *)(LPC_IOCON_BASE + ((portnum * 32 + pinnum)*sizeof(uint32_t)));
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   0xEB11 0x1342      ADDS     R3,R1,R2, LSL #+5
   \   0000000C   0x009B             LSLS     R3,R3,#+2
   \   0000000E   0xF103 0x4380      ADD      R3,R3,#+1073741824
   \   00000012   0xF513 0x3330      ADDS     R3,R3,#+180224
   \   00000016   0x0018             MOVS     R0,R3
     67          	return pPIN;
   \   00000018   0x4770             BX       LR               ;; return
     68          }
     69          
     70          /* Public Functions ----------------------------------------------------------- */
     71          /** @addtogroup PINSEL_Public_Functions
     72           * @{
     73           */
     74          
     75          /*********************************************************************//**
     76           * @brief 		Setup the pin selection function
     77           * @param[in]	portnum PORT number, should be in range: 0..3
     78           * @param[in]	pinnum	Pin number, should be in range: 0..31
     79           * @param[in] 	funcnum Function number, should be range: 0..7
     80           * 				- 0: Select GPIO (Default)
     81           * 				- 1: Selects the 1st alternate function
     82           * 				- 2: Selects the 2nd alternate function
     83           * 				...
     84           *				- 7: Selects the 7th alternate function
     85           * @return 		None
     86           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          void PINSEL_ConfigPin ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
     88          {
   \                     PINSEL_ConfigPin:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     89          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
     90          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
     91          	*pPIN &= 0x00000007;//Clear function bits
   \   00000018   0x7838             LDRB     R0,[R7, #+0]
   \   0000001A   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   0000001E   0x6038             STR      R0,[R7, #+0]
     92          	*pPIN |= funcnum;
   \   00000020   0x6838             LDR      R0,[R7, #+0]
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x4330             ORRS     R0,R6,R0
   \   00000026   0x6038             STR      R0,[R7, #+0]
     93          }
   \   00000028   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     94          
     95          
     96          /*********************************************************************//**
     97           * @brief 		Setup resistor mode for each pin
     98           * @param[in]	portnum PORT number, should be in range: 0..3
     99           * @param[in]	pinnum	Pin number, should be in range: 0..31
    100           * @param[in] 	modenum: Mode number, should be in range: 0..3
    101          				- IOCON_MODE_PLAIN: Plain output
    102          				- IOCON_MODE_PULLDOWN: Pull-down enable
    103          				- IOCON_MODE_PULLUP: Pull-up enable
    104          				- IOCON_MODE_REPEATER: Repeater mode
    105           * @return 		None
    106           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          void PINSEL_SetPinMode ( uint8_t portnum, uint8_t pinnum, PinSel_BasicMode modenum)
    108          {
   \                     PINSEL_SetPinMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    109          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    110          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    111          	*(uint32_t *)pPIN &= ~(3<<3);//Clear function bits
   \   00000018   0x6838             LDR      R0,[R7, #+0]
   \   0000001A   0xF030 0x0018      BICS     R0,R0,#0x18
   \   0000001E   0x6038             STR      R0,[R7, #+0]
    112          	*(uint32_t *)pPIN |= modenum;
   \   00000020   0x6838             LDR      R0,[R7, #+0]
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x4330             ORRS     R0,R6,R0
   \   00000026   0x6038             STR      R0,[R7, #+0]
    113          }
   \   00000028   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    114          
    115          /*********************************************************************//**
    116           * @brief 		Setup hysteresis for each pin
    117           * @param[in]	portnum Port number, should be in range: 0..3
    118           * @param[in]	pinnum	Pin number, should be in range: 0..31
    119           * @param[in] 	NewState new state of Hysteresis mode, should be:
    120           * 				- ENABLE: Hysteresis enable
    121           * 				- DISABLE: Hysteresis disable
    122           * @return 		None
    123           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    124          void PINSEL_SetHysMode(uint8_t portnum, uint8_t pinnum, FunctionalState NewState)
    125          {
   \                     PINSEL_SetHysMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    126          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    127          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    128          	if(NewState == DISABLE)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD104             BNE.N    ??PINSEL_SetHysMode_0
    129          	{
    130          		*(uint32_t *)pPIN &= ~IOCON_HYS;//Clear hys bits
   \   0000001E   0x6838             LDR      R0,[R7, #+0]
   \   00000020   0xF030 0x0020      BICS     R0,R0,#0x20
   \   00000024   0x6038             STR      R0,[R7, #+0]
   \   00000026   0xE003             B.N      ??PINSEL_SetHysMode_1
    131          	}
    132          	else
    133          		*(uint32_t *)pPIN |= IOCON_HYS;
   \                     ??PINSEL_SetHysMode_0:
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    134          }
   \                     ??PINSEL_SetHysMode_1:
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    135          
    136          /*********************************************************************//**
    137           * @brief 		Setup Slew rate for each pin
    138           * @param[in]	portnum Port number, should be in range: 0..3
    139           * @param[in]	pinnum	Pin number, should be in range: 0..31
    140           * @param[in] 	NewState new state of Slew rate control, should be:
    141           * 				- ENABLE: Output slew rate control is enable
    142           * 				- DISABLE: Output slew rate control is disable
    143           * @return 		None
    144           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    145          void PINSEL_SetSlewMode(uint8_t portnum, uint8_t pinnum, FunctionalState NewState)
    146          {
   \                     PINSEL_SetSlewMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    147          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    148          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    149          	if(NewState == DISABLE)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD104             BNE.N    ??PINSEL_SetSlewMode_0
    150          	{
    151          		*(uint32_t *)pPIN &= ~IOCON_SLEW;//Clear hys bits
   \   0000001E   0x6838             LDR      R0,[R7, #+0]
   \   00000020   0xF030 0x0040      BICS     R0,R0,#0x40
   \   00000024   0x6038             STR      R0,[R7, #+0]
   \   00000026   0xE003             B.N      ??PINSEL_SetSlewMode_1
    152          	}
    153          	else
    154          		*(uint32_t *)pPIN |= IOCON_SLEW;
   \                     ??PINSEL_SetSlewMode_0:
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    155          }
   \                     ??PINSEL_SetSlewMode_1:
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    156          
    157          /*********************************************************************//**
    158           * @brief 		Setup Input Buffer for each pin
    159           * @param[in]	portnum Port number, should be in range: 0..3
    160           * @param[in]	pinnum	Pin number, should be in range: 0..31
    161           * @param[in] 	NewState new state of Input buffer mode, should be:
    162           * 				- ENABLE: The input buffer is enable
    163           * 				- DISABLE: The input buffer is disable
    164           * @return 		None
    165           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    166          void PINSEL_SetInBufMode(uint8_t portnum, uint8_t pinnum, FunctionalState NewState)
    167          {
   \                     PINSEL_SetInBufMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    168          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    169          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    170          	if(NewState == DISABLE)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD104             BNE.N    ??PINSEL_SetInBufMode_0
    171          	{
    172          		*(uint32_t *)pPIN &= ~IOCON_INBUF;//Clear hys bits
   \   0000001E   0x6838             LDR      R0,[R7, #+0]
   \   00000020   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000024   0x6038             STR      R0,[R7, #+0]
   \   00000026   0xE003             B.N      ??PINSEL_SetInBufMode_1
    173          	}
    174          	else
    175          		*(uint32_t *)pPIN |= IOCON_INBUF;
   \                     ??PINSEL_SetInBufMode_0:
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    176          }
   \                     ??PINSEL_SetInBufMode_1:
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    177          
    178          /*********************************************************************//**
    179           * @brief 		Setup I2CMode for only pins that provide special I2C functionality
    180           * @param[in]	portnum Port number, should be in range: 0..3
    181           * @param[in]	pinnum	Pin number, should be in range: 0..31
    182           * @param[in] 	I2CMode I2C mode, should be:
    183           * 				- IOCON_I2CMODE_FAST: Fast mode and standard I2C mode
    184           * 				- IOCON_I2CMODE_OPENDRAIN: Open drain I/O
    185           * 				- IOCON_I2CMODE_FASTPLUS: Fast Mode Plus I/O
    186           * 				- IOCON_I2CMODE_HIGHOPENDRAIN: High drive open drain I/O
    187           * @return 		None
    188           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    189          void PINSEL_SetI2CMode(uint8_t portnum, uint8_t pinnum, PinSel_I2cMode I2CMode)
    190          {
   \                     PINSEL_SetI2CMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    191          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    192          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    193          
    194          	*(uint32_t *)pPIN &= ~(PINSEL_I2C_MODE_BITMASK<< PINSEL_I2C_MODE_POS);
   \   00000018   0x6838             LDR      R0,[R7, #+0]
   \   0000001A   0xF430 0x7040      BICS     R0,R0,#0x300
   \   0000001E   0x6038             STR      R0,[R7, #+0]
    195          	*(uint32_t *)pPIN |= (I2CMode << PINSEL_I2C_MODE_POS);
   \   00000020   0x6838             LDR      R0,[R7, #+0]
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0xEA50 0x2006      ORRS     R0,R0,R6, LSL #+8
   \   00000028   0x6038             STR      R0,[R7, #+0]
    196          }
   \   0000002A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    197          
    198          /*********************************************************************//**
    199           * @brief 		Setup Open-drain mode in each pin
    200           * @param[in]	portnum Port number, should be in range: 0..3
    201           * @param[in]	pinnum	Pin number, should be in range: 0..31
    202           * @param[in] 	NewState new state of Open-drain mode:
    203           * 				- DISABLE: Normal pin I/O mode
    204           * 				- ENABLE: Open-drain enable
    205           * @return 		None
    206           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          void PINSEL_SetOpenDrainMode(uint8_t portnum, uint8_t pinnum, FunctionalState NewState)
    208          {
   \                     PINSEL_SetOpenDrainMode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    209          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    210          	pPIN = PIN_GetPointer(portnum, pinnum);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       PIN_GetPointer
   \   00000016   0x0007             MOVS     R7,R0
    211          	if(NewState == DISABLE)
   \   00000018   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001A   0x2E00             CMP      R6,#+0
   \   0000001C   0xD104             BNE.N    ??PINSEL_SetOpenDrainMode_0
    212          	{
    213          		*(uint32_t *)pPIN &= ~IOCON_ODMODE;//Clear hys bits
   \   0000001E   0x6838             LDR      R0,[R7, #+0]
   \   00000020   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000024   0x6038             STR      R0,[R7, #+0]
   \   00000026   0xE003             B.N      ??PINSEL_SetOpenDrainMode_1
    214          	}
    215          	else
    216          	{
    217          		*(uint32_t *)pPIN |= IOCON_ODMODE;
   \                     ??PINSEL_SetOpenDrainMode_0:
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    218          	}
    219          }
   \                     ??PINSEL_SetOpenDrainMode_1:
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    220          
    221          /*********************************************************************//**
    222           * @brief 		Enable the Analog mode for each pin (default is as Digital pins)
    223           * @param[in]	portnum PORT number, should be in range: 0..3
    224           * @param[in]	pinnum	Pin number, should be in range: 0..31
    225           * @param[in] 	enable: the state of the pin that is expected to run
    226          				- ENABLE: Enable the DAC mode of the pin
    227          				- DISABLE: Disable the DAC mode
    228           * @return 		None
    229           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    230          void PINSEL_SetAnalogPinMode (uint8_t portnum, uint8_t pinnum, uint8_t enable)
    231          {
   \                     PINSEL_SetAnalogPinMode:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    232          	uint32_t *pPIN = NULL;
   \   0000000A   0x2700             MOVS     R7,#+0
    233          
    234          	uint8_t condition = 0;
   \   0000000C   0xF05F 0x0800      MOVS     R8,#+0
    235          
    236          	condition = ((portnum == 0) && (pinnum == 12)) || ((portnum == 0) && (pinnum == 13))
    237          					| ((portnum == 0) && (pinnum <= 26) && (pinnum >= 23))
    238          					| ((portnum == 1) && (pinnum == 30)) || ((portnum == 1) && (pinnum == 31));
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD102             BNE.N    ??PINSEL_SetAnalogPinMode_0
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D0C             CMP      R5,#+12
   \   0000001A   0xD02A             BEQ.N    ??PINSEL_SetAnalogPinMode_1
   \                     ??PINSEL_SetAnalogPinMode_0:
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xD104             BNE.N    ??PINSEL_SetAnalogPinMode_2
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D0D             CMP      R5,#+13
   \   00000026   0xD101             BNE.N    ??PINSEL_SetAnalogPinMode_2
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE000             B.N      ??PINSEL_SetAnalogPinMode_3
   \                     ??PINSEL_SetAnalogPinMode_2:
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??PINSEL_SetAnalogPinMode_3:
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD107             BNE.N    ??PINSEL_SetAnalogPinMode_4
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x2D1B             CMP      R5,#+27
   \   00000038   0xDA04             BGE.N    ??PINSEL_SetAnalogPinMode_4
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x2D17             CMP      R5,#+23
   \   0000003E   0xDB01             BLT.N    ??PINSEL_SetAnalogPinMode_4
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0xE000             B.N      ??PINSEL_SetAnalogPinMode_5
   \                     ??PINSEL_SetAnalogPinMode_4:
   \   00000044   0x2100             MOVS     R1,#+0
   \                     ??PINSEL_SetAnalogPinMode_5:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C01             CMP      R4,#+1
   \   0000004A   0xD104             BNE.N    ??PINSEL_SetAnalogPinMode_6
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x2D1E             CMP      R5,#+30
   \   00000050   0xD101             BNE.N    ??PINSEL_SetAnalogPinMode_6
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0xE000             B.N      ??PINSEL_SetAnalogPinMode_7
   \                     ??PINSEL_SetAnalogPinMode_6:
   \   00000056   0x2200             MOVS     R2,#+0
   \                     ??PINSEL_SetAnalogPinMode_7:
   \   00000058   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x4308             ORRS     R0,R1,R0
   \   0000005E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000060   0x4310             ORRS     R0,R2,R0
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD105             BNE.N    ??PINSEL_SetAnalogPinMode_1
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C01             CMP      R4,#+1
   \   0000006A   0xD105             BNE.N    ??PINSEL_SetAnalogPinMode_8
   \   0000006C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006E   0x2D1F             CMP      R5,#+31
   \   00000070   0xD102             BNE.N    ??PINSEL_SetAnalogPinMode_8
   \                     ??PINSEL_SetAnalogPinMode_1:
   \   00000072   0xF05F 0x0801      MOVS     R8,#+1
   \   00000076   0xE001             B.N      ??PINSEL_SetAnalogPinMode_9
   \                     ??PINSEL_SetAnalogPinMode_8:
   \   00000078   0xF05F 0x0800      MOVS     R8,#+0
    239          
    240          	if(!condition)
   \                     ??PINSEL_SetAnalogPinMode_9:
   \   0000007C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000080   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000084   0xD011             BEQ.N    ??PINSEL_SetAnalogPinMode_10
    241          	{
    242          		return;
    243          	}
    244          
    245          	pPIN = PIN_GetPointer(portnum, pinnum);
   \                     ??PINSEL_SetAnalogPinMode_11:
   \   00000086   0x0029             MOVS     R1,R5
   \   00000088   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0x.... 0x....      BL       PIN_GetPointer
   \   00000092   0x0007             MOVS     R7,R0
    246          
    247          	//Clear this bit to set the pin to Analog mode
    248          	*(uint32_t *)pPIN &= ~(PINSEL_ADMODE_BITMASK << PINSEL_ADMODE_POS);
   \   00000094   0x6838             LDR      R0,[R7, #+0]
   \   00000096   0xF030 0x0080      BICS     R0,R0,#0x80
   \   0000009A   0x6038             STR      R0,[R7, #+0]
    249          
    250          	if(enable)
   \   0000009C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009E   0x2E00             CMP      R6,#+0
   \   000000A0   0xD103             BNE.N    ??PINSEL_SetAnalogPinMode_12
    251          	{
    252          
    253          	}
    254          	else
    255          	{
    256          		*(uint32_t *)pPIN |= (1 << PINSEL_ADMODE_POS);//Set 16th bit to one
   \   000000A2   0x6838             LDR      R0,[R7, #+0]
   \   000000A4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000A8   0x6038             STR      R0,[R7, #+0]
    257          	}
    258          
    259          	return;
   \                     ??PINSEL_SetAnalogPinMode_12:
   \                     ??PINSEL_SetAnalogPinMode_10:
   \   000000AA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    260          }
    261          
    262          
    263          
    264          /*********************************************************************//**
    265           * @brief 		Choose the DAC mode for each pin
    266           * @param[in]	portnum PORT number, should be in range: 0..3
    267           * @param[in]	pinnum	Pin number, should be in range: 0..31
    268           * @param[in] 	enable: the state of the pin that is expected to run
    269          				- ENABLE: Enable the DAC mode of the pin
    270          				- DISABLE: Disable the DAC mode
    271           * @return 		None
    272           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    273          void PINSEL_DacEnable (uint8_t portnum, uint8_t pinnum, uint8_t enable)
    274          {
   \                     PINSEL_DacEnable:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    275          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    276          
    277          	// This setting is only for DAC pin (output pin)
    278          	if(!((portnum == 0) && (pinnum == 26)))
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD102             BNE.N    ??PINSEL_DacEnable_0
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D1A             CMP      R5,#+26
   \   00000014   0xD000             BEQ.N    ??PINSEL_DacEnable_1
    279          	{
    280          		return;
   \                     ??PINSEL_DacEnable_0:
   \   00000016   0xE011             B.N      ??PINSEL_DacEnable_2
    281          	}
    282          
    283          	pPIN = PIN_GetPointer(portnum, pinnum);
   \                     ??PINSEL_DacEnable_1:
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       PIN_GetPointer
   \   00000024   0x0007             MOVS     R7,R0
    284          
    285          	//Clear DAC Enable function bits
    286          	*(uint32_t *)pPIN &= ~(PINSEL_DACEN_BITMASK << PINSEL_DACEN_POS);
   \   00000026   0x6838             LDR      R0,[R7, #+0]
   \   00000028   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   0000002C   0x6038             STR      R0,[R7, #+0]
    287          
    288          	if(enable)
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E00             CMP      R6,#+0
   \   00000032   0xD003             BEQ.N    ??PINSEL_DacEnable_3
    289          	{
    290          		*(uint32_t *)pPIN |= (1 << PINSEL_DACEN_POS);//Set 16th bit to one
   \   00000034   0x6838             LDR      R0,[R7, #+0]
   \   00000036   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   0000003A   0x6038             STR      R0,[R7, #+0]
    291          	}
    292          	else
    293          	{
    294          
    295          	}
    296          
    297          	return;
   \                     ??PINSEL_DacEnable_3:
   \                     ??PINSEL_DacEnable_2:
   \   0000003C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    298          }
    299          
    300          /*********************************************************************//**
    301           * @brief 		Control the glitch filter for each pin
    302           * @param[in]	portnum PORT number, should be in range: 0..3
    303           * @param[in]	pinnum	Pin number, should be in range: 0..31
    304           * @param[in] 	enable: the state of the pin that is expected to run
    305          				- ENABLE: The noise pulses below approximately 10ns are filtered out
    306          				- DISABLE: No input filtering is done.
    307           * @return 		None
    308           **********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    309          void PINSEL_SetFilter (uint8_t portnum, uint8_t pinnum, uint8_t enable)
    310          {
   \                     PINSEL_SetFilter:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    311          	uint32_t *pPIN = NULL;
   \   00000008   0x2700             MOVS     R7,#+0
    312          
    313          	// This setting is only for DAC pin (output pin)
    314          	if(!((portnum == 0) && ((pinnum == 7) || (pinnum == 8) || (pinnum == 9))))
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD108             BNE.N    ??PINSEL_SetFilter_0
   \   00000010   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000012   0x2D07             CMP      R5,#+7
   \   00000014   0xD006             BEQ.N    ??PINSEL_SetFilter_1
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D08             CMP      R5,#+8
   \   0000001A   0xD003             BEQ.N    ??PINSEL_SetFilter_1
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x2D09             CMP      R5,#+9
   \   00000020   0xD000             BEQ.N    ??PINSEL_SetFilter_1
    315          	{
    316          		return;
   \                     ??PINSEL_SetFilter_0:
   \   00000022   0xE017             B.N      ??PINSEL_SetFilter_2
    317          	}
    318          
    319          	pPIN = PIN_GetPointer(portnum, pinnum);
   \                     ??PINSEL_SetFilter_1:
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       PIN_GetPointer
   \   00000030   0x0007             MOVS     R7,R0
    320          
    321          	*(uint32_t *)pPIN |= (1 << 7);//Set 7th bit for normal operation following the UM1.0
   \   00000032   0x6838             LDR      R0,[R7, #+0]
   \   00000034   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000038   0x6038             STR      R0,[R7, #+0]
    322          
    323          	//Clear Filter bits
    324          	*(uint32_t *)pPIN &= ~(PINSEL_GLITCH_FILTER_BITMASK << PINSEL_GLITCH_FILTER_POS);
   \   0000003A   0x6838             LDR      R0,[R7, #+0]
   \   0000003C   0xF430 0x7080      BICS     R0,R0,#0x100
   \   00000040   0x6038             STR      R0,[R7, #+0]
    325          
    326          	if(!enable)
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD103             BNE.N    ??PINSEL_SetFilter_3
    327          	{
    328          		*(uint32_t *)pPIN |= (1 << PINSEL_GLITCH_FILTER_POS);//Set 8th bit to one
   \   00000048   0x6838             LDR      R0,[R7, #+0]
   \   0000004A   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000004E   0x6038             STR      R0,[R7, #+0]
    329          	}
    330          	else
    331          	{
    332          
    333          	}
    334          
    335          	*pPIN = *pPIN;
   \                     ??PINSEL_SetFilter_3:
   \   00000050   0x6838             LDR      R0,[R7, #+0]
   \   00000052   0x6038             STR      R0,[R7, #+0]
    336          
    337          	return;
   \                     ??PINSEL_SetFilter_2:
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    338          }
    339          
    340          /**
    341           * @}
    342           */
    343          
    344          /**
    345           * @}
    346           */
    347          
    348          /* --------------------------------- End Of File ------------------------------ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   PINSEL_ConfigPin
        24   -> PIN_GetPointer
      24   PINSEL_DacEnable
        24   -> PIN_GetPointer
      24   PINSEL_SetAnalogPinMode
        24   -> PIN_GetPointer
      24   PINSEL_SetFilter
        24   -> PIN_GetPointer
      24   PINSEL_SetHysMode
        24   -> PIN_GetPointer
      24   PINSEL_SetI2CMode
        24   -> PIN_GetPointer
      24   PINSEL_SetInBufMode
        24   -> PIN_GetPointer
      24   PINSEL_SetOpenDrainMode
        24   -> PIN_GetPointer
      24   PINSEL_SetPinMode
        24   -> PIN_GetPointer
      24   PINSEL_SetSlewMode
        24   -> PIN_GetPointer
       0   PIN_GetPointer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      42  PINSEL_ConfigPin
      62  PINSEL_DacEnable
     174  PINSEL_SetAnalogPinMode
      86  PINSEL_SetFilter
      50  PINSEL_SetHysMode
      44  PINSEL_SetI2CMode
      50  PINSEL_SetInBufMode
      50  PINSEL_SetOpenDrainMode
      42  PINSEL_SetPinMode
      50  PINSEL_SetSlewMode
      26  PIN_GetPointer

 
 676 bytes in section .text
 
 676 bytes of CODE memory

Errors: none
Warnings: none
