###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      05/Apr/2017  15:06:09 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.3\USB\lun.c                       #
#    Command line =  D:\wangfan2\桌面\RTU_1.3\USB\lun.c -lCN                  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.3\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.3\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.3\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.3\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.3\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\lun.lst  #
#    Object file  =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\lun.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.3\USB\lun.c
      1          /*************************************************************************
      2           *
      3           *    Used with ICCARM and AARM.
      4           *
      5           *    (c) Copyright IAR Systems 2005
      6           *
      7           *    File name   : lun.c
      8           *    Description : USB Mass storage device LUNs
      9           *
     10           *    History :
     11           *    1. Dat?       : November 15, 2005
     12           *       Author      : Stanimir Bonev
     13           *       Description : Create
     14           *
     15           *    $Revision: 28532 $
     16           **************************************************************************/
     17          #define LUN_GOBALS
     18          #include "lun.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     19          

   \                                 In section .bss, align 4
     20          LunFpnt_t LunFun [SCSI_LUN_NUMB];
   \                     LunFun:
   \   00000000                      DS8 12
     21          
     22          /*************************************************************************
     23           * Function Name: LunInit
     24           * Parameters: Int32U LunInd,
     25           *             DiskInitFpnt_t DiskInitFpnt, DiskStatusFpnt_t DiskStatusFpnt,
     26           *             DiskIoFpnt_t, DiskIoFpnt
     27           *
     28           * Return: none
     29           *
     30           * Description: LUN Init
     31           *
     32           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     33          void LunInit (Int32U LunInd,
     34                        DiskInitFpnt_t DiskInitFpnt, DiskStatusFpnt_t DiskStatusFpnt,
     35                        DiskIoFpnt_t DiskIoFpnt)
     36          {
   \                     LunInit:
   \   00000000   0xB430             PUSH     {R4,R5}
     37            LunFun[LunInd].DiskInitFpnt   = DiskInitFpnt;
   \   00000002   0x240C             MOVS     R4,#+12
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable1
   \   00000008   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   0000000C   0x6021             STR      R1,[R4, #+0]
     38            LunFun[LunInd].DiskStatusFpnt = DiskStatusFpnt;
   \   0000000E   0x240C             MOVS     R4,#+12
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable1
   \   00000014   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   00000018   0x6062             STR      R2,[R4, #+4]
     39            LunFun[LunInd].DiskIoFpnt     = DiskIoFpnt;
   \   0000001A   0x240C             MOVS     R4,#+12
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable1
   \   00000020   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   00000024   0x60A3             STR      R3,[R4, #+8]
     40          }
   \   00000026   0xBC30             POP      {R4,R5}
   \   00000028   0x4770             BX       LR               ;; return
     41          
     42          /*************************************************************************
     43           * Function Name: LunImp
     44           * Parameters:  none
     45           *
     46           * Return: Boolean 0 - not activity
     47           *                 1 - activity
     48           *
     49           * Description: LUN commands implementation
     50           *
     51           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     52          Boolean LunImp (Int32U LunInd)
     53          {
   \                     LunImp:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
     54          static LunState_t LunState;
     55          static Int32U BlockStart, BlockNum;
     56          pLunFpnt_t Lun = &LunFun[LunInd];
   \   00000006   0x200C             MOVS     R0,#+12
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable1
   \   0000000C   0xFB00 0x1504      MLA      R5,R0,R4,R1
     57          pDiskCtrlBlk_t pDiskCrtl;
     58          pMmc3FormatCapResponse_t pFormatCapacity;
     59          Int32U Temp;
     60          
     61            if(pScsiMessage[LunInd] == NULL)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000014   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD109             BNE.N    ??LunImp_0
     62            {
     63              return(LunState != LunCommandDecode);
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??LunImp_1
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??LunImp_2
   \                     ??LunImp_1:
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??LunImp_2:
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xE2AD             B.N      ??LunImp_3
     64            }
     65            // Get a message
     66            Int32U Message   = *pScsiMessage[LunInd];
   \                     ??LunImp_0:
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000034   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000038   0xF8D0 0x9000      LDR      R9,[R0, #+0]
     67            pInt32U pMessage = pScsiMessage[LunInd]+1;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000040   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000044   0xF110 0x0A04      ADDS     R10,R0,#+4
     68            // Clear the message pointer
     69            pScsiMessage[LunInd] = NULL;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
     70            if (Message == LunInitMsg)
   \   00000052   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000056   0xD105             BNE.N    ??LunImp_4
     71            {
     72              //Lun->DiskInitFpnt();
     73              LunState = LunCommandDecode;
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x7001             STRB     R1,[R0, #+0]
     74              //return(LunState != LunCommandDecode);
     75              return 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE293             B.N      ??LunImp_3
     76            }
     77            if (Message == LunResetReqMsg)
   \                     ??LunImp_4:
   \   00000064   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000068   0xD10D             BNE.N    ??LunImp_5
     78            {
     79              LunState = LunCommandDecode;
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x7001             STRB     R1,[R0, #+0]
     80              return(LunState != LunCommandDecode);
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD001             BEQ.N    ??LunImp_6
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xE000             B.N      ??LunImp_7
   \                     ??LunImp_6:
   \   00000080   0x2000             MOVS     R0,#+0
   \                     ??LunImp_7:
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0xE282             B.N      ??LunImp_3
     81            }
     82            switch (LunState)
   \                     ??LunImp_5:
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable1_2
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD008             BEQ.N    ??LunImp_8
   \   00000090   0x2802             CMP      R0,#+2
   \   00000092   0xF000 0x81C9      BEQ.W    ??LunImp_9
   \   00000096   0xF0C0 0x8176      BCC.W    ??LunImp_10
   \   0000009A   0x2803             CMP      R0,#+3
   \   0000009C   0xF000 0x8210      BEQ.W    ??LunImp_11
   \   000000A0   0xE265             B.N      ??LunImp_12
     83            {
     84            case LunCommandDecode:
     85              switch (Message)
   \                     ??LunImp_8:
   \   000000A2   0xF1B9 0x0F02      CMP      R9,#+2
   \   000000A6   0xD017             BEQ.N    ??LunImp_13
   \   000000A8   0xF0C0 0x8168      BCC.W    ??LunImp_14
   \   000000AC   0xF1B9 0x0F04      CMP      R9,#+4
   \   000000B0   0xD049             BEQ.N    ??LunImp_15
   \   000000B2   0xD31E             BCC.N    ??LunImp_16
   \   000000B4   0xF1B9 0x0F06      CMP      R9,#+6
   \   000000B8   0xF000 0x8098      BEQ.W    ??LunImp_17
   \   000000BC   0xF0C0 0x808A      BCC.W    ??LunImp_18
   \   000000C0   0xF1B9 0x0F08      CMP      R9,#+8
   \   000000C4   0xF000 0x813B      BEQ.W    ??LunImp_19
   \   000000C8   0xF0C0 0x80F1      BCC.W    ??LunImp_20
   \   000000CC   0xF1B9 0x0F0A      CMP      R9,#+10
   \   000000D0   0xD03F             BEQ.N    ??LunImp_21
   \   000000D2   0xF0C0 0x8110      BCC.W    ??LunImp_22
   \   000000D6   0xE151             B.N      ??LunImp_14
     86              {
     87              case LunInquiryReqMsg:
     88                memcpy(Lun0Buffer,SdDskInquiry,SizeOfInquiryDescMmcDsk);
   \                     ??LunImp_13:
   \   000000D8   0x2224             MOVS     R2,#+36
   \   000000DA   0x.... 0x....      LDR.W    R1,??DataTable1_3
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000E2   0x.... 0x....      BL       memcpy
     89                ScsiInquiryData(Lun0Buffer,SizeOfInquiryDescMmcDsk);
   \   000000E6   0x2124             MOVS     R1,#+36
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000EC   0x.... 0x....      BL       ScsiInquiryData
     90                break;
   \   000000F0   0xE148             B.N      ??LunImp_23
     91              case LunTestUntilReadyReqMsg:
     92                pDiskCrtl = Lun->DiskStatusFpnt();
   \                     ??LunImp_16:
   \   000000F2   0x6868             LDR      R0,[R5, #+4]
   \   000000F4   0x4780             BLX      R0
   \   000000F6   0x0006             MOVS     R6,R0
     93                switch (pDiskCrtl->DiskStatus)
   \   000000F8   0x7A30             LDRB     R0,[R6, #+8]
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD006             BEQ.N    ??LunImp_24
   \   000000FE   0x2801             CMP      R0,#+1
   \   00000100   0xD011             BEQ.N    ??LunImp_25
   \   00000102   0x2802             CMP      R0,#+2
   \   00000104   0xD013             BEQ.N    ??LunImp_26
   \   00000106   0x2805             CMP      R0,#+5
   \   00000108   0xD015             BEQ.N    ??LunImp_27
   \   0000010A   0xE018             B.N      ??LunImp_28
     94                {
     95                case DiskCommandPass:
     96                  if (pDiskCrtl->MediaChanged)
   \                     ??LunImp_24:
   \   0000010C   0x6930             LDR      R0,[R6, #+16]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD005             BEQ.N    ??LunImp_29
     97                  {
     98                    ScsiTestUntilReadyData(ScsiMediaChanged);
   \   00000112   0x2005             MOVS     R0,#+5
   \   00000114   0x.... 0x....      BL       ScsiTestUntilReadyData
     99                    pDiskCrtl->MediaChanged = FALSE;
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0x6130             STR      R0,[R6, #+16]
   \   0000011C   0xE002             B.N      ??LunImp_30
    100                  }
    101                  else
    102                  {
    103                    ScsiTestUntilReadyData(ScsiCommandNoKey);
   \                     ??LunImp_29:
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x.... 0x....      BL       ScsiTestUntilReadyData
    104                  }
    105                  break;
   \                     ??LunImp_30:
   \   00000124   0xE00E             B.N      ??LunImp_31
    106                case DiskNotReady:
    107                  ScsiTestUntilReadyData(ScsiMediamNotReady);
   \                     ??LunImp_25:
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0x.... 0x....      BL       ScsiTestUntilReadyData
    108                  break;
   \   0000012C   0xE00A             B.N      ??LunImp_31
    109                case DiskNotPresent:
    110                  ScsiTestUntilReadyData(ScsiMediaNotPresent);
   \                     ??LunImp_26:
   \   0000012E   0x2004             MOVS     R0,#+4
   \   00000130   0x.... 0x....      BL       ScsiTestUntilReadyData
    111                  break;
   \   00000134   0xE006             B.N      ??LunImp_31
    112                case DiskChanged:
    113                  ScsiTestUntilReadyData(ScsiMediaChanged);
   \                     ??LunImp_27:
   \   00000136   0x2005             MOVS     R0,#+5
   \   00000138   0x.... 0x....      BL       ScsiTestUntilReadyData
    114                  break;
   \   0000013C   0xE002             B.N      ??LunImp_31
    115                default:
    116                  ScsiTestUntilReadyData(ScsiFatalError);
   \                     ??LunImp_28:
   \   0000013E   0x2007             MOVS     R0,#+7
   \   00000140   0x.... 0x....      BL       ScsiTestUntilReadyData
    117                  break;
    118                }
    119                break;
   \                     ??LunImp_31:
   \   00000144   0xE11E             B.N      ??LunImp_23
    120              case LunModeSense6ReqMsg:
    121                ScsiModeSenseData(Lun->DiskStatusFpnt()->WriteProtect);
   \                     ??LunImp_15:
   \   00000146   0x6868             LDR      R0,[R5, #+4]
   \   00000148   0x4780             BLX      R0
   \   0000014A   0x68C0             LDR      R0,[R0, #+12]
   \   0000014C   0x.... 0x....      BL       ScsiModeSenseData
    122                break;
   \   00000150   0xE118             B.N      ??LunImp_23
    123              case LunReadFormatCapacityReqMsg:
    124                pFormatCapacity = (pMmc3FormatCapResponse_t)Lun0Buffer;
   \                     ??LunImp_21:
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   00000156   0x0007             MOVS     R7,R0
    125          
    126                if(Lun->DiskStatusFpnt()->DiskStatus == DiskCommandPass)
   \   00000158   0x6868             LDR      R0,[R5, #+4]
   \   0000015A   0x4780             BLX      R0
   \   0000015C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD120             BNE.N    ??LunImp_32
    127                {
    128                  pFormatCapacity->MaximumDescriptor.DescriptorType    = FormattedMedia;
   \   00000162   0x2002             MOVS     R0,#+2
   \   00000164   0x7A39             LDRB     R1,[R7, #+8]
   \   00000166   0xF360 0x0101      BFI      R1,R0,#+0,#+2
   \   0000016A   0x7239             STRB     R1,[R7, #+8]
    129                  // Windows support only 512 bytes sector
    130                  Temp = Lun->DiskStatusFpnt()->BlockSize;
   \   0000016C   0x6868             LDR      R0,[R5, #+4]
   \   0000016E   0x4780             BLX      R0
   \   00000170   0x6840             LDR      R0,[R0, #+4]
   \   00000172   0x4680             MOV      R8,R0
    131                  pFormatCapacity->MaximumDescriptor.BlockLength[0]    = (Temp >> 16) & 0xFF;
   \   00000174   0xEA5F 0x4018      LSRS     R0,R8,#+16
   \   00000178   0x7278             STRB     R0,[R7, #+9]
    132                  pFormatCapacity->MaximumDescriptor.BlockLength[1]    = (Temp >>  8) & 0xFF;
   \   0000017A   0xEA5F 0x2018      LSRS     R0,R8,#+8
   \   0000017E   0x72B8             STRB     R0,[R7, #+10]
    133                  pFormatCapacity->MaximumDescriptor.BlockLength[2]    = (Temp      ) & 0xFF;
   \   00000180   0xF887 0x800B      STRB     R8,[R7, #+11]
    134                  Temp = Lun->DiskStatusFpnt()->BlockNumb;
   \   00000184   0x6868             LDR      R0,[R5, #+4]
   \   00000186   0x4780             BLX      R0
   \   00000188   0x6800             LDR      R0,[R0, #+0]
   \   0000018A   0x4680             MOV      R8,R0
    135                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[0] = (Temp >> 24) & 0xFF;
   \   0000018C   0xEA5F 0x6018      LSRS     R0,R8,#+24
   \   00000190   0x7138             STRB     R0,[R7, #+4]
    136                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[1] = (Temp >> 16) & 0xFF;
   \   00000192   0xEA5F 0x4018      LSRS     R0,R8,#+16
   \   00000196   0x7178             STRB     R0,[R7, #+5]
    137                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[2] = (Temp >>  8) & 0xFF;
   \   00000198   0xEA5F 0x2018      LSRS     R0,R8,#+8
   \   0000019C   0x71B8             STRB     R0,[R7, #+6]
    138                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[3] = (Temp      ) & 0xFF;
   \   0000019E   0xF887 0x8007      STRB     R8,[R7, #+7]
   \   000001A2   0xE011             B.N      ??LunImp_33
    139                }
    140                else
    141                {
    142                  pFormatCapacity->MaximumDescriptor.DescriptorType    = NoMediaPresent;
   \                     ??LunImp_32:
   \   000001A4   0x7A38             LDRB     R0,[R7, #+8]
   \   000001A6   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   000001AA   0x7238             STRB     R0,[R7, #+8]
    143                  pFormatCapacity->MaximumDescriptor.BlockLength[0]    = (2048       >> 16) & 0xFF;
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x7278             STRB     R0,[R7, #+9]
    144                  pFormatCapacity->MaximumDescriptor.BlockLength[1]    = (2048       >>  8) & 0xFF;
   \   000001B0   0x2008             MOVS     R0,#+8
   \   000001B2   0x72B8             STRB     R0,[R7, #+10]
    145                  pFormatCapacity->MaximumDescriptor.BlockLength[2]    = (2048            ) & 0xFF;
   \   000001B4   0x2000             MOVS     R0,#+0
   \   000001B6   0x72F8             STRB     R0,[R7, #+11]
    146                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[0] = (0xFFFFFFFF >> 24) & 0xFF;
   \   000001B8   0x20FF             MOVS     R0,#+255
   \   000001BA   0x7138             STRB     R0,[R7, #+4]
    147                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[1] = (0xFFFFFFFF >> 16) & 0xFF;
   \   000001BC   0x20FF             MOVS     R0,#+255
   \   000001BE   0x7178             STRB     R0,[R7, #+5]
    148                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[2] = (0xFFFFFFFF >>  8) & 0xFF;
   \   000001C0   0x20FF             MOVS     R0,#+255
   \   000001C2   0x71B8             STRB     R0,[R7, #+6]
    149                  pFormatCapacity->MaximumDescriptor.NumberofBlocks[3] = (0xFFFFFFFF      ) & 0xFF;
   \   000001C4   0x20FF             MOVS     R0,#+255
   \   000001C6   0x71F8             STRB     R0,[R7, #+7]
    150                }
    151                ScsiReadFormatCapcityData(Lun0Buffer,sizeof(Mmc3FormatCapResponse_t));
   \                     ??LunImp_33:
   \   000001C8   0x210C             MOVS     R1,#+12
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000001CE   0x.... 0x....      BL       ScsiReadFormatCapcityData
    152                break;
   \   000001D2   0xE0D7             B.N      ??LunImp_23
    153              case LunReadCapacity10ReqMsg:
    154                ScsiReadCapacityData(Lun->DiskStatusFpnt()->BlockNumb-1,
    155                                     Lun->DiskStatusFpnt()->BlockSize);
   \                     ??LunImp_18:
   \   000001D4   0x6868             LDR      R0,[R5, #+4]
   \   000001D6   0x4780             BLX      R0
   \   000001D8   0x4683             MOV      R11,R0
   \   000001DA   0x6868             LDR      R0,[R5, #+4]
   \   000001DC   0x4780             BLX      R0
   \   000001DE   0xF8DB 0x1004      LDR      R1,[R11, #+4]
   \   000001E2   0x6800             LDR      R0,[R0, #+0]
   \   000001E4   0x1E40             SUBS     R0,R0,#+1
   \   000001E6   0x.... 0x....      BL       ScsiReadCapacityData
    156                break;
   \   000001EA   0xE0CB             B.N      ??LunImp_23
    157              case LunRead10ReqMsg:
    158                BlockStart = *pMessage;
   \                     ??LunImp_17:
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   000001F0   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   000001F4   0x6001             STR      R1,[R0, #+0]
    159                BlockNum = *++pMessage;
   \   000001F6   0xF11A 0x0A04      ADDS     R10,R10,#+4
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   000001FE   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   00000202   0x6001             STR      R1,[R0, #+0]
    160                if ((BlockStart + BlockNum) > Lun->DiskStatusFpnt()->BlockNumb)
   \   00000204   0x6868             LDR      R0,[R5, #+4]
   \   00000206   0x4780             BLX      R0
   \   00000208   0x6800             LDR      R0,[R0, #+0]
   \   0000020A   0x.... 0x....      LDR.W    R1,??DataTable1_5
   \   0000020E   0x6809             LDR      R1,[R1, #+0]
   \   00000210   0x.... 0x....      LDR.W    R2,??DataTable1_6
   \   00000214   0x6812             LDR      R2,[R2, #+0]
   \   00000216   0x1851             ADDS     R1,R2,R1
   \   00000218   0x4288             CMP      R0,R1
   \   0000021A   0xD204             BCS.N    ??LunImp_34
    161                {
    162                  ScsiCmdError(ScsiInvalidCbd,ScsiStallIn);
   \   0000021C   0x2101             MOVS     R1,#+1
   \   0000021E   0x2002             MOVS     R0,#+2
   \   00000220   0x.... 0x....      BL       ScsiCmdError
    163                  break;
   \   00000224   0xE0AE             B.N      ??LunImp_23
    164                }
    165                switch(Lun->DiskIoFpnt(Lun0Buffer,BlockStart++,1,DiskRead))
   \                     ??LunImp_34:
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable1_5
   \   0000022A   0x6801             LDR      R1,[R0, #+0]
   \   0000022C   0x1C48             ADDS     R0,R1,#+1
   \   0000022E   0x.... 0x....      LDR.W    R2,??DataTable1_5
   \   00000232   0x6010             STR      R0,[R2, #+0]
   \   00000234   0x2301             MOVS     R3,#+1
   \   00000236   0x2201             MOVS     R2,#+1
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   0000023C   0xF8D5 0xC008      LDR      R12,[R5, #+8]
   \   00000240   0x47E0             BLX      R12
   \   00000242   0x2800             CMP      R0,#+0
   \   00000244   0xD003             BEQ.N    ??LunImp_35
   \   00000246   0x2802             CMP      R0,#+2
   \   00000248   0xD027             BEQ.N    ??LunImp_36
   \   0000024A   0xD321             BCC.N    ??LunImp_37
   \   0000024C   0xE02A             B.N      ??LunImp_38
    166                {
    167                case DiskCommandPass:
    168                  ScsiReadData(Lun0Buffer,
    169                               Lun->DiskStatusFpnt()->BlockSize,
    170                               (--BlockNum == 0));
   \                     ??LunImp_35:
   \   0000024E   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   00000252   0x6800             LDR      R0,[R0, #+0]
   \   00000254   0x1E40             SUBS     R0,R0,#+1
   \   00000256   0x.... 0x....      LDR.W    R1,??DataTable1_6
   \   0000025A   0x6008             STR      R0,[R1, #+0]
   \   0000025C   0x2800             CMP      R0,#+0
   \   0000025E   0xD102             BNE.N    ??LunImp_39
   \   00000260   0xF05F 0x0B01      MOVS     R11,#+1
   \   00000264   0xE001             B.N      ??LunImp_40
   \                     ??LunImp_39:
   \   00000266   0xF05F 0x0B00      MOVS     R11,#+0
   \                     ??LunImp_40:
   \   0000026A   0x6868             LDR      R0,[R5, #+4]
   \   0000026C   0x4780             BLX      R0
   \   0000026E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000272   0x465A             MOV      R2,R11
   \   00000274   0x6841             LDR      R1,[R0, #+4]
   \   00000276   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   0000027A   0x.... 0x....      BL       ScsiReadData
    171                  if(BlockNum)
   \   0000027E   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   00000282   0x6800             LDR      R0,[R0, #+0]
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD002             BEQ.N    ??LunImp_41
    172                  {
    173                    LunState = LunRead;
   \   00000288   0x....             LDR.N    R0,??DataTable1_2
   \   0000028A   0x2101             MOVS     R1,#+1
   \   0000028C   0x7001             STRB     R1,[R0, #+0]
    174                  }
    175                  break;
   \                     ??LunImp_41:
   \   0000028E   0xE00D             B.N      ??LunImp_42
    176                case DiskNotReady:
    177                  // the Media not ready
    178                  ScsiCmdError(ScsiMediamNotReady,ScsiStallIn);
   \                     ??LunImp_37:
   \   00000290   0x2101             MOVS     R1,#+1
   \   00000292   0x2001             MOVS     R0,#+1
   \   00000294   0x.... 0x....      BL       ScsiCmdError
    179                  break;
   \   00000298   0xE008             B.N      ??LunImp_42
    180                case DiskNotPresent:
    181                  // the Media not present
    182                  ScsiCmdError(ScsiMediaNotPresent,ScsiStallIn);
   \                     ??LunImp_36:
   \   0000029A   0x2101             MOVS     R1,#+1
   \   0000029C   0x2004             MOVS     R0,#+4
   \   0000029E   0x.... 0x....      BL       ScsiCmdError
    183                  break;
   \   000002A2   0xE003             B.N      ??LunImp_42
    184                default:
    185                  ScsiCmdError(ScsiFatalError,ScsiStallIn);
   \                     ??LunImp_38:
   \   000002A4   0x2101             MOVS     R1,#+1
   \   000002A6   0x2007             MOVS     R0,#+7
   \   000002A8   0x.... 0x....      BL       ScsiCmdError
    186                  break;
    187                }
    188                break;
   \                     ??LunImp_42:
   \   000002AC   0xE06A             B.N      ??LunImp_23
    189              case LunWrite10ReqMsg:
    190                BlockStart = *pMessage;
   \                     ??LunImp_20:
   \   000002AE   0x....             LDR.N    R0,??DataTable1_5
   \   000002B0   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   000002B4   0x6001             STR      R1,[R0, #+0]
    191                BlockNum = *++pMessage;
   \   000002B6   0xF11A 0x0A04      ADDS     R10,R10,#+4
   \   000002BA   0x....             LDR.N    R0,??DataTable1_6
   \   000002BC   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   000002C0   0x6001             STR      R1,[R0, #+0]
    192          
    193                if ((BlockStart + BlockNum) > Lun->DiskStatusFpnt()->BlockNumb)
   \   000002C2   0x6868             LDR      R0,[R5, #+4]
   \   000002C4   0x4780             BLX      R0
   \   000002C6   0x6800             LDR      R0,[R0, #+0]
   \   000002C8   0x....             LDR.N    R1,??DataTable1_5
   \   000002CA   0x6809             LDR      R1,[R1, #+0]
   \   000002CC   0x....             LDR.N    R2,??DataTable1_6
   \   000002CE   0x6812             LDR      R2,[R2, #+0]
   \   000002D0   0x1851             ADDS     R1,R2,R1
   \   000002D2   0x4288             CMP      R0,R1
   \   000002D4   0xD204             BCS.N    ??LunImp_43
    194                {
    195                  ScsiCmdError(ScsiInvalidCbd,ScsiStallOut);
   \   000002D6   0x2102             MOVS     R1,#+2
   \   000002D8   0x2002             MOVS     R0,#+2
   \   000002DA   0x.... 0x....      BL       ScsiCmdError
    196                  break;
   \   000002DE   0xE051             B.N      ??LunImp_23
    197                }
    198                ScsiWriteData(Lun0Buffer,
    199                              Lun->DiskStatusFpnt()->BlockSize,
    200                              FALSE);
   \                     ??LunImp_43:
   \   000002E0   0x6868             LDR      R0,[R5, #+4]
   \   000002E2   0x4780             BLX      R0
   \   000002E4   0x2200             MOVS     R2,#+0
   \   000002E6   0x6841             LDR      R1,[R0, #+4]
   \   000002E8   0x....             LDR.N    R0,??DataTable1_4
   \   000002EA   0x.... 0x....      BL       ScsiWriteData
    201                LunState = LunWrite;
   \   000002EE   0x....             LDR.N    R0,??DataTable1_2
   \   000002F0   0x2102             MOVS     R1,#+2
   \   000002F2   0x7001             STRB     R1,[R0, #+0]
    202                break;
   \   000002F4   0xE046             B.N      ??LunImp_23
    203              case LunVerify10BytChkReqMsg:
    204                BlockStart = *pMessage;
   \                     ??LunImp_22:
   \   000002F6   0x....             LDR.N    R0,??DataTable1_5
   \   000002F8   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   000002FC   0x6001             STR      R1,[R0, #+0]
    205                BlockNum = *++pMessage;
   \   000002FE   0xF11A 0x0A04      ADDS     R10,R10,#+4
   \   00000302   0x....             LDR.N    R0,??DataTable1_6
   \   00000304   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   00000308   0x6001             STR      R1,[R0, #+0]
    206          
    207                if ((BlockStart + BlockNum) > Lun->DiskStatusFpnt()->BlockNumb)
   \   0000030A   0x6868             LDR      R0,[R5, #+4]
   \   0000030C   0x4780             BLX      R0
   \   0000030E   0x6800             LDR      R0,[R0, #+0]
   \   00000310   0x....             LDR.N    R1,??DataTable1_5
   \   00000312   0x6809             LDR      R1,[R1, #+0]
   \   00000314   0x....             LDR.N    R2,??DataTable1_6
   \   00000316   0x6812             LDR      R2,[R2, #+0]
   \   00000318   0x1851             ADDS     R1,R2,R1
   \   0000031A   0x4288             CMP      R0,R1
   \   0000031C   0xD204             BCS.N    ??LunImp_44
    208                {
    209                  ScsiCmdError(ScsiInvalidCbd,ScsiStallOut);
   \   0000031E   0x2102             MOVS     R1,#+2
   \   00000320   0x2002             MOVS     R0,#+2
   \   00000322   0x.... 0x....      BL       ScsiCmdError
    210                  break;
   \   00000326   0xE02D             B.N      ??LunImp_23
    211                }
    212                ScsiWriteData(Lun0Buffer,
    213                              Lun->DiskStatusFpnt()->BlockSize,
    214                              FALSE);
   \                     ??LunImp_44:
   \   00000328   0x6868             LDR      R0,[R5, #+4]
   \   0000032A   0x4780             BLX      R0
   \   0000032C   0x2200             MOVS     R2,#+0
   \   0000032E   0x6841             LDR      R1,[R0, #+4]
   \   00000330   0x....             LDR.N    R0,??DataTable1_4
   \   00000332   0x.... 0x....      BL       ScsiWriteData
    215                LunState = LunVerify;
   \   00000336   0x....             LDR.N    R0,??DataTable1_2
   \   00000338   0x2103             MOVS     R1,#+3
   \   0000033A   0x7001             STRB     R1,[R0, #+0]
    216                break;
   \   0000033C   0xE022             B.N      ??LunImp_23
    217              case LunVerify10ReqMsg:
    218                BlockStart = *pMessage;
   \                     ??LunImp_19:
   \   0000033E   0x....             LDR.N    R0,??DataTable1_5
   \   00000340   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   00000344   0x6001             STR      R1,[R0, #+0]
    219                BlockNum = *++pMessage;
   \   00000346   0xF11A 0x0A04      ADDS     R10,R10,#+4
   \   0000034A   0x....             LDR.N    R0,??DataTable1_6
   \   0000034C   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   00000350   0x6001             STR      R1,[R0, #+0]
    220                if ((BlockStart + BlockNum) > Lun->DiskStatusFpnt()->BlockNumb)
   \   00000352   0x6868             LDR      R0,[R5, #+4]
   \   00000354   0x4780             BLX      R0
   \   00000356   0x6800             LDR      R0,[R0, #+0]
   \   00000358   0x....             LDR.N    R1,??DataTable1_5
   \   0000035A   0x6809             LDR      R1,[R1, #+0]
   \   0000035C   0x....             LDR.N    R2,??DataTable1_6
   \   0000035E   0x6812             LDR      R2,[R2, #+0]
   \   00000360   0x1851             ADDS     R1,R2,R1
   \   00000362   0x4288             CMP      R0,R1
   \   00000364   0xD204             BCS.N    ??LunImp_45
    221                {
    222                  ScsiCmdError(ScsiInvalidCbd,ScsiStallOut);
   \   00000366   0x2102             MOVS     R1,#+2
   \   00000368   0x2002             MOVS     R0,#+2
   \   0000036A   0x.... 0x....      BL       ScsiCmdError
    223                  break;
   \   0000036E   0xE009             B.N      ??LunImp_23
    224                }
    225                // Always pass
    226                ScsiWriteData(NULL,0,TRUE);
   \                     ??LunImp_45:
   \   00000370   0x2201             MOVS     R2,#+1
   \   00000372   0x2100             MOVS     R1,#+0
   \   00000374   0x2000             MOVS     R0,#+0
   \   00000376   0x.... 0x....      BL       ScsiWriteData
    227                break;
   \   0000037A   0xE003             B.N      ??LunImp_23
    228              default:
    229                // Unknown command
    230                ScsiCmdError(ScsiUnknowCommand,ScsiStallBoth);
   \                     ??LunImp_14:
   \   0000037C   0x2103             MOVS     R1,#+3
   \   0000037E   0x2003             MOVS     R0,#+3
   \   00000380   0x.... 0x....      BL       ScsiCmdError
    231                break;
    232              }
    233              break;
   \                     ??LunImp_23:
   \   00000384   0xE0FA             B.N      ??LunImp_46
    234            case LunRead:
    235              if(Message == LunDataReadyMsg)
   \                     ??LunImp_10:
   \   00000386   0xF1B9 0x0F0B      CMP      R9,#+11
   \   0000038A   0xD145             BNE.N    ??LunImp_47
    236              {
    237                switch(Lun->DiskIoFpnt(Lun0Buffer,BlockStart++,1,DiskRead))
   \   0000038C   0x....             LDR.N    R0,??DataTable1_5
   \   0000038E   0x6801             LDR      R1,[R0, #+0]
   \   00000390   0x1C48             ADDS     R0,R1,#+1
   \   00000392   0x....             LDR.N    R2,??DataTable1_5
   \   00000394   0x6010             STR      R0,[R2, #+0]
   \   00000396   0x2301             MOVS     R3,#+1
   \   00000398   0x2201             MOVS     R2,#+1
   \   0000039A   0x....             LDR.N    R0,??DataTable1_4
   \   0000039C   0xF8D5 0xC008      LDR      R12,[R5, #+8]
   \   000003A0   0x47E0             BLX      R12
   \   000003A2   0x2800             CMP      R0,#+0
   \   000003A4   0xD003             BEQ.N    ??LunImp_48
   \   000003A6   0x2802             CMP      R0,#+2
   \   000003A8   0xD026             BEQ.N    ??LunImp_49
   \   000003AA   0xD31D             BCC.N    ??LunImp_50
   \   000003AC   0xE02C             B.N      ??LunImp_51
    238                {
    239                case DiskCommandPass:
    240                  ScsiReadData(Lun0Buffer,
    241                               Lun->DiskStatusFpnt()->BlockSize,
    242                               (--BlockNum == 0));
   \                     ??LunImp_48:
   \   000003AE   0x....             LDR.N    R0,??DataTable1_6
   \   000003B0   0x6800             LDR      R0,[R0, #+0]
   \   000003B2   0x1E40             SUBS     R0,R0,#+1
   \   000003B4   0x....             LDR.N    R1,??DataTable1_6
   \   000003B6   0x6008             STR      R0,[R1, #+0]
   \   000003B8   0x2800             CMP      R0,#+0
   \   000003BA   0xD102             BNE.N    ??LunImp_52
   \   000003BC   0xF05F 0x0B01      MOVS     R11,#+1
   \   000003C0   0xE001             B.N      ??LunImp_53
   \                     ??LunImp_52:
   \   000003C2   0xF05F 0x0B00      MOVS     R11,#+0
   \                     ??LunImp_53:
   \   000003C6   0x6868             LDR      R0,[R5, #+4]
   \   000003C8   0x4780             BLX      R0
   \   000003CA   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000003CE   0x465A             MOV      R2,R11
   \   000003D0   0x6841             LDR      R1,[R0, #+4]
   \   000003D2   0x....             LDR.N    R0,??DataTable1_4
   \   000003D4   0x.... 0x....      BL       ScsiReadData
    243                  if(BlockNum == 0)
   \   000003D8   0x....             LDR.N    R0,??DataTable1_6
   \   000003DA   0x6800             LDR      R0,[R0, #+0]
   \   000003DC   0x2800             CMP      R0,#+0
   \   000003DE   0xD102             BNE.N    ??LunImp_54
    244                  {
    245                    LunState = LunCommandDecode;
   \   000003E0   0x....             LDR.N    R0,??DataTable1_2
   \   000003E2   0x2100             MOVS     R1,#+0
   \   000003E4   0x7001             STRB     R1,[R0, #+0]
    246                  }
    247                  break;
   \                     ??LunImp_54:
   \   000003E6   0xE01E             B.N      ??LunImp_55
    248                case DiskNotReady:
    249                  // the Media not ready
    250                  ScsiCmdError(ScsiMediamNotReady,ScsiStallIn);
   \                     ??LunImp_50:
   \   000003E8   0x2101             MOVS     R1,#+1
   \   000003EA   0x2001             MOVS     R0,#+1
   \   000003EC   0x.... 0x....      BL       ScsiCmdError
    251                  LunState = LunCommandDecode;
   \   000003F0   0x....             LDR.N    R0,??DataTable1_2
   \   000003F2   0x2100             MOVS     R1,#+0
   \   000003F4   0x7001             STRB     R1,[R0, #+0]
    252                  break;
   \   000003F6   0xE016             B.N      ??LunImp_55
    253                case DiskNotPresent:
    254                  // the Media not present
    255                  ScsiCmdError(ScsiMediaNotPresent,ScsiStallIn);
   \                     ??LunImp_49:
   \   000003F8   0x2101             MOVS     R1,#+1
   \   000003FA   0x2004             MOVS     R0,#+4
   \   000003FC   0x.... 0x....      BL       ScsiCmdError
    256                  LunState = LunCommandDecode;
   \   00000400   0x....             LDR.N    R0,??DataTable1_2
   \   00000402   0x2100             MOVS     R1,#+0
   \   00000404   0x7001             STRB     R1,[R0, #+0]
    257                  break;
   \   00000406   0xE00E             B.N      ??LunImp_55
    258                default:
    259                  ScsiCmdError(ScsiFatalError,ScsiStallIn);
   \                     ??LunImp_51:
   \   00000408   0x2101             MOVS     R1,#+1
   \   0000040A   0x2007             MOVS     R0,#+7
   \   0000040C   0x.... 0x....      BL       ScsiCmdError
    260                  LunState = LunCommandDecode;
   \   00000410   0x....             LDR.N    R0,??DataTable1_2
   \   00000412   0x2100             MOVS     R1,#+0
   \   00000414   0x7001             STRB     R1,[R0, #+0]
    261                  break;
   \   00000416   0xE006             B.N      ??LunImp_55
    262                }
    263              }
    264              else
    265              {
    266                // synchronization lost
    267                ScsiCmdError(ScsiFatalError,ScsiStallBoth);
   \                     ??LunImp_47:
   \   00000418   0x2103             MOVS     R1,#+3
   \   0000041A   0x2007             MOVS     R0,#+7
   \   0000041C   0x.... 0x....      BL       ScsiCmdError
    268                LunState = LunCommandDecode;
   \   00000420   0x....             LDR.N    R0,??DataTable1_2
   \   00000422   0x2100             MOVS     R1,#+0
   \   00000424   0x7001             STRB     R1,[R0, #+0]
    269              }
    270              break;
   \                     ??LunImp_55:
   \   00000426   0xE0A9             B.N      ??LunImp_46
    271            case LunWrite:
    272              if(Message == LunDataReadyMsg)
   \                     ??LunImp_9:
   \   00000428   0xF1B9 0x0F0B      CMP      R9,#+11
   \   0000042C   0xD140             BNE.N    ??LunImp_56
    273              {
    274                switch(Lun->DiskIoFpnt(Lun0Buffer,BlockStart++,1,DiskWrite))
   \   0000042E   0x....             LDR.N    R0,??DataTable1_5
   \   00000430   0x6801             LDR      R1,[R0, #+0]
   \   00000432   0x1C48             ADDS     R0,R1,#+1
   \   00000434   0x....             LDR.N    R2,??DataTable1_5
   \   00000436   0x6010             STR      R0,[R2, #+0]
   \   00000438   0x2300             MOVS     R3,#+0
   \   0000043A   0x2201             MOVS     R2,#+1
   \   0000043C   0x....             LDR.N    R0,??DataTable1_4
   \   0000043E   0xF8D5 0xC008      LDR      R12,[R5, #+8]
   \   00000442   0x47E0             BLX      R12
   \   00000444   0x2800             CMP      R0,#+0
   \   00000446   0xD003             BEQ.N    ??LunImp_57
   \   00000448   0x2802             CMP      R0,#+2
   \   0000044A   0xD021             BEQ.N    ??LunImp_58
   \   0000044C   0xD318             BCC.N    ??LunImp_59
   \   0000044E   0xE027             B.N      ??LunImp_60
    275                {
    276                case DiskCommandPass:
    277                  if(--BlockNum == 0)
   \                     ??LunImp_57:
   \   00000450   0x....             LDR.N    R0,??DataTable1_6
   \   00000452   0x6800             LDR      R0,[R0, #+0]
   \   00000454   0x1E40             SUBS     R0,R0,#+1
   \   00000456   0x....             LDR.N    R1,??DataTable1_6
   \   00000458   0x6008             STR      R0,[R1, #+0]
   \   0000045A   0x2800             CMP      R0,#+0
   \   0000045C   0xD108             BNE.N    ??LunImp_61
    278                  {
    279                    ScsiWriteData(NULL,0,TRUE);
   \   0000045E   0x2201             MOVS     R2,#+1
   \   00000460   0x2100             MOVS     R1,#+0
   \   00000462   0x2000             MOVS     R0,#+0
   \   00000464   0x.... 0x....      BL       ScsiWriteData
    280                    LunState = LunCommandDecode;
   \   00000468   0x....             LDR.N    R0,??DataTable1_2
   \   0000046A   0x2100             MOVS     R1,#+0
   \   0000046C   0x7001             STRB     R1,[R0, #+0]
   \   0000046E   0xE006             B.N      ??LunImp_62
    281                  }
    282                  else
    283                  {
    284                  ScsiWriteData(Lun0Buffer,
    285                                Lun->DiskStatusFpnt()->BlockSize,
    286                                FALSE);
   \                     ??LunImp_61:
   \   00000470   0x6868             LDR      R0,[R5, #+4]
   \   00000472   0x4780             BLX      R0
   \   00000474   0x2200             MOVS     R2,#+0
   \   00000476   0x6841             LDR      R1,[R0, #+4]
   \   00000478   0x....             LDR.N    R0,??DataTable1_4
   \   0000047A   0x.... 0x....      BL       ScsiWriteData
    287                  }
    288                  break;
   \                     ??LunImp_62:
   \   0000047E   0xE01E             B.N      ??LunImp_63
    289                case DiskNotReady:
    290                  // the Media not ready
    291                  ScsiCmdError(ScsiMediamNotReady,ScsiStallOut);
   \                     ??LunImp_59:
   \   00000480   0x2102             MOVS     R1,#+2
   \   00000482   0x2001             MOVS     R0,#+1
   \   00000484   0x.... 0x....      BL       ScsiCmdError
    292                  LunState = LunCommandDecode;
   \   00000488   0x....             LDR.N    R0,??DataTable1_2
   \   0000048A   0x2100             MOVS     R1,#+0
   \   0000048C   0x7001             STRB     R1,[R0, #+0]
    293                  break;
   \   0000048E   0xE016             B.N      ??LunImp_63
    294                case DiskNotPresent:
    295                  // the Media not present
    296                  ScsiCmdError(ScsiMediaNotPresent,ScsiStallOut);
   \                     ??LunImp_58:
   \   00000490   0x2102             MOVS     R1,#+2
   \   00000492   0x2004             MOVS     R0,#+4
   \   00000494   0x.... 0x....      BL       ScsiCmdError
    297                  LunState = LunCommandDecode;
   \   00000498   0x....             LDR.N    R0,??DataTable1_2
   \   0000049A   0x2100             MOVS     R1,#+0
   \   0000049C   0x7001             STRB     R1,[R0, #+0]
    298                  break;
   \   0000049E   0xE00E             B.N      ??LunImp_63
    299                default:
    300                  ScsiCmdError(ScsiFatalError,ScsiStallOut);
   \                     ??LunImp_60:
   \   000004A0   0x2102             MOVS     R1,#+2
   \   000004A2   0x2007             MOVS     R0,#+7
   \   000004A4   0x.... 0x....      BL       ScsiCmdError
    301                  LunState = LunCommandDecode;
   \   000004A8   0x....             LDR.N    R0,??DataTable1_2
   \   000004AA   0x2100             MOVS     R1,#+0
   \   000004AC   0x7001             STRB     R1,[R0, #+0]
    302                  break;
   \   000004AE   0xE006             B.N      ??LunImp_63
    303                }
    304              }
    305              else
    306              {
    307                // synchronization lost
    308                ScsiCmdError(ScsiFatalError,ScsiStallBoth);
   \                     ??LunImp_56:
   \   000004B0   0x2103             MOVS     R1,#+3
   \   000004B2   0x2007             MOVS     R0,#+7
   \   000004B4   0x.... 0x....      BL       ScsiCmdError
    309                LunState = LunCommandDecode;
   \   000004B8   0x....             LDR.N    R0,??DataTable1_2
   \   000004BA   0x2100             MOVS     R1,#+0
   \   000004BC   0x7001             STRB     R1,[R0, #+0]
    310              }
    311              break;
   \                     ??LunImp_63:
   \   000004BE   0xE05D             B.N      ??LunImp_46
    312            case LunVerify:
    313              if(Message == LunDataReadyMsg)
   \                     ??LunImp_11:
   \   000004C0   0xF1B9 0x0F0B      CMP      R9,#+11
   \   000004C4   0xD14B             BNE.N    ??LunImp_64
    314              {
    315                switch(Lun->DiskIoFpnt(Lun0Buffer,BlockStart++,1,DiskVerify))
   \   000004C6   0x....             LDR.N    R0,??DataTable1_5
   \   000004C8   0x6801             LDR      R1,[R0, #+0]
   \   000004CA   0x1C48             ADDS     R0,R1,#+1
   \   000004CC   0x....             LDR.N    R2,??DataTable1_5
   \   000004CE   0x6010             STR      R0,[R2, #+0]
   \   000004D0   0x2302             MOVS     R3,#+2
   \   000004D2   0x2201             MOVS     R2,#+1
   \   000004D4   0x....             LDR.N    R0,??DataTable1_4
   \   000004D6   0xF8D5 0xC008      LDR      R12,[R5, #+8]
   \   000004DA   0x47E0             BLX      R12
   \   000004DC   0x2800             CMP      R0,#+0
   \   000004DE   0xD006             BEQ.N    ??LunImp_65
   \   000004E0   0x2801             CMP      R0,#+1
   \   000004E2   0xD024             BEQ.N    ??LunImp_66
   \   000004E4   0x2802             CMP      R0,#+2
   \   000004E6   0xD02A             BEQ.N    ??LunImp_67
   \   000004E8   0x2804             CMP      R0,#+4
   \   000004EA   0xD018             BEQ.N    ??LunImp_68
   \   000004EC   0xE02F             B.N      ??LunImp_69
    316                {
    317                case DiskCommandPass:
    318                  if(--BlockNum == 0)
   \                     ??LunImp_65:
   \   000004EE   0x....             LDR.N    R0,??DataTable1_6
   \   000004F0   0x6800             LDR      R0,[R0, #+0]
   \   000004F2   0x1E40             SUBS     R0,R0,#+1
   \   000004F4   0x....             LDR.N    R1,??DataTable1_6
   \   000004F6   0x6008             STR      R0,[R1, #+0]
   \   000004F8   0x2800             CMP      R0,#+0
   \   000004FA   0xD108             BNE.N    ??LunImp_70
    319                  {
    320                    ScsiWriteData(NULL,0,TRUE);
   \   000004FC   0x2201             MOVS     R2,#+1
   \   000004FE   0x2100             MOVS     R1,#+0
   \   00000500   0x2000             MOVS     R0,#+0
   \   00000502   0x.... 0x....      BL       ScsiWriteData
    321                    LunState = LunCommandDecode;
   \   00000506   0x....             LDR.N    R0,??DataTable1_2
   \   00000508   0x2100             MOVS     R1,#+0
   \   0000050A   0x7001             STRB     R1,[R0, #+0]
   \   0000050C   0xE006             B.N      ??LunImp_71
    322                  }
    323                  else
    324                  {
    325                  ScsiWriteData(Lun0Buffer,
    326                                Lun->DiskStatusFpnt()->BlockSize,
    327                                FALSE);
   \                     ??LunImp_70:
   \   0000050E   0x6868             LDR      R0,[R5, #+4]
   \   00000510   0x4780             BLX      R0
   \   00000512   0x2200             MOVS     R2,#+0
   \   00000514   0x6841             LDR      R1,[R0, #+4]
   \   00000516   0x....             LDR.N    R0,??DataTable1_4
   \   00000518   0x.... 0x....      BL       ScsiWriteData
    328                  }
    329                  break;
   \                     ??LunImp_71:
   \   0000051C   0xE026             B.N      ??LunImp_72
    330                case DiskMiscompareError:
    331                  ScsiCmdError(ScsiMediaNotPresent,ScsiStallOut);
   \                     ??LunImp_68:
   \   0000051E   0x2102             MOVS     R1,#+2
   \   00000520   0x2004             MOVS     R0,#+4
   \   00000522   0x.... 0x....      BL       ScsiCmdError
    332                  LunState = LunCommandDecode;
   \   00000526   0x....             LDR.N    R0,??DataTable1_2
   \   00000528   0x2100             MOVS     R1,#+0
   \   0000052A   0x7001             STRB     R1,[R0, #+0]
    333                  break;
   \   0000052C   0xE01E             B.N      ??LunImp_72
    334                case DiskNotReady:
    335                  // the Media not ready
    336                  ScsiCmdError(ScsiMediamNotReady,ScsiStallOut);
   \                     ??LunImp_66:
   \   0000052E   0x2102             MOVS     R1,#+2
   \   00000530   0x2001             MOVS     R0,#+1
   \   00000532   0x.... 0x....      BL       ScsiCmdError
    337                  LunState = LunCommandDecode;
   \   00000536   0x....             LDR.N    R0,??DataTable1_2
   \   00000538   0x2100             MOVS     R1,#+0
   \   0000053A   0x7001             STRB     R1,[R0, #+0]
    338                  break;
   \   0000053C   0xE016             B.N      ??LunImp_72
    339                case DiskNotPresent:
    340                  // the Media not present
    341                  ScsiCmdError(ScsiMediaNotPresent,ScsiStallOut);
   \                     ??LunImp_67:
   \   0000053E   0x2102             MOVS     R1,#+2
   \   00000540   0x2004             MOVS     R0,#+4
   \   00000542   0x.... 0x....      BL       ScsiCmdError
    342                  LunState = LunCommandDecode;
   \   00000546   0x....             LDR.N    R0,??DataTable1_2
   \   00000548   0x2100             MOVS     R1,#+0
   \   0000054A   0x7001             STRB     R1,[R0, #+0]
    343                  break;
   \   0000054C   0xE00E             B.N      ??LunImp_72
    344                default:
    345                  ScsiCmdError(ScsiFatalError,ScsiStallOut);
   \                     ??LunImp_69:
   \   0000054E   0x2102             MOVS     R1,#+2
   \   00000550   0x2007             MOVS     R0,#+7
   \   00000552   0x.... 0x....      BL       ScsiCmdError
    346                  LunState = LunCommandDecode;
   \   00000556   0x....             LDR.N    R0,??DataTable1_2
   \   00000558   0x2100             MOVS     R1,#+0
   \   0000055A   0x7001             STRB     R1,[R0, #+0]
    347                  break;
   \   0000055C   0xE006             B.N      ??LunImp_72
    348                }
    349              }
    350              else
    351              {
    352                // synchronization lost
    353                ScsiCmdError(ScsiFatalError,ScsiStallBoth);
   \                     ??LunImp_64:
   \   0000055E   0x2103             MOVS     R1,#+3
   \   00000560   0x2007             MOVS     R0,#+7
   \   00000562   0x.... 0x....      BL       ScsiCmdError
    354                LunState = LunCommandDecode;
   \   00000566   0x....             LDR.N    R0,??DataTable1_2
   \   00000568   0x2100             MOVS     R1,#+0
   \   0000056A   0x7001             STRB     R1,[R0, #+0]
    355              }
    356              break;
   \                     ??LunImp_72:
   \   0000056C   0xE006             B.N      ??LunImp_46
    357            default:
    358              // something is wrong
    359              ScsiCmdError(ScsiFatalError,ScsiStallBoth);
   \                     ??LunImp_12:
   \   0000056E   0x2103             MOVS     R1,#+3
   \   00000570   0x2007             MOVS     R0,#+7
   \   00000572   0x.... 0x....      BL       ScsiCmdError
    360              LunState = LunCommandDecode;
   \   00000576   0x....             LDR.N    R0,??DataTable1_2
   \   00000578   0x2100             MOVS     R1,#+0
   \   0000057A   0x7001             STRB     R1,[R0, #+0]
    361              break;
    362            }
    363            return(LunState != LunCommandDecode);
   \                     ??LunImp_46:
   \   0000057C   0x....             LDR.N    R0,??DataTable1_2
   \   0000057E   0x7800             LDRB     R0,[R0, #+0]
   \   00000580   0x2800             CMP      R0,#+0
   \   00000582   0xD001             BEQ.N    ??LunImp_73
   \   00000584   0x2001             MOVS     R0,#+1
   \   00000586   0xE000             B.N      ??LunImp_74
   \                     ??LunImp_73:
   \   00000588   0x2000             MOVS     R0,#+0
   \                     ??LunImp_74:
   \   0000058A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LunImp_3:
   \   0000058C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    364          }

   \                                 In section .bss, align 1
   \                     ??LunState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??BlockStart:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??BlockNum:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     LunFun

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     pScsiMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ??LunState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     SdDskInquiry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     Lun0Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     ??BlockStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     ??BlockNum

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   LunImp
        40   -- Indirect call
        40   -> ScsiCmdError
        40   -> ScsiInquiryData
        40   -> ScsiModeSenseData
        40   -> ScsiReadCapacityData
        40   -> ScsiReadData
        40   -> ScsiReadFormatCapcityData
        40   -> ScsiTestUntilReadyData
        40   -> ScsiWriteData
        40   -> memcpy
       8   LunInit
      16   memcpy
        16   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  BlockNum
       4  BlockStart
      12  LunFun
    1424  LunImp
      42  LunInit
       1  LunState
      22  memcpy

 
    21 bytes in section .bss
 1 516 bytes in section .text
 
 1 494 bytes of CODE memory (+ 22 bytes shared)
    21 bytes of DATA memory

Errors: none
Warnings: none
