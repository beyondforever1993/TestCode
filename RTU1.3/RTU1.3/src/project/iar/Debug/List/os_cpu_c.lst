###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:42 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c          #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c -lCN     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\os_cpu_c.lst                               #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\os_cpu_c.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_CPU_C.C
     13          * Version   : V2.89
     14          * By        : Jean J. Labrosse
     15          *             Brian Nagel
     16          *
     17          * For       : ARMv7M Cortex-M3
     18          * Mode      : Thumb2
     19          * Toolchain : IAR EWARM
     20          *********************************************************************************************************
     21          */
     22          
     23          #define  OS_CPU_GLOBALS
     24          #include <ucos_ii.h>
     25          
     26          /*
     27          *********************************************************************************************************
     28          *                                          LOCAL VARIABLES
     29          *********************************************************************************************************
     30          */
     31          
     32          #if OS_TMR_EN > 0u
     33          static  INT16U  OSTmrCtr;
     34          #endif
     35          
     36          /*
     37          *********************************************************************************************************
     38          *                                          SYS TICK DEFINES
     39          *********************************************************************************************************
     40          */
     41          
     42          #define  OS_CPU_CM3_NVIC_ST_CTRL    (*((volatile INT32U *)0xE000E010uL)) /* SysTick Ctrl & Status Reg. */
     43          #define  OS_CPU_CM3_NVIC_ST_RELOAD  (*((volatile INT32U *)0xE000E014uL)) /* SysTick Reload  Value Reg. */
     44          #define  OS_CPU_CM3_NVIC_ST_CURRENT (*((volatile INT32U *)0xE000E018uL)) /* SysTick Current Value Reg. */
     45          #define  OS_CPU_CM3_NVIC_ST_CAL     (*((volatile INT32U *)0xE000E01CuL)) /* SysTick Cal     Value Reg. */
     46          #define  OS_CPU_CM3_NVIC_PRIO_ST    (*((volatile INT8U  *)0xE000ED23uL)) /* SysTick Handler Prio  Reg. */
     47          
     48          #define  OS_CPU_CM3_NVIC_ST_CTRL_COUNT                    0x00010000uL   /* Count flag.                */
     49          #define  OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC                  0x00000004uL   /* Clock Source.              */
     50          #define  OS_CPU_CM3_NVIC_ST_CTRL_INTEN                    0x00000002uL   /* Interrupt enable.          */
     51          #define  OS_CPU_CM3_NVIC_ST_CTRL_ENABLE                   0x00000001uL   /* Counter mode.              */
     52          #define  OS_CPU_CM3_NVIC_PRIO_MIN                               0xFFu    /* Min handler prio.          */
     53          
     54          /*
     55          *********************************************************************************************************
     56          *                                       OS INITIALIZATION HOOK
     57          *                                            (BEGINNING)
     58          *
     59          * Description: This function is called by OSInit() at the beginning of OSInit().
     60          *
     61          * Arguments  : none
     62          *
     63          * Note(s)    : 1) Interrupts should be disabled during this call.
     64          *********************************************************************************************************
     65          */
     66          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     67          void  OSInitHookBegin (void)
     68          {
     69          #if OS_TMR_EN > 0u
     70              OSTmrCtr = 0u;
     71          #endif
     72          }
   \                     OSInitHookBegin:
   \   00000000   0x4770             BX       LR               ;; return
     73          #endif
     74          
     75          /*
     76          *********************************************************************************************************
     77          *                                       OS INITIALIZATION HOOK
     78          *                                               (END)
     79          *
     80          * Description: This function is called by OSInit() at the end of OSInit().
     81          *
     82          * Arguments  : none
     83          *
     84          * Note(s)    : 1) Interrupts should be disabled during this call.
     85          *********************************************************************************************************
     86          */
     87          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     88          void  OSInitHookEnd (void)
     89          {
     90          }
   \                     OSInitHookEnd:
   \   00000000   0x4770             BX       LR               ;; return
     91          #endif
     92          
     93          /*
     94          *********************************************************************************************************
     95          *                                          TASK CREATION HOOK
     96          *
     97          * Description: This function is called when a task is created.
     98          *
     99          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
    100          *
    101          * Note(s)    : 1) Interrupts are disabled during this call.
    102          *********************************************************************************************************
    103          */
    104          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    105          void  OSTaskCreateHook (OS_TCB *ptcb)
    106          {
   \                     OSTaskCreateHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    107          #if OS_APP_HOOKS_EN > 0u
    108              App_TaskCreateHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskCreateHook
    109          #else
    110              (void)ptcb;                                  /* Prevent compiler warning                           */
    111          #endif
    112          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    113          #endif
    114          
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                           TASK DELETION HOOK
    119          *
    120          * Description: This function is called when a task is deleted.
    121          *
    122          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
    123          *
    124          * Note(s)    : 1) Interrupts are disabled during this call.
    125          *********************************************************************************************************
    126          */
    127          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    128          void  OSTaskDelHook (OS_TCB *ptcb)
    129          {
   \                     OSTaskDelHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    130          #if OS_APP_HOOKS_EN > 0u
    131              App_TaskDelHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskDelHook
    132          #else
    133              (void)ptcb;                                  /* Prevent compiler warning                           */
    134          #endif
    135          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    136          #endif
    137          
    138          /*
    139          *********************************************************************************************************
    140          *                                             IDLE TASK HOOK
    141          *
    142          * Description: This function is called by the idle task.  This hook has been added to allow you to do
    143          *              such things as STOP the CPU to conserve power.
    144          *
    145          * Arguments  : none
    146          *
    147          * Note(s)    : 1) Interrupts are enabled during this call.
    148          *********************************************************************************************************
    149          */
    150          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    151          void  OSTaskIdleHook (void)
    152          {
   \                     OSTaskIdleHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    153          #if OS_APP_HOOKS_EN > 0u
    154              App_TaskIdleHook();
   \   00000002   0x.... 0x....      BL       App_TaskIdleHook
    155          #endif
    156          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    157          #endif
    158          
    159          /*
    160          *********************************************************************************************************
    161          *                                            TASK RETURN HOOK
    162          *
    163          * Description: This function is called if a task accidentally returns.  In other words, a task should
    164          *              either be an infinite loop or delete itself when done.
    165          *
    166          * Arguments  : ptcb      is a pointer to the task control block of the task that is returning.
    167          *
    168          * Note(s)    : none
    169          *********************************************************************************************************
    170          */
    171          
    172          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    173          void  OSTaskReturnHook (OS_TCB  *ptcb)
    174          {
   \                     OSTaskReturnHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    175          #if OS_APP_HOOKS_EN > 0u
    176              App_TaskReturnHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskReturnHook
    177          #else
    178              (void)ptcb;
    179          #endif
    180          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    181          #endif
    182          
    183          /*
    184          *********************************************************************************************************
    185          *                                           STATISTIC TASK HOOK
    186          *
    187          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your
    188          *              application to add functionality to the statistics task.
    189          *
    190          * Arguments  : none
    191          *********************************************************************************************************
    192          */
    193          
    194          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    195          void  OSTaskStatHook (void)
    196          {
   \                     OSTaskStatHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    197          #if OS_APP_HOOKS_EN > 0u
    198              App_TaskStatHook();
   \   00000002   0x.... 0x....      BL       App_TaskStatHook
    199          #endif
    200          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    201          #endif
    202          
    203          /*
    204          *********************************************************************************************************
    205          *                                        INITIALIZE A TASK'S STACK
    206          *
    207          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    208          *              stack frame of the task being created.  This function is highly processor specific.
    209          *
    210          * Arguments  : task          is a pointer to the task code
    211          *
    212          *              p_arg         is a pointer to a user supplied data area that will be passed to the task
    213          *                            when the task first executes.
    214          *
    215          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    216          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then
    217          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    218          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    219          *                            of the stack.
    220          *
    221          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    222          *                            (see uCOS_II.H for OS_TASK_OPT_xxx).
    223          *
    224          * Returns    : Always returns the location of the new top-of-stack once the processor registers have
    225          *              been placed on the stack in the proper order.
    226          *
    227          * Note(s)    : 1) Interrupts are enabled when your task starts executing.
    228          *              2) All tasks run in Thread mode, using process stack.
    229          *********************************************************************************************************
    230          */
    231          

   \                                 In section .text, align 2, keep-with-next
    232          OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
    233          {
   \                     OSTaskStkInit:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
    234              OS_STK *stk;
    235          
    236          
    237              (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    238              stk       = ptos;                            /* Load stack pointer                                 */
   \   00000004   0x0010             MOVS     R0,R2
    239          
    240                                                           /* Registers stacked as if auto-saved on exception    */
    241              *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
   \   00000006   0xF05F 0x7580      MOVS     R5,#+16777216
   \   0000000A   0x6005             STR      R5,[R0, #+0]
    242              *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
   \   0000000C   0x1F00             SUBS     R0,R0,#+4
   \   0000000E   0x6004             STR      R4,[R0, #+0]
    243              *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
   \   00000010   0x1F00             SUBS     R0,R0,#+4
   \   00000012   0x....             LDR.N    R5,??DataTable2
   \   00000014   0x6005             STR      R5,[R0, #+0]
    244              *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
   \   00000016   0x1F00             SUBS     R0,R0,#+4
   \   00000018   0xF05F 0x3512      MOVS     R5,#+303174162
   \   0000001C   0x6005             STR      R5,[R0, #+0]
    245              *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
   \   0000001E   0x1F00             SUBS     R0,R0,#+4
   \   00000020   0xF05F 0x3503      MOVS     R5,#+50529027
   \   00000024   0x6005             STR      R5,[R0, #+0]
    246              *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
   \   00000026   0x1F00             SUBS     R0,R0,#+4
   \   00000028   0xF05F 0x3502      MOVS     R5,#+33686018
   \   0000002C   0x6005             STR      R5,[R0, #+0]
    247              *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
   \   0000002E   0x1F00             SUBS     R0,R0,#+4
   \   00000030   0xF05F 0x3501      MOVS     R5,#+16843009
   \   00000034   0x6005             STR      R5,[R0, #+0]
    248              *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
   \   00000036   0x1F00             SUBS     R0,R0,#+4
   \   00000038   0x6001             STR      R1,[R0, #+0]
    249          
    250                                                           /* Remaining registers saved on process stack         */
    251              *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
   \   0000003A   0x1F00             SUBS     R0,R0,#+4
   \   0000003C   0xF05F 0x3511      MOVS     R5,#+286331153
   \   00000040   0x6005             STR      R5,[R0, #+0]
    252              *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
   \   00000042   0x1F00             SUBS     R0,R0,#+4
   \   00000044   0xF05F 0x3510      MOVS     R5,#+269488144
   \   00000048   0x6005             STR      R5,[R0, #+0]
    253              *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
   \   0000004A   0x1F00             SUBS     R0,R0,#+4
   \   0000004C   0xF05F 0x3509      MOVS     R5,#+151587081
   \   00000050   0x6005             STR      R5,[R0, #+0]
    254              *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
   \   00000052   0x1F00             SUBS     R0,R0,#+4
   \   00000054   0xF05F 0x3508      MOVS     R5,#+134744072
   \   00000058   0x6005             STR      R5,[R0, #+0]
    255              *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
   \   0000005A   0x1F00             SUBS     R0,R0,#+4
   \   0000005C   0xF05F 0x3507      MOVS     R5,#+117901063
   \   00000060   0x6005             STR      R5,[R0, #+0]
    256              *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
   \   00000062   0x1F00             SUBS     R0,R0,#+4
   \   00000064   0xF05F 0x3506      MOVS     R5,#+101058054
   \   00000068   0x6005             STR      R5,[R0, #+0]
    257              *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
   \   0000006A   0x1F00             SUBS     R0,R0,#+4
   \   0000006C   0xF05F 0x3505      MOVS     R5,#+84215045
   \   00000070   0x6005             STR      R5,[R0, #+0]
    258              *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
   \   00000072   0x1F00             SUBS     R0,R0,#+4
   \   00000074   0xF05F 0x3504      MOVS     R5,#+67372036
   \   00000078   0x6005             STR      R5,[R0, #+0]
    259          
    260              return (stk);
   \   0000007A   0xBC30             POP      {R4,R5}
   \   0000007C   0x4770             BX       LR               ;; return
    261          }
    262          
    263          /*
    264          *********************************************************************************************************
    265          *                                           TASK SWITCH HOOK
    266          *
    267          * Description: This function is called when a task switch is performed.  This allows you to perform other
    268          *              operations during a context switch.
    269          *
    270          * Arguments  : none
    271          *
    272          * Note(s)    : 1) Interrupts are disabled during this call.
    273          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    274          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    275          *                 task being switched out (i.e. the preempted task).
    276          *********************************************************************************************************
    277          */
    278          #if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)

   \                                 In section .text, align 2, keep-with-next
    279          void  OSTaskSwHook (void)
    280          {
   \                     OSTaskSwHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    281          #if OS_APP_HOOKS_EN > 0u
    282              App_TaskSwHook();
   \   00000002   0x.... 0x....      BL       App_TaskSwHook
    283          #endif
    284          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    285          #endif
    286          
    287          /*
    288          *********************************************************************************************************
    289          *                                           OS_TCBInit() HOOK
    290          *
    291          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    292          *
    293          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    294          *
    295          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    296          *********************************************************************************************************
    297          */
    298          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    299          void  OSTCBInitHook (OS_TCB *ptcb)
    300          {
   \                     OSTCBInitHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    301          #if OS_APP_HOOKS_EN > 0u
    302              App_TCBInitHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TCBInitHook
    303          #else
    304              (void)ptcb;                                  /* Prevent compiler warning                           */
    305          #endif
    306          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    307          #endif
    308          
    309          /*
    310          *********************************************************************************************************
    311          *                                               TICK HOOK
    312          *
    313          * Description: This function is called every tick.
    314          *
    315          * Arguments  : none
    316          *
    317          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    318          *********************************************************************************************************
    319          */
    320          #if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)

   \                                 In section .text, align 2, keep-with-next
    321          void  OSTimeTickHook (void)
    322          {
   \                     OSTimeTickHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    323          #if OS_APP_HOOKS_EN > 0u
    324              App_TimeTickHook();
   \   00000002   0x.... 0x....      BL       App_TimeTickHook
    325          #endif
    326          
    327          #if OS_TMR_EN > 0u
    328              OSTmrCtr++;
    329              if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
    330                  OSTmrCtr = 0;
    331                  OSTmrSignal();
    332              }
    333          #endif
    334          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    335          #endif
    336          
    337          /*
    338          *********************************************************************************************************
    339          *                                          SYS TICK HANDLER
    340          *
    341          * Description: Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick
    342          *              interrupt.
    343          *
    344          * Arguments  : none.
    345          *
    346          * Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
    347          *********************************************************************************************************
    348          */
    349          
    350          //void  OS_CPU_SysTickHandler (void)

   \                                 In section .text, align 2, keep-with-next
    351          void SysTick_Handler(void)  // ËïÐÂ»¢ 20110217 OS_CPU_SysTickHandler rename to SysTick_Handler
    352          {
   \                     SysTick_Handler:
   \   00000000   0xB510             PUSH     {R4,LR}
    353              OS_CPU_SR  cpu_sr;
    354          
    355          
    356              OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000006   0x0004             MOVS     R4,R0
    357              OSIntNesting++;
   \   00000008   0x....             LDR.N    R0,??DataTable2_1
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable2_1
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    358              OS_EXIT_CRITICAL();
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       OS_CPU_SR_Restore
    359          
    360              OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
   \   00000018   0x.... 0x....      BL       OSTimeTick
    361          
    362              OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
   \   0000001C   0x.... 0x....      BL       OSIntExit
    363          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    364          
    365          /*
    366          *********************************************************************************************************
    367          *                                          INITIALIZE SYS TICK
    368          *
    369          * Description: Initialize the SysTick.
    370          *
    371          * Arguments  : cnts          is the number of SysTick counts between two OS tick interrupts.
    372          *
    373          * Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
    374          *********************************************************************************************************
    375          */
    376          

   \                                 In section .text, align 2, keep-with-next
    377          void  OS_CPU_SysTickInit (INT32U  cnts)
    378          {
    379              OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
   \                     OS_CPU_SysTickInit:
   \   00000000   0x1E41             SUBS     R1,R0,#+1
   \   00000002   0x....             LDR.N    R2,??DataTable2_2  ;; 0xe000e014
   \   00000004   0x6011             STR      R1,[R2, #+0]
    380                                                           /* Set prio of SysTick handler to min prio.           */
    381              OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
   \   00000006   0x....             LDR.N    R1,??DataTable2_3  ;; 0xe000ed23
   \   00000008   0x22FF             MOVS     R2,#+255
   \   0000000A   0x700A             STRB     R2,[R1, #+0]
    382                                                           /* Enable timer.                                      */
    383              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
   \   0000000C   0x....             LDR.N    R1,??DataTable2_4  ;; 0xe000e010
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xF051 0x0105      ORRS     R1,R1,#0x5
   \   00000014   0x....             LDR.N    R2,??DataTable2_4  ;; 0xe000e010
   \   00000016   0x6011             STR      R1,[R2, #+0]
    384                                                           /* Enable timer interrupt.                            */
    385              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
   \   00000018   0x....             LDR.N    R1,??DataTable2_4  ;; 0xe000e010
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000020   0x....             LDR.N    R2,??DataTable2_4  ;; 0xe000e010
   \   00000022   0x6011             STR      R1,[R2, #+0]
    386          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     OS_TaskReturn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000ED23         DC32     0xe000ed23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xE000E010         DC32     0xe000e010

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSInitHookBegin
       0   OSInitHookEnd
       8   OSTCBInitHook
         8   -> App_TCBInitHook
       8   OSTaskCreateHook
         8   -> App_TaskCreateHook
       8   OSTaskDelHook
         8   -> App_TaskDelHook
       8   OSTaskIdleHook
         8   -> App_TaskIdleHook
       8   OSTaskReturnHook
         8   -> App_TaskReturnHook
       8   OSTaskStatHook
         8   -> App_TaskStatHook
       8   OSTaskStkInit
       8   OSTaskSwHook
         8   -> App_TaskSwHook
       8   OSTimeTickHook
         8   -> App_TimeTickHook
       0   OS_CPU_SysTickInit
       8   SysTick_Handler
         8   -> OSIntExit
         8   -> OSTimeTick
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       2  OSInitHookBegin
       2  OSInitHookEnd
      12  OSTCBInitHook
      12  OSTaskCreateHook
      12  OSTaskDelHook
       8  OSTaskIdleHook
      12  OSTaskReturnHook
       8  OSTaskStatHook
     126  OSTaskStkInit
       8  OSTaskSwHook
       8  OSTimeTickHook
      38  OS_CPU_SysTickInit
      34  SysTick_Handler

 
 302 bytes in section .text
 
 302 bytes of CODE memory

Errors: none
Warnings: none
