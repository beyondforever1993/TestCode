###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:43 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Source\os_mutex.c                                   #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Source\os_mutex.c -lCN                              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë #
#                    \RTU_1.2\project\iar\Debug\Obj\ --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\os_mutex.lst                               #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\os_mutex.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCOS-II\Source\os_mutex.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                  MUTUAL EXCLUSION SEMAPHORE MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MUTEX.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.89
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          
     29          #if OS_MUTEX_EN > 0u
     30          /*
     31          *********************************************************************************************************
     32          *                                            LOCAL CONSTANTS
     33          *********************************************************************************************************
     34          */
     35          
     36          #define  OS_MUTEX_KEEP_LOWER_8   ((INT16U)0x00FFu)
     37          #define  OS_MUTEX_KEEP_UPPER_8   ((INT16U)0xFF00u)
     38          
     39          #define  OS_MUTEX_AVAILABLE      ((INT16U)0x00FFu)
     40          
     41          /*
     42          *********************************************************************************************************
     43          *                                            LOCAL CONSTANTS
     44          *********************************************************************************************************
     45          */
     46          
     47          static  void  OSMutex_RdyAtPrio(OS_TCB *ptcb, INT8U prio);
     48          
     49          /*$PAGE*/
     50          /*
     51          *********************************************************************************************************
     52          *                                   ACCEPT MUTUAL EXCLUSION SEMAPHORE
     53          *
     54          * Description: This  function checks the mutual exclusion semaphore to see if a resource is available.
     55          *              Unlike OSMutexPend(), OSMutexAccept() does not suspend the calling task if the resource is
     56          *              not available or the event did not occur.
     57          *
     58          * Arguments  : pevent     is a pointer to the event control block
     59          *
     60          *              perr       is a pointer to an error code which will be returned to your application:
     61          *                            OS_ERR_NONE         if the call was successful.
     62          *                            OS_ERR_EVENT_TYPE   if 'pevent' is not a pointer to a mutex
     63          *                            OS_ERR_PEVENT_NULL  'pevent' is a NULL pointer
     64          *                            OS_ERR_PEND_ISR     if you called this function from an ISR
     65          *                            OS_ERR_PIP_LOWER    If the priority of the task that owns the Mutex is
     66          *                                                HIGHER (i.e. a lower number) than the PIP.  This error
     67          *                                                indicates that you did not set the PIP higher (lower
     68          *                                                number) than ALL the tasks that compete for the Mutex.
     69          *                                                Unfortunately, this is something that could not be
     70          *                                                detected when the Mutex is created because we don't know
     71          *                                                what tasks will be using the Mutex.
     72          *
     73          * Returns    : == OS_TRUE    if the resource is available, the mutual exclusion semaphore is acquired
     74          *              == OS_FALSE   a) if the resource is not available
     75          *                            b) you didn't pass a pointer to a mutual exclusion semaphore
     76          *                            c) you called this function from an ISR
     77          *
     78          * Warning(s) : This function CANNOT be called from an ISR because mutual exclusion semaphores are
     79          *              intended to be used by tasks only.
     80          *********************************************************************************************************
     81          */
     82          
     83          #if OS_MUTEX_ACCEPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     84          BOOLEAN  OSMutexAccept (OS_EVENT  *pevent, 
     85                                  INT8U     *perr)
     86          {
   \                     OSMutexAccept:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     87              INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
     88          #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
     89              OS_CPU_SR  cpu_sr = 0u;
   \   00000006   0x2700             MOVS     R7,#+0
     90          #endif
     91          
     92          
     93          
     94          #if OS_ARG_CHK_EN > 0u
     95              if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
     96                  return (OS_FALSE);
     97              }
     98              if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
     99                  *perr = OS_ERR_PEVENT_NULL;
    100                  return (OS_FALSE);
    101              }
    102          #endif
    103              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD003             BEQ.N    ??OSMutexAccept_0
    104                  *perr = OS_ERR_EVENT_TYPE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x7028             STRB     R0,[R5, #+0]
    105                  return (OS_FALSE);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE03E             B.N      ??OSMutexAccept_1
    106              }
    107              if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
   \                     ??OSMutexAccept_0:
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD003             BEQ.N    ??OSMutexAccept_2
    108                  *perr = OS_ERR_PEND_ISR;
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x7028             STRB     R0,[R5, #+0]
    109                  return (OS_FALSE);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE035             B.N      ??OSMutexAccept_1
    110              }
    111              OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
   \                     ??OSMutexAccept_2:
   \   00000028   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000002C   0x0007             MOVS     R7,R0
    112              pip = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PIP from mutex                           */
   \   0000002E   0x8920             LDRH     R0,[R4, #+8]
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0x0A00             LSRS     R0,R0,#+8
   \   00000034   0x0006             MOVS     R6,R0
    113              if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   \   00000036   0x7A20             LDRB     R0,[R4, #+8]
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x28FF             CMP      R0,#+255
   \   0000003C   0xD124             BNE.N    ??OSMutexAccept_3
    114                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
   \   0000003E   0x8920             LDRH     R0,[R4, #+8]
   \   00000040   0xF410 0x407F      ANDS     R0,R0,#0xFF00
   \   00000044   0x8120             STRH     R0,[R4, #+8]
    115                  pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
   \   00000046   0x8920             LDRH     R0,[R4, #+8]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0xF891 0x1036      LDRB     R1,[R1, #+54]
   \   00000052   0x4308             ORRS     R0,R1,R0
   \   00000054   0x8120             STRH     R0,[R4, #+8]
    116                  pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x6060             STR      R0,[R4, #+4]
    117                  if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   00000068   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006A   0x4286             CMP      R6,R0
   \   0000006C   0xD305             BCC.N    ??OSMutexAccept_4
    118                      OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
   \   0000006E   0x0038             MOVS     R0,R7
   \   00000070   0x.... 0x....      BL       OS_CPU_SR_Restore
    119                      *perr = OS_ERR_PIP_LOWER;
   \   00000074   0x2078             MOVS     R0,#+120
   \   00000076   0x7028             STRB     R0,[R5, #+0]
   \   00000078   0xE004             B.N      ??OSMutexAccept_5
    120                  } else {
    121                      OS_EXIT_CRITICAL();
   \                     ??OSMutexAccept_4:
   \   0000007A   0x0038             MOVS     R0,R7
   \   0000007C   0x.... 0x....      BL       OS_CPU_SR_Restore
    122                      *perr = OS_ERR_NONE;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x7028             STRB     R0,[R5, #+0]
    123                  }
    124                  return (OS_TRUE);
   \                     ??OSMutexAccept_5:
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0xE005             B.N      ??OSMutexAccept_1
    125              }
    126              OS_EXIT_CRITICAL();
   \                     ??OSMutexAccept_3:
   \   00000088   0x0038             MOVS     R0,R7
   \   0000008A   0x.... 0x....      BL       OS_CPU_SR_Restore
    127              *perr = OS_ERR_NONE;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x7028             STRB     R0,[R5, #+0]
    128              return (OS_FALSE);
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??OSMutexAccept_1:
   \   00000094   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    129          }
    130          #endif
    131          
    132          /*$PAGE*/
    133          /*
    134          *********************************************************************************************************
    135          *                                  CREATE A MUTUAL EXCLUSION SEMAPHORE
    136          *
    137          * Description: This function creates a mutual exclusion semaphore.
    138          *
    139          * Arguments  : prio          is the priority to use when accessing the mutual exclusion semaphore.  In
    140          *                            other words, when the semaphore is acquired and a higher priority task
    141          *                            attempts to obtain the semaphore then the priority of the task owning the
    142          *                            semaphore is raised to this priority.  It is assumed that you will specify
    143          *                            a priority that is LOWER in value than ANY of the tasks competing for the
    144          *                            mutex.
    145          *
    146          *              perr          is a pointer to an error code which will be returned to your application:
    147          *                               OS_ERR_NONE         if the call was successful.
    148          *                               OS_ERR_CREATE_ISR   if you attempted to create a MUTEX from an ISR
    149          *                               OS_ERR_PRIO_EXIST   if a task at the priority inheritance priority
    150          *                                                   already exist.
    151          *                               OS_ERR_PEVENT_NULL  No more event control blocks available.
    152          *                               OS_ERR_PRIO_INVALID if the priority you specify is higher that the
    153          *                                                   maximum allowed (i.e. > OS_LOWEST_PRIO)
    154          *
    155          * Returns    : != (void *)0  is a pointer to the event control clock (OS_EVENT) associated with the
    156          *                            created mutex.
    157          *              == (void *)0  if an error is detected.
    158          *
    159          * Note(s)    : 1) The LEAST significant 8 bits of '.OSEventCnt' are used to hold the priority number
    160          *                 of the task owning the mutex or 0xFF if no task owns the mutex.
    161          *
    162          *              2) The MOST  significant 8 bits of '.OSEventCnt' are used to hold the priority number
    163          *                 to use to reduce priority inversion.
    164          *********************************************************************************************************
    165          */
    166          

   \                                 In section .text, align 2, keep-with-next
    167          OS_EVENT  *OSMutexCreate (INT8U   prio, 
    168                                    INT8U  *perr)
    169          {
   \                     OSMutexCreate:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    170              OS_EVENT  *pevent;
    171          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    172              OS_CPU_SR  cpu_sr = 0u;
   \   00000006   0x2700             MOVS     R7,#+0
    173          #endif
    174          
    175          
    176          
    177          #if OS_ARG_CHK_EN > 0u
    178              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    179                  return ((OS_EVENT *)0);
    180              }
    181              if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
    182                  *perr = OS_ERR_PRIO_INVALID;
    183                  return ((OS_EVENT *)0);
    184              }
    185          #endif
    186              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD003             BEQ.N    ??OSMutexCreate_0
    187                  *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
   \   00000012   0x2010             MOVS     R0,#+16
   \   00000014   0x7028             STRB     R0,[R5, #+0]
    188                  return ((OS_EVENT *)0);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE044             B.N      ??OSMutexCreate_1
    189              }
    190              OS_ENTER_CRITICAL();
   \                     ??OSMutexCreate_0:
   \   0000001A   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001E   0x0007             MOVS     R7,R0
    191              if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000026   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD006             BEQ.N    ??OSMutexCreate_2
    192                  OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       OS_CPU_SR_Restore
    193                  *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
   \   00000034   0x2028             MOVS     R0,#+40
   \   00000036   0x7028             STRB     R0,[R5, #+0]
    194                  return ((OS_EVENT *)0);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE033             B.N      ??OSMutexCreate_1
    195              }
    196              OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
   \                     ??OSMutexCreate_2:
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    197              pevent             = OSEventFreeList;                  /* Get next free event control block        */
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x0006             MOVS     R6,R0
    198              if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
   \   00000050   0x2E00             CMP      R6,#+0
   \   00000052   0xD10C             BNE.N    ??OSMutexCreate_3
    199                  OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    200                  OS_EXIT_CRITICAL();
   \   00000060   0x0038             MOVS     R0,R7
   \   00000062   0x.... 0x....      BL       OS_CPU_SR_Restore
    201                  *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0x7028             STRB     R0,[R5, #+0]
    202                  return (pevent);
   \   0000006A   0x0030             MOVS     R0,R6
   \   0000006C   0xE01A             B.N      ??OSMutexCreate_1
    203              }
    204              OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
   \                     ??OSMutexCreate_3:
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x6840             LDR      R0,[R0, #+4]
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    205              OS_EXIT_CRITICAL();
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x.... 0x....      BL       OS_CPU_SR_Restore
    206              pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
   \   00000082   0x2004             MOVS     R0,#+4
   \   00000084   0x7030             STRB     R0,[R6, #+0]
    207              pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.  */
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0x0220             LSLS     R0,R4,#+8
   \   0000008A   0xF050 0x00FF      ORRS     R0,R0,#0xFF
   \   0000008E   0x8130             STRH     R0,[R6, #+8]
    208              pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x6070             STR      R0,[R6, #+4]
    209          #if OS_EVENT_NAME_EN > 0u
    210              pevent->OSEventName    = (INT8U *)"?";
   \   00000094   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000096   0x6130             STR      R0,[R6, #+16]
    211          #endif
    212              OS_EventWaitListInit(pevent);
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x.... 0x....      BL       OS_EventWaitListInit
    213              *perr                  = OS_ERR_NONE;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x7028             STRB     R0,[R5, #+0]
    214              return (pevent);
   \   000000A2   0x0030             MOVS     R0,R6
   \                     ??OSMutexCreate_1:
   \   000000A4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    215          }
    216          
    217          /*$PAGE*/
    218          /*
    219          *********************************************************************************************************
    220          *                                          DELETE A MUTEX
    221          *
    222          * Description: This function deletes a mutual exclusion semaphore and readies all tasks pending on the it.
    223          *
    224          * Arguments  : pevent        is a pointer to the event control block associated with the desired mutex.
    225          *
    226          *              opt           determines delete options as follows:
    227          *                            opt == OS_DEL_NO_PEND   Delete mutex ONLY if no task pending
    228          *                            opt == OS_DEL_ALWAYS    Deletes the mutex even if tasks are waiting.
    229          *                                                    In this case, all the tasks pending will be readied.
    230          *
    231          *              perr          is a pointer to an error code that can contain one of the following values:
    232          *                            OS_ERR_NONE             The call was successful and the mutex was deleted
    233          *                            OS_ERR_DEL_ISR          If you attempted to delete the MUTEX from an ISR
    234          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    235          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mutex
    236          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
    237          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    238          *
    239          * Returns    : pevent        upon error
    240          *              (OS_EVENT *)0 if the mutex was successfully deleted.
    241          *
    242          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    243          *                 the mutex MUST check the return code of OSMutexPend().
    244          *
    245          *              2) This call can potentially disable interrupts for a long time.  The interrupt disable
    246          *                 time is directly proportional to the number of tasks waiting on the mutex.
    247          *
    248          *              3) Because ALL tasks pending on the mutex will be readied, you MUST be careful because the
    249          *                 resource(s) will no longer be guarded by the mutex.
    250          *
    251          *              4) IMPORTANT: In the 'OS_DEL_ALWAYS' case, we assume that the owner of the Mutex (if there
    252          *                            is one) is ready-to-run and is thus NOT pending on another kernel object or
    253          *                            has delayed itself.  In other words, if a task owns the mutex being deleted,
    254          *                            that task will be made ready-to-run at its original priority.
    255          *********************************************************************************************************
    256          */
    257          
    258          #if OS_MUTEX_DEL_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    259          OS_EVENT  *OSMutexDel (OS_EVENT  *pevent, 
    260                                 INT8U      opt, 
    261                                 INT8U     *perr)
    262          {
   \                     OSMutexDel:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4683             MOV      R11,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    263              BOOLEAN    tasks_waiting;
    264              OS_EVENT  *pevent_return;
    265              INT8U      pip;                                        /* Priority inheritance priority            */
    266              INT8U      prio;
    267              OS_TCB    *ptcb;
    268          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    269              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0A00      MOVS     R10,#+0
    270          #endif
    271          
    272          
    273          
    274          #if OS_ARG_CHK_EN > 0u
    275              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    276                  return (pevent);
    277              }
    278              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    279                  *perr = OS_ERR_PEVENT_NULL;
    280                  return (pevent);
    281              }
    282          #endif
    283              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   \   0000000E   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xD003             BEQ.N    ??OSMutexDel_0
    284                  *perr = OS_ERR_EVENT_TYPE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x7028             STRB     R0,[R5, #+0]
    285                  return (pevent);
   \   0000001A   0x4658             MOV      R0,R11
   \   0000001C   0xE0A1             B.N      ??OSMutexDel_1
    286              }
    287              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \                     ??OSMutexDel_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD003             BEQ.N    ??OSMutexDel_2
    288                  *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   \   00000028   0x200F             MOVS     R0,#+15
   \   0000002A   0x7028             STRB     R0,[R5, #+0]
    289                  return (pevent);
   \   0000002C   0x4658             MOV      R0,R11
   \   0000002E   0xE098             B.N      ??OSMutexDel_1
    290              }
    291              OS_ENTER_CRITICAL();
   \                     ??OSMutexDel_2:
   \   00000030   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000034   0x4682             MOV      R10,R0
    292              if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
   \   00000036   0xF89B 0x000A      LDRB     R0,[R11, #+10]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD002             BEQ.N    ??OSMutexDel_3
    293                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0xE001             B.N      ??OSMutexDel_4
    294              } else {
    295                  tasks_waiting = OS_FALSE;                          /* No                                       */
   \                     ??OSMutexDel_3:
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x0006             MOVS     R6,R0
    296              }
    297              switch (opt) {
   \                     ??OSMutexDel_4:
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x2C00             CMP      R4,#+0
   \   0000004C   0xD002             BEQ.N    ??OSMutexDel_5
   \   0000004E   0x2C01             CMP      R4,#+1
   \   00000050   0xD030             BEQ.N    ??OSMutexDel_6
   \   00000052   0xE07F             B.N      ??OSMutexDel_7
    298                  case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
    299                       if (tasks_waiting == OS_FALSE) {
   \                     ??OSMutexDel_5:
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E00             CMP      R6,#+0
   \   00000058   0xD125             BNE.N    ??OSMutexDel_8
    300          #if OS_EVENT_NAME_EN > 0u
    301                           pevent->OSEventName = (INT8U *)"?";
   \   0000005A   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   0000005C   0xF8CB 0x0010      STR      R0,[R11, #+16]
    302          #endif
    303                           pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
   \   00000060   0xF8BB 0x0008      LDRH     R0,[R11, #+8]
   \   00000064   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000066   0x0A00             LSRS     R0,R0,#+8
   \   00000068   0x4680             MOV      R8,R0
    304                           OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
   \   0000006A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0xF840 0x1028      STR      R1,[R0, R8, LSL #+2]
    305                           pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xF88B 0x0000      STRB     R0,[R11, #+0]
    306                           pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF8CB 0x0004      STR      R0,[R11, #+4]
    307                           pevent->OSEventCnt  = 0u;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xF8AB 0x0008      STRH     R0,[R11, #+8]
    308                           OSEventFreeList     = pevent;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000092   0xF8C0 0xB000      STR      R11,[R0, #+0]
    309                           OS_EXIT_CRITICAL();
   \   00000096   0x4650             MOV      R0,R10
   \   00000098   0x.... 0x....      BL       OS_CPU_SR_Restore
    310                           *perr               = OS_ERR_NONE;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x7028             STRB     R0,[R5, #+0]
    311                           pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x0007             MOVS     R7,R0
   \   000000A4   0xE005             B.N      ??OSMutexDel_9
    312                       } else {
    313                           OS_EXIT_CRITICAL();
   \                     ??OSMutexDel_8:
   \   000000A6   0x4650             MOV      R0,R10
   \   000000A8   0x.... 0x....      BL       OS_CPU_SR_Restore
    314                           *perr               = OS_ERR_TASK_WAITING;
   \   000000AC   0x2049             MOVS     R0,#+73
   \   000000AE   0x7028             STRB     R0,[R5, #+0]
    315                           pevent_return       = pevent;
   \   000000B0   0x465F             MOV      R7,R11
    316                       }
    317                       break;
   \                     ??OSMutexDel_9:
   \   000000B2   0xE055             B.N      ??OSMutexDel_10
    318          
    319                  case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
    320                       pip  = (INT8U)(pevent->OSEventCnt >> 8u);                    /* Get PIP of mutex          */
   \                     ??OSMutexDel_6:
   \   000000B4   0xF8BB 0x0008      LDRH     R0,[R11, #+8]
   \   000000B8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BA   0x0A00             LSRS     R0,R0,#+8
   \   000000BC   0x4680             MOV      R8,R0
    321                       prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
   \   000000BE   0xF8BB 0x0008      LDRH     R0,[R11, #+8]
   \   000000C2   0xF88D 0x0000      STRB     R0,[SP, #+0]
    322                       ptcb = (OS_TCB *)pevent->OSEventPtr;
   \   000000C6   0xF8DB 0x0004      LDR      R0,[R11, #+4]
   \   000000CA   0x4681             MOV      R9,R0
    323                       if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
   \   000000CC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000D0   0xD00A             BEQ.N    ??OSMutexDel_11
    324                           if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
   \   000000D2   0xF899 0x0036      LDRB     R0,[R9, #+54]
   \   000000D6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000DA   0x4540             CMP      R0,R8
   \   000000DC   0xD104             BNE.N    ??OSMutexDel_11
    325                               OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
   \   000000DE   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000E2   0x4648             MOV      R0,R9
   \   000000E4   0x.... 0x....      BL       OSMutex_RdyAtPrio
    326                           }
    327                       }
    328                       while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
   \                     ??OSMutexDel_11:
   \   000000E8   0xF89B 0x000A      LDRB     R0,[R11, #+10]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD006             BEQ.N    ??OSMutexDel_12
    329                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   \   000000F0   0x2300             MOVS     R3,#+0
   \   000000F2   0x2210             MOVS     R2,#+16
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x4658             MOV      R0,R11
   \   000000F8   0x.... 0x....      BL       OS_EventTaskRdy
   \   000000FC   0xE7F4             B.N      ??OSMutexDel_11
    330                       }
    331          #if OS_EVENT_NAME_EN > 0u
    332                       pevent->OSEventName = (INT8U *)"?";
   \                     ??OSMutexDel_12:
   \   000000FE   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000100   0xF8CB 0x0010      STR      R0,[R11, #+16]
    333          #endif
    334                       pip                 = (INT8U)(pevent->OSEventCnt >> 8u);
   \   00000104   0xF8BB 0x0008      LDRH     R0,[R11, #+8]
   \   00000108   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010A   0x0A00             LSRS     R0,R0,#+8
   \   0000010C   0x4680             MOV      R8,R0
    335                       OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
   \   0000010E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000116   0x2100             MOVS     R1,#+0
   \   00000118   0xF840 0x1028      STR      R1,[R0, R8, LSL #+2]
    336                       pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0xF88B 0x0000      STRB     R0,[R11, #+0]
    337                       pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
   \   00000122   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000126   0x6800             LDR      R0,[R0, #+0]
   \   00000128   0xF8CB 0x0004      STR      R0,[R11, #+4]
    338                       pevent->OSEventCnt  = 0u;
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0xF8AB 0x0008      STRH     R0,[R11, #+8]
    339                       OSEventFreeList     = pevent;                 /* Get next free event control block        */
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable6_3
   \   00000136   0xF8C0 0xB000      STR      R11,[R0, #+0]
    340                       OS_EXIT_CRITICAL();
   \   0000013A   0x4650             MOV      R0,R10
   \   0000013C   0x.... 0x....      BL       OS_CPU_SR_Restore
    341                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   \   00000140   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000142   0x2E01             CMP      R6,#+1
   \   00000144   0xD101             BNE.N    ??OSMutexDel_13
    342                           OS_Sched();                               /* Find highest priority task ready to run  */
   \   00000146   0x.... 0x....      BL       OS_Sched
    343                       }
    344                       *perr         = OS_ERR_NONE;
   \                     ??OSMutexDel_13:
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x7028             STRB     R0,[R5, #+0]
    345                       pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
   \   0000014E   0x2000             MOVS     R0,#+0
   \   00000150   0x0007             MOVS     R7,R0
    346                       break;
   \   00000152   0xE005             B.N      ??OSMutexDel_10
    347          
    348                  default:
    349                       OS_EXIT_CRITICAL();
   \                     ??OSMutexDel_7:
   \   00000154   0x4650             MOV      R0,R10
   \   00000156   0x.... 0x....      BL       OS_CPU_SR_Restore
    350                       *perr         = OS_ERR_INVALID_OPT;
   \   0000015A   0x2007             MOVS     R0,#+7
   \   0000015C   0x7028             STRB     R0,[R5, #+0]
    351                       pevent_return = pevent;
   \   0000015E   0x465F             MOV      R7,R11
    352                       break;
    353              }
    354              return (pevent_return);
   \                     ??OSMutexDel_10:
   \   00000160   0x0038             MOVS     R0,R7
   \                     ??OSMutexDel_1:
   \   00000162   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    355          }
    356          #endif
    357          
    358          /*$PAGE*/
    359          /*
    360          *********************************************************************************************************
    361          *                                  PEND ON MUTUAL EXCLUSION SEMAPHORE
    362          *
    363          * Description: This function waits for a mutual exclusion semaphore.
    364          *
    365          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    366          *                            mutex.
    367          *
    368          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    369          *                            wait for the resource up to the amount of time specified by this argument.
    370          *                            If you specify 0, however, your task will wait forever at the specified
    371          *                            mutex or, until the resource becomes available.
    372          *
    373          *              perr          is a pointer to where an error message will be deposited.  Possible error
    374          *                            messages are:
    375          *                               OS_ERR_NONE        The call was successful and your task owns the mutex
    376          *                               OS_ERR_TIMEOUT     The mutex was not available within the specified 'timeout'.
    377          *                               OS_ERR_PEND_ABORT  The wait on the mutex was aborted.
    378          *                               OS_ERR_EVENT_TYPE  If you didn't pass a pointer to a mutex
    379          *                               OS_ERR_PEVENT_NULL 'pevent' is a NULL pointer
    380          *                               OS_ERR_PEND_ISR    If you called this function from an ISR and the result
    381          *                                                  would lead to a suspension.
    382          *                               OS_ERR_PIP_LOWER   If the priority of the task that owns the Mutex is
    383          *                                                  HIGHER (i.e. a lower number) than the PIP.  This error
    384          *                                                  indicates that you did not set the PIP higher (lower
    385          *                                                  number) than ALL the tasks that compete for the Mutex.
    386          *                                                  Unfortunately, this is something that could not be
    387          *                                                  detected when the Mutex is created because we don't know
    388          *                                                  what tasks will be using the Mutex.
    389          *                               OS_ERR_PEND_LOCKED If you called this function when the scheduler is locked
    390          *
    391          * Returns    : none
    392          *
    393          * Note(s)    : 1) The task that owns the Mutex MUST NOT pend on any other event while it owns the mutex.
    394          *
    395          *              2) You MUST NOT change the priority of the task that owns the mutex
    396          *********************************************************************************************************
    397          */
    398          

   \                                 In section .text, align 2, keep-with-next
    399          void  OSMutexPend (OS_EVENT  *pevent, 
    400                             INT32U     timeout, 
    401                             INT8U     *perr)
    402          {
   \                     OSMutexPend:
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    403              INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
    404              INT8U      mprio;                                      /* Mutex owner priority                     */
    405              BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    406              OS_TCB    *ptcb;
    407              OS_EVENT  *pevent2;
    408              INT8U      y;
    409          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    410              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0B00      MOVS     R11,#+0
    411          #endif
    412          
    413          
    414          
    415          #if OS_ARG_CHK_EN > 0u
    416              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    417                  return;
    418              }
    419              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    420                  *perr = OS_ERR_PEVENT_NULL;
    421                  return;
    422              }
    423          #endif
    424              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD002             BEQ.N    ??OSMutexPend_0
    425                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7028             STRB     R0,[R5, #+0]
    426                  return;
   \   00000018   0xE137             B.N      ??OSMutexPend_1
    427              }
    428              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \                     ??OSMutexPend_0:
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD002             BEQ.N    ??OSMutexPend_2
    429                  *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x7028             STRB     R0,[R5, #+0]
    430                  return;
   \   00000028   0xE12F             B.N      ??OSMutexPend_1
    431              }
    432              if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
   \                     ??OSMutexPend_2:
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD002             BEQ.N    ??OSMutexPend_3
    433                  *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   \   00000034   0x200D             MOVS     R0,#+13
   \   00000036   0x7028             STRB     R0,[R5, #+0]
    434                  return;
   \   00000038   0xE127             B.N      ??OSMutexPend_1
    435              }
    436          /*$PAGE*/
    437              OS_ENTER_CRITICAL();
   \                     ??OSMutexPend_3:
   \   0000003A   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000003E   0x4683             MOV      R11,R0
    438              pip = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PIP from mutex                       */
   \   00000040   0x8920             LDRH     R0,[R4, #+8]
   \   00000042   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000044   0x0A00             LSRS     R0,R0,#+8
   \   00000046   0x0006             MOVS     R6,R0
    439                                                                     /* Is Mutex available?                      */
    440              if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   \   00000048   0x7A20             LDRB     R0,[R4, #+8]
   \   0000004A   0x28FF             CMP      R0,#+255
   \   0000004C   0xD123             BNE.N    ??OSMutexPend_4
    441                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
   \   0000004E   0x8920             LDRH     R0,[R4, #+8]
   \   00000050   0xF410 0x407F      ANDS     R0,R0,#0xFF00
   \   00000054   0x8120             STRH     R0,[R4, #+8]
    442                  pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
   \   00000056   0x8920             LDRH     R0,[R4, #+8]
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0xF891 0x1036      LDRB     R1,[R1, #+54]
   \   00000062   0x4308             ORRS     R0,R1,R0
   \   00000064   0x8120             STRH     R0,[R4, #+8]
    443                  pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x6060             STR      R0,[R4, #+4]
    444                  if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   00000078   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007A   0x4286             CMP      R6,R0
   \   0000007C   0xD305             BCC.N    ??OSMutexPend_5
    445                      OS_EXIT_CRITICAL();                            /*      ... than current task!              */
   \   0000007E   0x4658             MOV      R0,R11
   \   00000080   0x.... 0x....      BL       OS_CPU_SR_Restore
    446                      *perr = OS_ERR_PIP_LOWER;
   \   00000084   0x2078             MOVS     R0,#+120
   \   00000086   0x7028             STRB     R0,[R5, #+0]
   \   00000088   0xE004             B.N      ??OSMutexPend_6
    447                  } else {
    448                      OS_EXIT_CRITICAL();
   \                     ??OSMutexPend_5:
   \   0000008A   0x4658             MOV      R0,R11
   \   0000008C   0x.... 0x....      BL       OS_CPU_SR_Restore
    449                      *perr = OS_ERR_NONE;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x7028             STRB     R0,[R5, #+0]
    450                  }
    451                  return;
   \                     ??OSMutexPend_6:
   \   00000094   0xE0F9             B.N      ??OSMutexPend_1
    452              }
    453              mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
   \                     ??OSMutexPend_4:
   \   00000096   0x8920             LDRH     R0,[R4, #+8]
   \   00000098   0xF88D 0x0000      STRB     R0,[SP, #+0]
    454              ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
   \   0000009C   0x6860             LDR      R0,[R4, #+4]
   \   0000009E   0x4680             MOV      R8,R0
    455              if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
   \   000000A0   0xF898 0x0036      LDRB     R0,[R8, #+54]
   \   000000A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A6   0x4286             CMP      R6,R0
   \   000000A8   0xF080 0x80A6      BCS.W    ??OSMutexPend_7
    456                  if (mprio > OSTCBCur->OSTCBPrio) {
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   000000B6   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000BA   0x4288             CMP      R0,R1
   \   000000BC   0xF080 0x809C      BCS.W    ??OSMutexPend_7
    457                      y = ptcb->OSTCBY;
   \   000000C0   0xF898 0x0038      LDRB     R0,[R8, #+56]
   \   000000C4   0x4682             MOV      R10,R0
    458                      if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {          /*     See if mutex owner is ready   */
   \   000000C6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   000000CE   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   000000D2   0xF898 0x1039      LDRB     R1,[R8, #+57]
   \   000000D6   0x4208             TST      R0,R1
   \   000000D8   0xD021             BEQ.N    ??OSMutexPend_8
    459                          OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
   \   000000DA   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   000000E2   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   000000E6   0xF898 0x1039      LDRB     R1,[R8, #+57]
   \   000000EA   0x4388             BICS     R0,R0,R1
   \   000000EC   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   000000F4   0xF80A 0x0001      STRB     R0,[R10, R1]
    460                          if (OSRdyTbl[y] == 0u) {                          /*          ... list at current prio */
   \   000000F8   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   00000100   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD107             BNE.N    ??OSMutexPend_9
    461                              OSRdyGrp &= ~ptcb->OSTCBBitY;
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable6_6
   \   0000010C   0x7800             LDRB     R0,[R0, #+0]
   \   0000010E   0xF898 0x103A      LDRB     R1,[R8, #+58]
   \   00000112   0x4388             BICS     R0,R0,R1
   \   00000114   0x....             LDR.N    R1,??DataTable6_6
   \   00000116   0x7008             STRB     R0,[R1, #+0]
    462                          }
    463                          rdy = OS_TRUE;
   \                     ??OSMutexPend_9:
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0x0007             MOVS     R7,R0
   \   0000011C   0xE01E             B.N      ??OSMutexPend_10
    464                      } else {
    465                          pevent2 = ptcb->OSTCBEventPtr;
   \                     ??OSMutexPend_8:
   \   0000011E   0xF8D8 0x001C      LDR      R0,[R8, #+28]
   \   00000122   0x4681             MOV      R9,R0
    466                          if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
   \   00000124   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000128   0xD016             BEQ.N    ??OSMutexPend_11
    467                              if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
   \   0000012A   0xF898 0x0038      LDRB     R0,[R8, #+56]
   \   0000012E   0xEB10 0x0009      ADDS     R0,R0,R9
   \   00000132   0x7AC0             LDRB     R0,[R0, #+11]
   \   00000134   0xF898 0x1039      LDRB     R1,[R8, #+57]
   \   00000138   0x4388             BICS     R0,R0,R1
   \   0000013A   0xF898 0x1038      LDRB     R1,[R8, #+56]
   \   0000013E   0xEB11 0x0109      ADDS     R1,R1,R9
   \   00000142   0x72C8             STRB     R0,[R1, #+11]
   \   00000144   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD106             BNE.N    ??OSMutexPend_11
    468                                  pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
   \   0000014A   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   0000014E   0xF898 0x103A      LDRB     R1,[R8, #+58]
   \   00000152   0x4388             BICS     R0,R0,R1
   \   00000154   0xF889 0x000A      STRB     R0,[R9, #+10]
    469                              }
    470                          }
    471                          rdy = OS_FALSE;                            /* No                                       */
   \                     ??OSMutexPend_11:
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x0007             MOVS     R7,R0
    472                      }
    473                      ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
   \                     ??OSMutexPend_10:
   \   0000015C   0xF888 0x6036      STRB     R6,[R8, #+54]
    474          #if OS_LOWEST_PRIO <= 63u
    475                      ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
   \   00000160   0xF898 0x0036      LDRB     R0,[R8, #+54]
   \   00000164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000166   0x08C0             LSRS     R0,R0,#+3
   \   00000168   0xF888 0x0038      STRB     R0,[R8, #+56]
    476                      ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
   \   0000016C   0xF898 0x0036      LDRB     R0,[R8, #+54]
   \   00000170   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000174   0xF888 0x0037      STRB     R0,[R8, #+55]
    477                      ptcb->OSTCBBitY = (INT8U)(1u << ptcb->OSTCBY);
   \   00000178   0x2001             MOVS     R0,#+1
   \   0000017A   0xF898 0x1038      LDRB     R1,[R8, #+56]
   \   0000017E   0x4088             LSLS     R0,R0,R1
   \   00000180   0xF888 0x003A      STRB     R0,[R8, #+58]
    478                      ptcb->OSTCBBitX = (INT8U)(1u << ptcb->OSTCBX);
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0xF898 0x1037      LDRB     R1,[R8, #+55]
   \   0000018A   0x4088             LSLS     R0,R0,R1
   \   0000018C   0xF888 0x0039      STRB     R0,[R8, #+57]
    479          #else
    480                      ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4u) & 0xFFu);
    481                      ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
    482                      ptcb->OSTCBBitY = (INT16U)(1u << ptcb->OSTCBY);
    483                      ptcb->OSTCBBitX = (INT16U)(1u << ptcb->OSTCBX);
    484          #endif
    485                      if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
   \   00000190   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000192   0x2F01             CMP      R7,#+1
   \   00000194   0xD112             BNE.N    ??OSMutexPend_12
    486                          OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
   \   00000196   0x....             LDR.N    R0,??DataTable6_6
   \   00000198   0x7800             LDRB     R0,[R0, #+0]
   \   0000019A   0xF898 0x103A      LDRB     R1,[R8, #+58]
   \   0000019E   0x4308             ORRS     R0,R1,R0
   \   000001A0   0x....             LDR.N    R1,??DataTable6_6
   \   000001A2   0x7008             STRB     R0,[R1, #+0]
    487                          OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   \   000001A4   0xF898 0x0038      LDRB     R0,[R8, #+56]
   \   000001A8   0x....             LDR.N    R1,??DataTable6_5
   \   000001AA   0x5C40             LDRB     R0,[R0, R1]
   \   000001AC   0xF898 0x1039      LDRB     R1,[R8, #+57]
   \   000001B0   0x4308             ORRS     R0,R1,R0
   \   000001B2   0xF898 0x1038      LDRB     R1,[R8, #+56]
   \   000001B6   0x....             LDR.N    R2,??DataTable6_5
   \   000001B8   0x5488             STRB     R0,[R1, R2]
   \   000001BA   0xE019             B.N      ??OSMutexPend_13
    488                      } else {
    489                          pevent2 = ptcb->OSTCBEventPtr;
   \                     ??OSMutexPend_12:
   \   000001BC   0xF8D8 0x001C      LDR      R0,[R8, #+28]
   \   000001C0   0x4681             MOV      R9,R0
    490                          if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
   \   000001C2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001C6   0xD013             BEQ.N    ??OSMutexPend_13
    491                              pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
   \   000001C8   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   000001CC   0xF898 0x103A      LDRB     R1,[R8, #+58]
   \   000001D0   0x4308             ORRS     R0,R1,R0
   \   000001D2   0xF889 0x000A      STRB     R0,[R9, #+10]
    492                              pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   \   000001D6   0xF898 0x0038      LDRB     R0,[R8, #+56]
   \   000001DA   0xEB10 0x0009      ADDS     R0,R0,R9
   \   000001DE   0x7AC0             LDRB     R0,[R0, #+11]
   \   000001E0   0xF898 0x1039      LDRB     R1,[R8, #+57]
   \   000001E4   0x4308             ORRS     R0,R1,R0
   \   000001E6   0xF898 0x1038      LDRB     R1,[R8, #+56]
   \   000001EA   0xEB11 0x0109      ADDS     R1,R1,R9
   \   000001EE   0x72C8             STRB     R0,[R1, #+11]
    493                          }
    494                      }
    495                      OSTCBPrioTbl[pip] = ptcb;
   \                     ??OSMutexPend_13:
   \   000001F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001F2   0x....             LDR.N    R0,??DataTable6_2
   \   000001F4   0xF840 0x8026      STR      R8,[R0, R6, LSL #+2]
    496                  }
    497              }
    498              OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
   \                     ??OSMutexPend_7:
   \   000001F8   0x....             LDR.N    R0,??DataTable6_1
   \   000001FA   0x6800             LDR      R0,[R0, #+0]
   \   000001FC   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   00000200   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000204   0x....             LDR.N    R1,??DataTable6_1
   \   00000206   0x6809             LDR      R1,[R1, #+0]
   \   00000208   0xF881 0x0034      STRB     R0,[R1, #+52]
    499              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   \   0000020C   0x....             LDR.N    R0,??DataTable6_1
   \   0000020E   0x6800             LDR      R0,[R0, #+0]
   \   00000210   0x2100             MOVS     R1,#+0
   \   00000212   0xF880 0x1035      STRB     R1,[R0, #+53]
    500              OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
   \   00000216   0x....             LDR.N    R0,??DataTable6_1
   \   00000218   0x6800             LDR      R0,[R0, #+0]
   \   0000021A   0x9902             LDR      R1,[SP, #+8]
   \   0000021C   0x6301             STR      R1,[R0, #+48]
    501              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   \   0000021E   0x0020             MOVS     R0,R4
   \   00000220   0x.... 0x....      BL       OS_EventTaskWait
    502              OS_EXIT_CRITICAL();
   \   00000224   0x4658             MOV      R0,R11
   \   00000226   0x.... 0x....      BL       OS_CPU_SR_Restore
    503              OS_Sched();                                       /* Find next highest priority task ready         */
   \   0000022A   0x.... 0x....      BL       OS_Sched
    504              OS_ENTER_CRITICAL();
   \   0000022E   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000232   0x4683             MOV      R11,R0
    505              switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   \   00000234   0x....             LDR.N    R0,??DataTable6_1
   \   00000236   0x6800             LDR      R0,[R0, #+0]
   \   00000238   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   0000023C   0x2800             CMP      R0,#+0
   \   0000023E   0xD002             BEQ.N    ??OSMutexPend_14
   \   00000240   0x2802             CMP      R0,#+2
   \   00000242   0xD003             BEQ.N    ??OSMutexPend_15
   \   00000244   0xE005             B.N      ??OSMutexPend_16
    506                  case OS_STAT_PEND_OK:
    507                       *perr = OS_ERR_NONE;
   \                     ??OSMutexPend_14:
   \   00000246   0x2000             MOVS     R0,#+0
   \   00000248   0x7028             STRB     R0,[R5, #+0]
    508                       break;
   \   0000024A   0xE009             B.N      ??OSMutexPend_17
    509          
    510                  case OS_STAT_PEND_ABORT:
    511                       *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
   \                     ??OSMutexPend_15:
   \   0000024C   0x200E             MOVS     R0,#+14
   \   0000024E   0x7028             STRB     R0,[R5, #+0]
    512                       break;
   \   00000250   0xE006             B.N      ??OSMutexPend_17
    513                       
    514                  case OS_STAT_PEND_TO:
    515                  default:
    516                       OS_EventTaskRemove(OSTCBCur, pevent);
   \                     ??OSMutexPend_16:
   \   00000252   0x0021             MOVS     R1,R4
   \   00000254   0x....             LDR.N    R0,??DataTable6_1
   \   00000256   0x6800             LDR      R0,[R0, #+0]
   \   00000258   0x.... 0x....      BL       OS_EventTaskRemove
    517                       *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
   \   0000025C   0x200A             MOVS     R0,#+10
   \   0000025E   0x7028             STRB     R0,[R5, #+0]
    518                       break;
    519              }
    520              OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   \                     ??OSMutexPend_17:
   \   00000260   0x....             LDR.N    R0,??DataTable6_1
   \   00000262   0x6800             LDR      R0,[R0, #+0]
   \   00000264   0x2100             MOVS     R1,#+0
   \   00000266   0xF880 0x1034      STRB     R1,[R0, #+52]
    521              OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   \   0000026A   0x....             LDR.N    R0,??DataTable6_1
   \   0000026C   0x6800             LDR      R0,[R0, #+0]
   \   0000026E   0x2100             MOVS     R1,#+0
   \   00000270   0xF880 0x1035      STRB     R1,[R0, #+53]
    522              OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   \   00000274   0x....             LDR.N    R0,??DataTable6_1
   \   00000276   0x6800             LDR      R0,[R0, #+0]
   \   00000278   0x2100             MOVS     R1,#+0
   \   0000027A   0x61C1             STR      R1,[R0, #+28]
    523          #if (OS_EVENT_MULTI_EN > 0u)
    524              OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   \   0000027C   0x....             LDR.N    R0,??DataTable6_1
   \   0000027E   0x6800             LDR      R0,[R0, #+0]
   \   00000280   0x2100             MOVS     R1,#+0
   \   00000282   0x6201             STR      R1,[R0, #+32]
    525          #endif
    526              OS_EXIT_CRITICAL();
   \   00000284   0x4658             MOV      R0,R11
   \   00000286   0x.... 0x....      BL       OS_CPU_SR_Restore
    527          }
   \                     ??OSMutexPend_1:
   \   0000028A   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    528          /*$PAGE*/
    529          /*
    530          *********************************************************************************************************
    531          *                                  POST TO A MUTUAL EXCLUSION SEMAPHORE
    532          *
    533          * Description: This function signals a mutual exclusion semaphore
    534          *
    535          * Arguments  : pevent              is a pointer to the event control block associated with the desired
    536          *                                  mutex.
    537          *
    538          * Returns    : OS_ERR_NONE             The call was successful and the mutex was signaled.
    539          *              OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mutex
    540          *              OS_ERR_PEVENT_NULL      'pevent' is a NULL pointer
    541          *              OS_ERR_POST_ISR         Attempted to post from an ISR (not valid for MUTEXes)
    542          *              OS_ERR_NOT_MUTEX_OWNER  The task that did the post is NOT the owner of the MUTEX.
    543          *              OS_ERR_PIP_LOWER        If the priority of the new task that owns the Mutex is
    544          *                                      HIGHER (i.e. a lower number) than the PIP.  This error
    545          *                                      indicates that you did not set the PIP higher (lower
    546          *                                      number) than ALL the tasks that compete for the Mutex.
    547          *                                      Unfortunately, this is something that could not be
    548          *                                      detected when the Mutex is created because we don't know
    549          *                                      what tasks will be using the Mutex.
    550          *********************************************************************************************************
    551          */
    552          

   \                                 In section .text, align 2, keep-with-next
    553          INT8U  OSMutexPost (OS_EVENT *pevent)
    554          {
   \                     OSMutexPost:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    555              INT8U      pip;                                   /* Priority inheritance priority                 */
    556              INT8U      prio;
    557          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    558              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2700             MOVS     R7,#+0
    559          #endif
    560          
    561          
    562          
    563              if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
   \   00000006   0x....             LDR.N    R0,??DataTable6
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??OSMutexPost_0
    564                  return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
   \   0000000E   0x2005             MOVS     R0,#+5
   \   00000010   0xE05C             B.N      ??OSMutexPost_1
    565              }
    566          #if OS_ARG_CHK_EN > 0u
    567              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    568                  return (OS_ERR_PEVENT_NULL);
    569              }
    570          #endif
    571              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
   \                     ??OSMutexPost_0:
   \   00000012   0x7820             LDRB     R0,[R4, #+0]
   \   00000014   0x2804             CMP      R0,#+4
   \   00000016   0xD001             BEQ.N    ??OSMutexPost_2
    572                  return (OS_ERR_EVENT_TYPE);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE057             B.N      ??OSMutexPost_1
    573              }
    574              OS_ENTER_CRITICAL();
   \                     ??OSMutexPost_2:
   \   0000001C   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000020   0x0007             MOVS     R7,R0
    575              pip  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority inheritance priority of mutex    */
   \   00000022   0x8920             LDRH     R0,[R4, #+8]
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x0A00             LSRS     R0,R0,#+8
   \   00000028   0x0005             MOVS     R5,R0
    576              prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
   \   0000002A   0x8920             LDRH     R0,[R4, #+8]
   \   0000002C   0x0006             MOVS     R6,R0
    577              if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
   \   0000002E   0x....             LDR.N    R0,??DataTable6_1
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x6861             LDR      R1,[R4, #+4]
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD004             BEQ.N    ??OSMutexPost_3
    578                  OS_EXIT_CRITICAL();
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       OS_CPU_SR_Restore
    579                  return (OS_ERR_NOT_MUTEX_OWNER);
   \   0000003E   0x2064             MOVS     R0,#+100
   \   00000040   0xE044             B.N      ??OSMutexPost_1
    580              }
    581              if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
   \                     ??OSMutexPost_3:
   \   00000042   0x....             LDR.N    R0,??DataTable6_1
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x42A8             CMP      R0,R5
   \   0000004E   0xD105             BNE.N    ??OSMutexPost_4
    582                  OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
   \   00000050   0x0031             MOVS     R1,R6
   \   00000052   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000054   0x....             LDR.N    R0,??DataTable6_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       OSMutex_RdyAtPrio
    583              }
    584              OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
   \                     ??OSMutexPost_4:
   \   0000005C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   0x....             LDR.N    R0,??DataTable6_2
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0xF840 0x1025      STR      R1,[R0, R5, LSL #+2]
    585              if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
   \   00000066   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD025             BEQ.N    ??OSMutexPost_5
    586                                                                /* Yes, Make HPT waiting for mutex ready         */
    587                  prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   \   0000006C   0x2300             MOVS     R3,#+0
   \   0000006E   0x2210             MOVS     R2,#+16
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       OS_EventTaskRdy
   \   00000078   0x0006             MOVS     R6,R0
    588                  pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
   \   0000007A   0x8920             LDRH     R0,[R4, #+8]
   \   0000007C   0xF410 0x407F      ANDS     R0,R0,#0xFF00
   \   00000080   0x8120             STRH     R0,[R4, #+8]
    589                  pevent->OSEventCnt |= prio;
   \   00000082   0x8920             LDRH     R0,[R4, #+8]
   \   00000084   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000086   0x4330             ORRS     R0,R6,R0
   \   00000088   0x8120             STRH     R0,[R4, #+8]
    590                  pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
   \   0000008A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008C   0x....             LDR.N    R0,??DataTable6_2
   \   0000008E   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000092   0x6060             STR      R0,[R4, #+4]
    591                  if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
   \   00000094   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000096   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000098   0x42B5             CMP      R5,R6
   \   0000009A   0xD306             BCC.N    ??OSMutexPost_6
    592                      OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
   \   0000009C   0x0038             MOVS     R0,R7
   \   0000009E   0x.... 0x....      BL       OS_CPU_SR_Restore
    593                      OS_Sched();                               /*      Find highest priority task ready to run  */
   \   000000A2   0x.... 0x....      BL       OS_Sched
    594                      return (OS_ERR_PIP_LOWER);
   \   000000A6   0x2078             MOVS     R0,#+120
   \   000000A8   0xE010             B.N      ??OSMutexPost_1
    595                  } else {
    596                      OS_EXIT_CRITICAL();
   \                     ??OSMutexPost_6:
   \   000000AA   0x0038             MOVS     R0,R7
   \   000000AC   0x.... 0x....      BL       OS_CPU_SR_Restore
    597                      OS_Sched();                               /*      Find highest priority task ready to run  */
   \   000000B0   0x.... 0x....      BL       OS_Sched
    598                      return (OS_ERR_NONE);
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0xE009             B.N      ??OSMutexPost_1
    599                  }
    600              }
    601              pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
   \                     ??OSMutexPost_5:
   \   000000B8   0x8920             LDRH     R0,[R4, #+8]
   \   000000BA   0xF050 0x00FF      ORRS     R0,R0,#0xFF
   \   000000BE   0x8120             STRH     R0,[R4, #+8]
    602              pevent->OSEventPtr  = (void *)0;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x6060             STR      R0,[R4, #+4]
    603              OS_EXIT_CRITICAL();
   \   000000C4   0x0038             MOVS     R0,R7
   \   000000C6   0x.... 0x....      BL       OS_CPU_SR_Restore
    604              return (OS_ERR_NONE);
   \   000000CA   0x2000             MOVS     R0,#+0
   \                     ??OSMutexPost_1:
   \   000000CC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    605          }
    606          /*$PAGE*/
    607          /*
    608          *********************************************************************************************************
    609          *                                     QUERY A MUTUAL EXCLUSION SEMAPHORE
    610          *
    611          * Description: This function obtains information about a mutex
    612          *
    613          * Arguments  : pevent          is a pointer to the event control block associated with the desired mutex
    614          *
    615          *              p_mutex_data    is a pointer to a structure that will contain information about the mutex
    616          *
    617          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    618          *              OS_ERR_QUERY_ISR     If you called this function from an ISR
    619          *              OS_ERR_PEVENT_NULL   If 'pevent'       is a NULL pointer
    620          *              OS_ERR_PDATA_NULL    If 'p_mutex_data' is a NULL pointer
    621          *              OS_ERR_EVENT_TYPE    If you are attempting to obtain data from a non mutex.
    622          *********************************************************************************************************
    623          */
    624          
    625          #if OS_MUTEX_QUERY_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    626          INT8U  OSMutexQuery (OS_EVENT       *pevent, 
    627                               OS_MUTEX_DATA  *p_mutex_data)
    628          {
   \                     OSMutexQuery:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    629              INT8U      i;
    630          #if OS_LOWEST_PRIO <= 63u
    631              INT8U     *psrc;
    632              INT8U     *pdest;
    633          #else
    634              INT16U    *psrc;
    635              INT16U    *pdest;
    636          #endif
    637          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    638              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0xF05F 0x0900      MOVS     R9,#+0
    639          #endif
    640          
    641          
    642          
    643              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \   0000000C   0x....             LDR.N    R0,??DataTable6
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD001             BEQ.N    ??OSMutexQuery_0
    644                  return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016   0xE02C             B.N      ??OSMutexQuery_1
    645              }
    646          #if OS_ARG_CHK_EN > 0u
    647              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    648                  return (OS_ERR_PEVENT_NULL);
    649              }
    650              if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
    651                  return (OS_ERR_PDATA_NULL);
    652              }
    653          #endif
    654              if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   \                     ??OSMutexQuery_0:
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xD001             BEQ.N    ??OSMutexQuery_2
    655                  return (OS_ERR_EVENT_TYPE);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE027             B.N      ??OSMutexQuery_1
    656              }
    657              OS_ENTER_CRITICAL();
   \                     ??OSMutexQuery_2:
   \   00000022   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000026   0x4681             MOV      R9,R0
    658              p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8u);
   \   00000028   0x8920             LDRH     R0,[R4, #+8]
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x0A00             LSRS     R0,R0,#+8
   \   0000002E   0x71E8             STRB     R0,[R5, #+7]
    659              p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
   \   00000030   0x8920             LDRH     R0,[R4, #+8]
   \   00000032   0x71A8             STRB     R0,[R5, #+6]
    660              if (p_mutex_data->OSOwnerPrio == 0xFFu) {
   \   00000034   0x79A8             LDRB     R0,[R5, #+6]
   \   00000036   0x28FF             CMP      R0,#+255
   \   00000038   0xD102             BNE.N    ??OSMutexQuery_3
    661                  p_mutex_data->OSValue = OS_TRUE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x7168             STRB     R0,[R5, #+5]
   \   0000003E   0xE001             B.N      ??OSMutexQuery_4
    662              } else {
    663                  p_mutex_data->OSValue = OS_FALSE;
   \                     ??OSMutexQuery_3:
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x7168             STRB     R0,[R5, #+5]
    664              }
    665              p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
   \                     ??OSMutexQuery_4:
   \   00000044   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000046   0x7128             STRB     R0,[R5, #+4]
    666              psrc                      = &pevent->OSEventTbl[0];
   \   00000048   0xF204 0x000B      ADDW     R0,R4,#+11
   \   0000004C   0x0007             MOVS     R7,R0
    667              pdest                     = &p_mutex_data->OSEventTbl[0];
   \   0000004E   0x46A8             MOV      R8,R5
    668              for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0006             MOVS     R6,R0
   \                     ??OSMutexQuery_5:
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0x2E04             CMP      R6,#+4
   \   00000058   0xD207             BCS.N    ??OSMutexQuery_6
    669                  *pdest++ = *psrc++;
   \   0000005A   0x7838             LDRB     R0,[R7, #+0]
   \   0000005C   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000060   0x1C7F             ADDS     R7,R7,#+1
   \   00000062   0xF118 0x0801      ADDS     R8,R8,#+1
    670              }
   \   00000066   0x1C76             ADDS     R6,R6,#+1
   \   00000068   0xE7F4             B.N      ??OSMutexQuery_5
    671              OS_EXIT_CRITICAL();
   \                     ??OSMutexQuery_6:
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x.... 0x....      BL       OS_CPU_SR_Restore
    672              return (OS_ERR_NONE);
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??OSMutexQuery_1:
   \   00000072   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    673          }
    674          #endif                                                     /* OS_MUTEX_QUERY_EN                        */
    675          
    676          /*$PAGE*/
    677          /*
    678          *********************************************************************************************************
    679          *                                RESTORE A TASK BACK TO ITS ORIGINAL PRIORITY
    680          *
    681          * Description: This function makes a task ready at the specified priority
    682          *
    683          * Arguments  : ptcb            is a pointer to OS_TCB of the task to make ready
    684          *
    685          *              prio            is the desired priority
    686          *
    687          * Returns    : none
    688          *********************************************************************************************************
    689          */
    690          

   \                                 In section .text, align 2, keep-with-next
    691          static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb, 
    692                                           INT8U    prio)
    693          {
   \                     OSMutex_RdyAtPrio:
   \   00000000   0xB430             PUSH     {R4,R5}
    694              INT8U   y;
    695          
    696          
    697              y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
   \   00000002   0xF890 0x3038      LDRB     R3,[R0, #+56]
   \   00000006   0x001A             MOVS     R2,R3
    698              OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x....             LDR.N    R3,??DataTable6_5
   \   0000000C   0x5CD3             LDRB     R3,[R2, R3]
   \   0000000E   0xF890 0x4039      LDRB     R4,[R0, #+57]
   \   00000012   0x43A3             BICS     R3,R3,R4
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x....             LDR.N    R4,??DataTable6_5
   \   00000018   0x5513             STRB     R3,[R2, R4]
    699              if (OSRdyTbl[y] == 0u) {
   \   0000001A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001C   0x....             LDR.N    R3,??DataTable6_5
   \   0000001E   0x5CD3             LDRB     R3,[R2, R3]
   \   00000020   0x2B00             CMP      R3,#+0
   \   00000022   0xD106             BNE.N    ??OSMutex_RdyAtPrio_0
    700                  OSRdyGrp &= ~ptcb->OSTCBBitY;
   \   00000024   0x....             LDR.N    R3,??DataTable6_6
   \   00000026   0x781B             LDRB     R3,[R3, #+0]
   \   00000028   0xF890 0x403A      LDRB     R4,[R0, #+58]
   \   0000002C   0x43A3             BICS     R3,R3,R4
   \   0000002E   0x....             LDR.N    R4,??DataTable6_6
   \   00000030   0x7023             STRB     R3,[R4, #+0]
    701              }
    702              ptcb->OSTCBPrio         = prio;
   \                     ??OSMutex_RdyAtPrio_0:
   \   00000032   0xF880 0x1036      STRB     R1,[R0, #+54]
    703              OSPrioCur               = prio;                        /* The current task is now at this priority */
   \   00000036   0x....             LDR.N    R3,??DataTable6_7
   \   00000038   0x7019             STRB     R1,[R3, #+0]
    704          #if OS_LOWEST_PRIO <= 63u
    705              ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
   \   0000003A   0xF3C1 0x03C2      UBFX     R3,R1,#+3,#+3
   \   0000003E   0xF880 0x3038      STRB     R3,[R0, #+56]
    706              ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
   \   00000042   0xF011 0x0307      ANDS     R3,R1,#0x7
   \   00000046   0xF880 0x3037      STRB     R3,[R0, #+55]
    707              ptcb->OSTCBBitY         = (INT8U)(1u << ptcb->OSTCBY);
   \   0000004A   0x2301             MOVS     R3,#+1
   \   0000004C   0xF890 0x4038      LDRB     R4,[R0, #+56]
   \   00000050   0x40A3             LSLS     R3,R3,R4
   \   00000052   0xF880 0x303A      STRB     R3,[R0, #+58]
    708              ptcb->OSTCBBitX         = (INT8U)(1u << ptcb->OSTCBX);
   \   00000056   0x2301             MOVS     R3,#+1
   \   00000058   0xF890 0x4037      LDRB     R4,[R0, #+55]
   \   0000005C   0x40A3             LSLS     R3,R3,R4
   \   0000005E   0xF880 0x3039      STRB     R3,[R0, #+57]
    709          #else
    710              ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    711              ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    712              ptcb->OSTCBBitY         = (INT16U)(1u << ptcb->OSTCBY);
    713              ptcb->OSTCBBitX         = (INT16U)(1u << ptcb->OSTCBX);
    714          #endif
    715              OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
   \   00000062   0x....             LDR.N    R3,??DataTable6_6
   \   00000064   0x781B             LDRB     R3,[R3, #+0]
   \   00000066   0xF890 0x403A      LDRB     R4,[R0, #+58]
   \   0000006A   0x4323             ORRS     R3,R4,R3
   \   0000006C   0x....             LDR.N    R4,??DataTable6_6
   \   0000006E   0x7023             STRB     R3,[R4, #+0]
    716              OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   \   00000070   0xF890 0x3038      LDRB     R3,[R0, #+56]
   \   00000074   0x....             LDR.N    R4,??DataTable6_5
   \   00000076   0x5D1B             LDRB     R3,[R3, R4]
   \   00000078   0xF890 0x4039      LDRB     R4,[R0, #+57]
   \   0000007C   0x4323             ORRS     R3,R4,R3
   \   0000007E   0xF890 0x4038      LDRB     R4,[R0, #+56]
   \   00000082   0x....             LDR.N    R5,??DataTable6_5
   \   00000084   0x5563             STRB     R3,[R4, R5]
    717              OSTCBPrioTbl[prio]      = ptcb;
   \   00000086   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000088   0x....             LDR.N    R3,??DataTable6_2
   \   0000008A   0xF843 0x0021      STR      R0,[R3, R1, LSL #+2]
    718              
    719          }
   \   0000008E   0xBC30             POP      {R4,R5}
   \   00000090   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x3F 0x00          DC8      "\?",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     OSTCBPrioTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     OSEventFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     OSLockNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     OSRdyTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     OSRdyGrp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     OSPrioCur

   \                                 In section .rodata, align 2
   \   00000000   0x3F 0x00          DC8 "?"
    720          
    721          
    722          #endif                                                     /* OS_MUTEX_EN                              */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   OSMutexAccept
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
      24   OSMutexCreate
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventWaitListInit
      40   OSMutexDel
        40   -> OSMutex_RdyAtPrio
        40   -> OS_CPU_SR_Restore
        40   -> OS_CPU_SR_Save
        40   -> OS_EventTaskRdy
        40   -> OS_Sched
      48   OSMutexPend
        48   -> OS_CPU_SR_Restore
        48   -> OS_CPU_SR_Save
        48   -> OS_EventTaskRemove
        48   -> OS_EventTaskWait
        48   -> OS_Sched
      24   OSMutexPost
        24   -> OSMutex_RdyAtPrio
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      32   OSMutexQuery
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
       8   OSMutex_RdyAtPrio


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "?">
       4  ??DataTable2
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
     150  OSMutexAccept
     166  OSMutexCreate
     358  OSMutexDel
     654  OSMutexPend
     206  OSMutexPost
     118  OSMutexQuery
     146  OSMutex_RdyAtPrio

 
     2 bytes in section .rodata
 1 834 bytes in section .text
 
 1 834 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none
