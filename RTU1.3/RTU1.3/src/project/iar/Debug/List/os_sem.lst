###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:43 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Source\os_sem.c                                     #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCO #
#                    S-II\Source\os_sem.c -lCN D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\Debug\List\ -o              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\ --no_cse --no_unroll --no_inline           #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2 #
#                    \project\iar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\BSP\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\ADC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\RTC\ -I                #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\TILT\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\ #
#                    ´úÂë\RTU_1.2\project\iar\..\..\BSP\RDLevel\ -I           #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RS232\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\OS-v2\ -I            #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\VibrationString\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\os_sem.lst                                 #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\os_sem.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\ucos2\uCOS-II\Source\os_sem.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                          SEMAPHORE MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2009, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_SEM.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.89
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          #if OS_SEM_EN > 0
     29          /*$PAGE*/
     30          /*
     31          *********************************************************************************************************
     32          *                                           ACCEPT SEMAPHORE
     33          *
     34          * Description: This function checks the semaphore to see if a resource is available or, if an event
     35          *              occurred.  Unlike OSSemPend(), OSSemAccept() does not suspend the calling task if the
     36          *              resource is not available or the event did not occur.
     37          *
     38          * Arguments  : pevent     is a pointer to the event control block
     39          *
     40          * Returns    : >  0       if the resource is available or the event did not occur the semaphore is
     41          *                         decremented to obtain the resource.
     42          *              == 0       if the resource is not available or the event did not occur or,
     43          *                         if 'pevent' is a NULL pointer or,
     44          *                         if you didn't pass a pointer to a semaphore
     45          *********************************************************************************************************
     46          */
     47          
     48          #if OS_SEM_ACCEPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     49          INT16U  OSSemAccept (OS_EVENT *pevent)
     50          {
   \                     OSSemAccept:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     51              INT16U     cnt;
     52          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
     53              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2600             MOVS     R6,#+0
     54          #endif
     55          
     56          
     57          
     58          #if OS_ARG_CHK_EN > 0u
     59              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
     60                  return (0u);
     61              }
     62          #endif
     63              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD001             BEQ.N    ??OSSemAccept_0
     64                  return (0u);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE00F             B.N      ??OSSemAccept_1
     65              }
     66              OS_ENTER_CRITICAL();
   \                     ??OSSemAccept_0:
   \   00000010   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000014   0x0006             MOVS     R6,R0
     67              cnt = pevent->OSEventCnt;
   \   00000016   0x8920             LDRH     R0,[R4, #+8]
   \   00000018   0x0005             MOVS     R5,R0
     68              if (cnt > 0u) {                                   /* See if resource is available                  */
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD002             BEQ.N    ??OSSemAccept_2
     69                  pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   \   00000020   0x8920             LDRH     R0,[R4, #+8]
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x8120             STRH     R0,[R4, #+8]
     70              }
     71              OS_EXIT_CRITICAL();
   \                     ??OSSemAccept_2:
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x.... 0x....      BL       OS_CPU_SR_Restore
     72              return (cnt);                                     /* Return semaphore count                        */
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??OSSemAccept_1:
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
     73          }
     74          #endif
     75          
     76          /*$PAGE*/
     77          /*
     78          *********************************************************************************************************
     79          *                                           CREATE A SEMAPHORE
     80          *
     81          * Description: This function creates a semaphore.
     82          *
     83          * Arguments  : cnt           is the initial value for the semaphore.  If the value is 0, no resource is
     84          *                            available (or no event has occurred).  You initialize the semaphore to a
     85          *                            non-zero value to specify how many resources are available (e.g. if you have
     86          *                            10 resources, you would initialize the semaphore to 10).
     87          *
     88          * Returns    : != (void *)0  is a pointer to the event control block (OS_EVENT) associated with the
     89          *                            created semaphore
     90          *              == (void *)0  if no event control blocks were available
     91          *********************************************************************************************************
     92          */
     93          

   \                                 In section .text, align 2, keep-with-next
     94          OS_EVENT  *OSSemCreate (INT16U cnt)
     95          {
   \                     OSSemCreate:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     96              OS_EVENT  *pevent;
     97          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
     98              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2600             MOVS     R6,#+0
     99          #endif
    100          
    101          
    102          
    103              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \   00000006   0x....             LDR.N    R0,??DataTable2_1
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??OSSemCreate_0
    104                  return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE01E             B.N      ??OSSemCreate_1
    105              }
    106              OS_ENTER_CRITICAL();
   \                     ??OSSemCreate_0:
   \   00000012   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000016   0x0006             MOVS     R6,R0
    107              pevent = OSEventFreeList;                              /* Get next free event control block        */
   \   00000018   0x....             LDR.N    R0,??DataTable2_2
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x0005             MOVS     R5,R0
    108              if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   \   0000001E   0x....             LDR.N    R0,??DataTable2_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD004             BEQ.N    ??OSSemCreate_2
    109                  OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   \   00000026   0x....             LDR.N    R0,??DataTable2_2
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x6840             LDR      R0,[R0, #+4]
   \   0000002C   0x....             LDR.N    R1,??DataTable2_2
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    110              }
    111              OS_EXIT_CRITICAL();
   \                     ??OSSemCreate_2:
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       OS_CPU_SR_Restore
    112              if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD009             BEQ.N    ??OSSemCreate_3
    113                  pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   \   0000003A   0x2003             MOVS     R0,#+3
   \   0000003C   0x7028             STRB     R0,[R5, #+0]
    114                  pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   \   0000003E   0x812C             STRH     R4,[R5, #+8]
    115                  pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x6068             STR      R0,[R5, #+4]
    116          #if OS_EVENT_NAME_EN > 0u
    117                  pevent->OSEventName    = (INT8U *)"?";
   \   00000044   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000046   0x6128             STR      R0,[R5, #+16]
    118          #endif
    119                  OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       OS_EventWaitListInit
    120              }
    121              return (pevent);
   \                     ??OSSemCreate_3:
   \   0000004E   0x0028             MOVS     R0,R5
   \                     ??OSSemCreate_1:
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
    122          }
    123          
    124          /*$PAGE*/
    125          /*
    126          *********************************************************************************************************
    127          *                                         DELETE A SEMAPHORE
    128          *
    129          * Description: This function deletes a semaphore and readies all tasks pending on the semaphore.
    130          *
    131          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    132          *                            semaphore.
    133          *
    134          *              opt           determines delete options as follows:
    135          *                            opt == OS_DEL_NO_PEND   Delete semaphore ONLY if no task pending
    136          *                            opt == OS_DEL_ALWAYS    Deletes the semaphore even if tasks are waiting.
    137          *                                                    In this case, all the tasks pending will be readied.
    138          *
    139          *              perr          is a pointer to an error code that can contain one of the following values:
    140          *                            OS_ERR_NONE             The call was successful and the semaphore was deleted
    141          *                            OS_ERR_DEL_ISR          If you attempted to delete the semaphore from an ISR
    142          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    143          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the semaphore
    144          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a semaphore
    145          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    146          *
    147          * Returns    : pevent        upon error
    148          *              (OS_EVENT *)0 if the semaphore was successfully deleted.
    149          *
    150          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    151          *                 the semaphore MUST check the return code of OSSemPend().
    152          *              2) OSSemAccept() callers will not know that the intended semaphore has been deleted unless
    153          *                 they check 'pevent' to see that it's a NULL pointer.
    154          *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
    155          *                 time is directly proportional to the number of tasks waiting on the semaphore.
    156          *              4) Because ALL tasks pending on the semaphore will be readied, you MUST be careful in
    157          *                 applications where the semaphore is used for mutual exclusion because the resource(s)
    158          *                 will no longer be guarded by the semaphore.
    159          *********************************************************************************************************
    160          */
    161          
    162          #if OS_SEM_DEL_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    163          OS_EVENT  *OSSemDel (OS_EVENT  *pevent, 
    164                               INT8U      opt, 
    165                               INT8U     *perr)
    166          {
   \                     OSSemDel:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4681             MOV      R9,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    167              BOOLEAN    tasks_waiting;
    168              OS_EVENT  *pevent_return;
    169          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    170              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    171          #endif
    172          
    173          
    174          
    175          #if OS_ARG_CHK_EN > 0u
    176              if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    177                  return (pevent);
    178              }
    179              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    180                  *perr = OS_ERR_PEVENT_NULL;
    181                  return (pevent);
    182              }
    183          #endif
    184              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   \   0000000E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD003             BEQ.N    ??OSSemDel_0
    185                  *perr = OS_ERR_EVENT_TYPE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x7028             STRB     R0,[R5, #+0]
    186                  return (pevent);
   \   0000001A   0x4648             MOV      R0,R9
   \   0000001C   0xE06A             B.N      ??OSSemDel_1
    187              }
    188              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \                     ??OSSemDel_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable2_1
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD003             BEQ.N    ??OSSemDel_2
    189                  *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   \   00000026   0x200F             MOVS     R0,#+15
   \   00000028   0x7028             STRB     R0,[R5, #+0]
    190                  return (pevent);
   \   0000002A   0x4648             MOV      R0,R9
   \   0000002C   0xE062             B.N      ??OSSemDel_1
    191              }
    192              OS_ENTER_CRITICAL();
   \                     ??OSSemDel_2:
   \   0000002E   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000032   0x4680             MOV      R8,R0
    193              if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
   \   00000034   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD002             BEQ.N    ??OSSemDel_3
    194                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x0006             MOVS     R6,R0
   \   00000040   0xE001             B.N      ??OSSemDel_4
    195              } else {
    196                  tasks_waiting = OS_FALSE;                          /* No                                       */
   \                     ??OSSemDel_3:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x0006             MOVS     R6,R0
    197              }
    198              switch (opt) {
   \                     ??OSSemDel_4:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C00             CMP      R4,#+0
   \   0000004A   0xD002             BEQ.N    ??OSSemDel_5
   \   0000004C   0x2C01             CMP      R4,#+1
   \   0000004E   0xD022             BEQ.N    ??OSSemDel_6
   \   00000050   0xE049             B.N      ??OSSemDel_7
    199                  case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
    200                       if (tasks_waiting == OS_FALSE) {
   \                     ??OSSemDel_5:
   \   00000052   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD117             BNE.N    ??OSSemDel_8
    201          #if OS_EVENT_NAME_EN > 0u
    202                           pevent->OSEventName    = (INT8U *)"?";
   \   00000058   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   0000005A   0xF8C9 0x0010      STR      R0,[R9, #+16]
    203          #endif
    204                           pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF889 0x0000      STRB     R0,[R9, #+0]
    205                           pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   \   00000064   0x....             LDR.N    R0,??DataTable2_2
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF8C9 0x0004      STR      R0,[R9, #+4]
    206                           pevent->OSEventCnt     = 0u;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF8A9 0x0008      STRH     R0,[R9, #+8]
    207                           OSEventFreeList        = pevent;          /* Get next free event control block        */
   \   00000072   0x....             LDR.N    R0,??DataTable2_2
   \   00000074   0xF8C0 0x9000      STR      R9,[R0, #+0]
    208                           OS_EXIT_CRITICAL();
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       OS_CPU_SR_Restore
    209                           *perr                  = OS_ERR_NONE;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x7028             STRB     R0,[R5, #+0]
    210                           pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x0007             MOVS     R7,R0
   \   00000086   0xE005             B.N      ??OSSemDel_9
    211                       } else {
    212                           OS_EXIT_CRITICAL();
   \                     ??OSSemDel_8:
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x.... 0x....      BL       OS_CPU_SR_Restore
    213                           *perr                  = OS_ERR_TASK_WAITING;
   \   0000008E   0x2049             MOVS     R0,#+73
   \   00000090   0x7028             STRB     R0,[R5, #+0]
    214                           pevent_return          = pevent;
   \   00000092   0x464F             MOV      R7,R9
    215                       }
    216                       break;
   \                     ??OSSemDel_9:
   \   00000094   0xE02D             B.N      ??OSSemDel_10
    217          
    218                  case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
    219                       while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
   \                     ??OSSemDel_6:
   \   00000096   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD006             BEQ.N    ??OSSemDel_11
    220                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   \   0000009E   0x2300             MOVS     R3,#+0
   \   000000A0   0x2201             MOVS     R2,#+1
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x4648             MOV      R0,R9
   \   000000A6   0x.... 0x....      BL       OS_EventTaskRdy
   \   000000AA   0xE7F4             B.N      ??OSSemDel_6
    221                       }
    222          #if OS_EVENT_NAME_EN > 0u
    223                       pevent->OSEventName    = (INT8U *)"?";
   \                     ??OSSemDel_11:
   \   000000AC   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   000000AE   0xF8C9 0x0010      STR      R0,[R9, #+16]
    224          #endif
    225                       pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0xF889 0x0000      STRB     R0,[R9, #+0]
    226                       pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   \   000000B8   0x....             LDR.N    R0,??DataTable2_2
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF8C9 0x0004      STR      R0,[R9, #+4]
    227                       pevent->OSEventCnt     = 0u;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xF8A9 0x0008      STRH     R0,[R9, #+8]
    228                       OSEventFreeList        = pevent;              /* Get next free event control block        */
   \   000000C6   0x....             LDR.N    R0,??DataTable2_2
   \   000000C8   0xF8C0 0x9000      STR      R9,[R0, #+0]
    229                       OS_EXIT_CRITICAL();
   \   000000CC   0x4640             MOV      R0,R8
   \   000000CE   0x.... 0x....      BL       OS_CPU_SR_Restore
    230                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   \   000000D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D4   0x2E01             CMP      R6,#+1
   \   000000D6   0xD101             BNE.N    ??OSSemDel_12
    231                           OS_Sched();                               /* Find highest priority task ready to run  */
   \   000000D8   0x.... 0x....      BL       OS_Sched
    232                       }
    233                       *perr                  = OS_ERR_NONE;
   \                     ??OSSemDel_12:
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x7028             STRB     R0,[R5, #+0]
    234                       pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x0007             MOVS     R7,R0
    235                       break;
   \   000000E4   0xE005             B.N      ??OSSemDel_10
    236          
    237                  default:
    238                       OS_EXIT_CRITICAL();
   \                     ??OSSemDel_7:
   \   000000E6   0x4640             MOV      R0,R8
   \   000000E8   0x.... 0x....      BL       OS_CPU_SR_Restore
    239                       *perr                  = OS_ERR_INVALID_OPT;
   \   000000EC   0x2007             MOVS     R0,#+7
   \   000000EE   0x7028             STRB     R0,[R5, #+0]
    240                       pevent_return          = pevent;
   \   000000F0   0x464F             MOV      R7,R9
    241                       break;
    242              }
    243              return (pevent_return);
   \                     ??OSSemDel_10:
   \   000000F2   0x0038             MOVS     R0,R7
   \                     ??OSSemDel_1:
   \   000000F4   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    244          }
    245          #endif
    246          
    247          /*$PAGE*/
    248          /*
    249          *********************************************************************************************************
    250          *                                           PEND ON SEMAPHORE
    251          *
    252          * Description: This function waits for a semaphore.
    253          *
    254          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    255          *                            semaphore.
    256          *
    257          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    258          *                            wait for the resource up to the amount of time specified by this argument.
    259          *                            If you specify 0, however, your task will wait forever at the specified
    260          *                            semaphore or, until the resource becomes available (or the event occurs).
    261          *
    262          *              perr          is a pointer to where an error message will be deposited.  Possible error
    263          *                            messages are:
    264          *
    265          *                            OS_ERR_NONE         The call was successful and your task owns the resource
    266          *                                                or, the event you are waiting for occurred.
    267          *                            OS_ERR_TIMEOUT      The semaphore was not received within the specified
    268          *                                                'timeout'.
    269          *                            OS_ERR_PEND_ABORT   The wait on the semaphore was aborted.
    270          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
    271          *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
    272          *                                                would lead to a suspension.
    273          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    274          *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
    275          *
    276          * Returns    : none
    277          *********************************************************************************************************
    278          */
    279          /*$PAGE*/

   \                                 In section .text, align 2, keep-with-next
    280          void  OSSemPend (OS_EVENT  *pevent, 
    281                           INT32U     timeout, 
    282                           INT8U     *perr)
    283          {
   \                     OSSemPend:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    284          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    285              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0x2700             MOVS     R7,#+0
    286          #endif
    287          
    288          
    289          
    290          #if OS_ARG_CHK_EN > 0u
    291              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    292                  return;
    293              }
    294              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    295                  *perr = OS_ERR_PEVENT_NULL;
    296                  return;
    297              }
    298          #endif
    299              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD002             BEQ.N    ??OSSemPend_0
    300                  *perr = OS_ERR_EVENT_TYPE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x7030             STRB     R0,[R6, #+0]
    301                  return;
   \   00000014   0xE064             B.N      ??OSSemPend_1
    302              }
    303              if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
   \                     ??OSSemPend_0:
   \   00000016   0x....             LDR.N    R0,??DataTable2_1
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD002             BEQ.N    ??OSSemPend_2
    304                  *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x7030             STRB     R0,[R6, #+0]
    305                  return;
   \   00000022   0xE05D             B.N      ??OSSemPend_1
    306              }
    307              if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
   \                     ??OSSemPend_2:
   \   00000024   0x....             LDR.N    R0,??DataTable2_3
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD002             BEQ.N    ??OSSemPend_3
    308                  *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   \   0000002C   0x200D             MOVS     R0,#+13
   \   0000002E   0x7030             STRB     R0,[R6, #+0]
    309                  return;
   \   00000030   0xE056             B.N      ??OSSemPend_1
    310              }
    311              OS_ENTER_CRITICAL();
   \                     ??OSSemPend_3:
   \   00000032   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000036   0x0007             MOVS     R7,R0
    312              if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
   \   00000038   0x8920             LDRH     R0,[R4, #+8]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD008             BEQ.N    ??OSSemPend_4
    313                  pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   \   0000003E   0x8920             LDRH     R0,[R4, #+8]
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \   00000042   0x8120             STRH     R0,[R4, #+8]
    314                  OS_EXIT_CRITICAL();
   \   00000044   0x0038             MOVS     R0,R7
   \   00000046   0x.... 0x....      BL       OS_CPU_SR_Restore
    315                  *perr = OS_ERR_NONE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7030             STRB     R0,[R6, #+0]
    316                  return;
   \   0000004E   0xE047             B.N      ??OSSemPend_1
    317              }
    318                                                                /* Otherwise, must wait until event occurs       */
    319              OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   \                     ??OSSemPend_4:
   \   00000050   0x....             LDR.N    R0,??DataTable2_4
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   00000058   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000005C   0x....             LDR.N    R1,??DataTable2_4
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0xF881 0x0034      STRB     R0,[R1, #+52]
    320              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   \   00000064   0x....             LDR.N    R0,??DataTable2_4
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0xF880 0x1035      STRB     R1,[R0, #+53]
    321              OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   \   0000006E   0x....             LDR.N    R0,??DataTable2_4
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x6305             STR      R5,[R0, #+48]
    322              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       OS_EventTaskWait
    323              OS_EXIT_CRITICAL();
   \   0000007A   0x0038             MOVS     R0,R7
   \   0000007C   0x.... 0x....      BL       OS_CPU_SR_Restore
    324              OS_Sched();                                       /* Find next highest priority task ready         */
   \   00000080   0x.... 0x....      BL       OS_Sched
    325              OS_ENTER_CRITICAL();
   \   00000084   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000088   0x0007             MOVS     R7,R0
    326              switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   \   0000008A   0x....             LDR.N    R0,??DataTable2_4
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD002             BEQ.N    ??OSSemPend_5
   \   00000096   0x2802             CMP      R0,#+2
   \   00000098   0xD003             BEQ.N    ??OSSemPend_6
   \   0000009A   0xE005             B.N      ??OSSemPend_7
    327                  case OS_STAT_PEND_OK:
    328                       *perr = OS_ERR_NONE;
   \                     ??OSSemPend_5:
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x7030             STRB     R0,[R6, #+0]
    329                       break;
   \   000000A0   0xE009             B.N      ??OSSemPend_8
    330          
    331                  case OS_STAT_PEND_ABORT:
    332                       *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   \                     ??OSSemPend_6:
   \   000000A2   0x200E             MOVS     R0,#+14
   \   000000A4   0x7030             STRB     R0,[R6, #+0]
    333                       break;
   \   000000A6   0xE006             B.N      ??OSSemPend_8
    334          
    335                  case OS_STAT_PEND_TO:
    336                  default:        
    337                       OS_EventTaskRemove(OSTCBCur, pevent);
   \                     ??OSSemPend_7:
   \   000000A8   0x0021             MOVS     R1,R4
   \   000000AA   0x....             LDR.N    R0,??DataTable2_4
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       OS_EventTaskRemove
    338                       *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   \   000000B2   0x200A             MOVS     R0,#+10
   \   000000B4   0x7030             STRB     R0,[R6, #+0]
    339                       break;
    340              }
    341              OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   \                     ??OSSemPend_8:
   \   000000B6   0x....             LDR.N    R0,??DataTable2_4
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0xF880 0x1034      STRB     R1,[R0, #+52]
    342              OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   \   000000C0   0x....             LDR.N    R0,??DataTable2_4
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0xF880 0x1035      STRB     R1,[R0, #+53]
    343              OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   \   000000CA   0x....             LDR.N    R0,??DataTable2_4
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x2100             MOVS     R1,#+0
   \   000000D0   0x61C1             STR      R1,[R0, #+28]
    344          #if (OS_EVENT_MULTI_EN > 0u)
    345              OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   \   000000D2   0x....             LDR.N    R0,??DataTable2_4
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x6201             STR      R1,[R0, #+32]
    346          #endif
    347              OS_EXIT_CRITICAL();
   \   000000DA   0x0038             MOVS     R0,R7
   \   000000DC   0x.... 0x....      BL       OS_CPU_SR_Restore
    348          }
   \                     ??OSSemPend_1:
   \   000000E0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    349          
    350          /*$PAGE*/
    351          /*
    352          *********************************************************************************************************
    353          *                                      ABORT WAITING ON A SEMAPHORE
    354          *
    355          * Description: This function aborts & readies any tasks currently waiting on a semaphore.  This function 
    356          *              should be used to fault-abort the wait on the semaphore, rather than to normally signal
    357          *              the semaphore via OSSemPost().
    358          *
    359          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    360          *                            semaphore.
    361          *
    362          *              opt           determines the type of ABORT performed:
    363          *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
    364          *                                                     semaphore
    365          *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
    366          *                                                     semaphore
    367          *
    368          *              perr          is a pointer to where an error message will be deposited.  Possible error
    369          *                            messages are:
    370          *
    371          *                            OS_ERR_NONE         No tasks were     waiting on the semaphore.
    372          *                            OS_ERR_PEND_ABORT   At least one task waiting on the semaphore was readied
    373          *                                                and informed of the aborted wait; check return value 
    374          *                                                for the number of tasks whose wait on the semaphore 
    375          *                                                was aborted.
    376          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
    377          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    378          *
    379          * Returns    : == 0          if no tasks were waiting on the semaphore, or upon error.
    380          *              >  0          if one or more tasks waiting on the semaphore are now readied and informed.
    381          *********************************************************************************************************
    382          */
    383          
    384          #if OS_SEM_PEND_ABORT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    385          INT8U  OSSemPendAbort (OS_EVENT  *pevent, 
    386                                 INT8U      opt, 
    387                                 INT8U     *perr)
    388          {
   \                     OSSemPendAbort:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    389              INT8U      nbr_tasks;
    390          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    391              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    392          #endif
    393          
    394          
    395          
    396          #if OS_ARG_CHK_EN > 0u
    397              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    398                  return (0u);
    399              }
    400              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    401                  *perr = OS_ERR_PEVENT_NULL;
    402                  return (0u);
    403              }
    404          #endif
    405              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xD003             BEQ.N    ??OSSemPendAbort_0
    406                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    407                  return (0u);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE02D             B.N      ??OSSemPendAbort_1
    408              }
    409              OS_ENTER_CRITICAL();
   \                     ??OSSemPendAbort_0:
   \   0000001C   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000020   0x4680             MOV      R8,R0
    410              if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
   \   00000022   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD021             BEQ.N    ??OSSemPendAbort_2
    411                  nbr_tasks = 0u;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0007             MOVS     R7,R0
    412                  switch (opt) {
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD10B             BNE.N    ??OSSemPendAbort_3
    413                      case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
    414                           while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
   \                     ??OSSemPendAbort_4:
   \   00000032   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD007             BEQ.N    ??OSSemPendAbort_5
    415                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   \   00000038   0x2302             MOVS     R3,#+2
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       OS_EventTaskRdy
    416                               nbr_tasks++;
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
   \   00000046   0xE7F4             B.N      ??OSSemPendAbort_4
    417                           }
    418                           break;
   \                     ??OSSemPendAbort_5:
   \   00000048   0xE006             B.N      ??OSSemPendAbort_6
    419                           
    420                      case OS_PEND_OPT_NONE:
    421                      default:                                  /* No,  ready HPT       waiting on semaphore     */
    422                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   \                     ??OSSemPendAbort_3:
   \   0000004A   0x2302             MOVS     R3,#+2
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       OS_EventTaskRdy
    423                           nbr_tasks++;
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
    424                           break;
    425                  }
    426                  OS_EXIT_CRITICAL();
   \                     ??OSSemPendAbort_6:
   \   00000058   0x4640             MOV      R0,R8
   \   0000005A   0x.... 0x....      BL       OS_CPU_SR_Restore
    427                  OS_Sched();                                   /* Find HPT ready to run                         */
   \   0000005E   0x.... 0x....      BL       OS_Sched
    428                  *perr = OS_ERR_PEND_ABORT;
   \   00000062   0x200E             MOVS     R0,#+14
   \   00000064   0x7030             STRB     R0,[R6, #+0]
    429                  return (nbr_tasks);
   \   00000066   0x0038             MOVS     R0,R7
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xE005             B.N      ??OSSemPendAbort_1
    430              }
    431              OS_EXIT_CRITICAL();
   \                     ??OSSemPendAbort_2:
   \   0000006C   0x4640             MOV      R0,R8
   \   0000006E   0x.... 0x....      BL       OS_CPU_SR_Restore
    432              *perr = OS_ERR_NONE;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x7030             STRB     R0,[R6, #+0]
    433              return (0);                                       /* No tasks waiting on semaphore                 */
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??OSSemPendAbort_1:
   \   00000078   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    434          }
    435          #endif
    436          
    437          /*$PAGE*/
    438          /*
    439          *********************************************************************************************************
    440          *                                         POST TO A SEMAPHORE
    441          *
    442          * Description: This function signals a semaphore
    443          *
    444          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    445          *                            semaphore.
    446          *
    447          * Returns    : OS_ERR_NONE         The call was successful and the semaphore was signaled.
    448          *              OS_ERR_SEM_OVF      If the semaphore count exceeded its limit.  In other words, you have
    449          *                                  signalled the semaphore more often than you waited on it with either
    450          *                                  OSSemAccept() or OSSemPend().
    451          *              OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore
    452          *              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    453          *********************************************************************************************************
    454          */
    455          

   \                                 In section .text, align 2, keep-with-next
    456          INT8U  OSSemPost (OS_EVENT *pevent)
    457          {
   \                     OSSemPost:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    458          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    459              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2500             MOVS     R5,#+0
    460          #endif
    461          
    462          
    463          
    464          #if OS_ARG_CHK_EN > 0u
    465              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    466                  return (OS_ERR_PEVENT_NULL);
    467              }
    468          #endif
    469              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2803             CMP      R0,#+3
   \   0000000A   0xD001             BEQ.N    ??OSSemPost_0
    470                  return (OS_ERR_EVENT_TYPE);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE024             B.N      ??OSSemPost_1
    471              }
    472              OS_ENTER_CRITICAL();
   \                     ??OSSemPost_0:
   \   00000010   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000014   0x0005             MOVS     R5,R0
    473              if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
   \   00000016   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD00D             BEQ.N    ??OSSemPost_2
    474                                                                /* Ready HPT waiting on event                    */
    475                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       OS_EventTaskRdy
   \   00000028   0x0006             MOVS     R6,R0
    476                  OS_EXIT_CRITICAL();
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       OS_CPU_SR_Restore
    477                  OS_Sched();                                   /* Find HPT ready to run                         */
   \   00000030   0x.... 0x....      BL       OS_Sched
    478                  return (OS_ERR_NONE);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE010             B.N      ??OSSemPost_1
    479              }
    480              if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   \                     ??OSSemPost_2:
   \   00000038   0x8920             LDRH     R0,[R4, #+8]
   \   0000003A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD007             BEQ.N    ??OSSemPost_3
    481                  pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   \   00000042   0x8920             LDRH     R0,[R4, #+8]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x8120             STRH     R0,[R4, #+8]
    482                  OS_EXIT_CRITICAL();
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Restore
    483                  return (OS_ERR_NONE);
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xE003             B.N      ??OSSemPost_1
    484              }
    485              OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
   \                     ??OSSemPost_3:
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x.... 0x....      BL       OS_CPU_SR_Restore
    486              return (OS_ERR_SEM_OVF);
   \   00000058   0x2032             MOVS     R0,#+50
   \                     ??OSSemPost_1:
   \   0000005A   0xBD70             POP      {R4-R6,PC}       ;; return
    487          }
    488          
    489          /*$PAGE*/
    490          /*
    491          *********************************************************************************************************
    492          *                                          QUERY A SEMAPHORE
    493          *
    494          * Description: This function obtains information about a semaphore
    495          *
    496          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    497          *                            semaphore
    498          *
    499          *              p_sem_data    is a pointer to a structure that will contain information about the
    500          *                            semaphore.
    501          *
    502          * Returns    : OS_ERR_NONE         The call was successful and the message was sent
    503          *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non semaphore.
    504          *              OS_ERR_PEVENT_NULL  If 'pevent'     is a NULL pointer.
    505          *              OS_ERR_PDATA_NULL   If 'p_sem_data' is a NULL pointer
    506          *********************************************************************************************************
    507          */
    508          
    509          #if OS_SEM_QUERY_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    510          INT8U  OSSemQuery (OS_EVENT     *pevent, 
    511                             OS_SEM_DATA  *p_sem_data)
    512          {
   \                     OSSemQuery:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    513          #if OS_LOWEST_PRIO <= 63u
    514              INT8U     *psrc;
    515              INT8U     *pdest;
    516          #else
    517              INT16U    *psrc;
    518              INT16U    *pdest;
    519          #endif
    520              INT8U      i;
    521          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    522              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0xF05F 0x0900      MOVS     R9,#+0
    523          #endif
    524          
    525          
    526          
    527          #if OS_ARG_CHK_EN > 0u
    528              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    529                  return (OS_ERR_PEVENT_NULL);
    530              }
    531              if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    532                  return (OS_ERR_PDATA_NULL);
    533              }
    534          #endif
    535              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD001             BEQ.N    ??OSSemQuery_0
    536                  return (OS_ERR_EVENT_TYPE);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE01D             B.N      ??OSSemQuery_1
    537              }
    538              OS_ENTER_CRITICAL();
   \                     ??OSSemQuery_0:
   \   00000016   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001A   0x4681             MOV      R9,R0
    539              p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   \   0000001C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001E   0x71A8             STRB     R0,[R5, #+6]
    540              psrc                   = &pevent->OSEventTbl[0];
   \   00000020   0xF204 0x000B      ADDW     R0,R4,#+11
   \   00000024   0x0006             MOVS     R6,R0
    541              pdest                  = &p_sem_data->OSEventTbl[0];
   \   00000026   0x1CA8             ADDS     R0,R5,#+2
   \   00000028   0x0007             MOVS     R7,R0
    542              for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x4680             MOV      R8,R0
   \                     ??OSSemQuery_2:
   \   0000002E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000032   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000036   0xD206             BCS.N    ??OSSemQuery_3
    543                  *pdest++ = *psrc++;
   \   00000038   0x7830             LDRB     R0,[R6, #+0]
   \   0000003A   0x7038             STRB     R0,[R7, #+0]
   \   0000003C   0x1C76             ADDS     R6,R6,#+1
   \   0000003E   0x1C7F             ADDS     R7,R7,#+1
    544              }
   \   00000040   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000044   0xE7F3             B.N      ??OSSemQuery_2
    545              p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   \                     ??OSSemQuery_3:
   \   00000046   0x8920             LDRH     R0,[R4, #+8]
   \   00000048   0x8028             STRH     R0,[R5, #+0]
    546              OS_EXIT_CRITICAL();
   \   0000004A   0x4648             MOV      R0,R9
   \   0000004C   0x.... 0x....      BL       OS_CPU_SR_Restore
    547              return (OS_ERR_NONE);
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??OSSemQuery_1:
   \   00000052   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    548          }
    549          #endif                                                     /* OS_SEM_QUERY_EN                          */
    550          
    551          /*$PAGE*/
    552          /*
    553          *********************************************************************************************************
    554          *                                              SET SEMAPHORE
    555          *
    556          * Description: This function sets the semaphore count to the value specified as an argument.  Typically,
    557          *              this value would be 0.
    558          *
    559          *              You would typically use this function when a semaphore is used as a signaling mechanism
    560          *              and, you want to reset the count value.
    561          *
    562          * Arguments  : pevent     is a pointer to the event control block
    563          *
    564          *              cnt        is the new value for the semaphore count.  You would pass 0 to reset the
    565          *                         semaphore count.
    566          *
    567          *              perr       is a pointer to an error code returned by the function as follows:
    568          *
    569          *                            OS_ERR_NONE          The call was successful and the semaphore value was set.
    570          *                            OS_ERR_EVENT_TYPE    If you didn't pass a pointer to a semaphore.
    571          *                            OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer.
    572          *                            OS_ERR_TASK_WAITING  If tasks are waiting on the semaphore.
    573          *********************************************************************************************************
    574          */
    575          
    576          #if OS_SEM_SET_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    577          void  OSSemSet (OS_EVENT  *pevent, 
    578                          INT16U     cnt, 
    579                          INT8U     *perr)
    580          {
   \                     OSSemSet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    581          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    582              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0x2700             MOVS     R7,#+0
    583          #endif
    584          
    585          
    586          
    587          #if OS_ARG_CHK_EN > 0u
    588              if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    589                  return;
    590              }
    591              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    592                  *perr = OS_ERR_PEVENT_NULL;
    593                  return;
    594              }
    595          #endif
    596              if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD002             BEQ.N    ??OSSemSet_0
    597                  *perr = OS_ERR_EVENT_TYPE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x7030             STRB     R0,[R6, #+0]
    598                  return;
   \   00000014   0xE013             B.N      ??OSSemSet_1
    599              }
    600              OS_ENTER_CRITICAL();
   \                     ??OSSemSet_0:
   \   00000016   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001A   0x0007             MOVS     R7,R0
    601              *perr = OS_ERR_NONE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x7030             STRB     R0,[R6, #+0]
    602              if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
   \   00000020   0x8920             LDRH     R0,[R4, #+8]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??OSSemSet_2
    603                  pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   \   00000026   0x8125             STRH     R5,[R4, #+8]
   \   00000028   0xE006             B.N      ??OSSemSet_3
    604              } else {                                          /* No                                            */
    605                  if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
   \                     ??OSSemSet_2:
   \   0000002A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD101             BNE.N    ??OSSemSet_4
    606                      pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   \   00000030   0x8125             STRH     R5,[R4, #+8]
   \   00000032   0xE001             B.N      ??OSSemSet_3
    607                  } else {
    608                      *perr              = OS_ERR_TASK_WAITING;
   \                     ??OSSemSet_4:
   \   00000034   0x2049             MOVS     R0,#+73
   \   00000036   0x7030             STRB     R0,[R6, #+0]
    609                  }
    610              }
    611              OS_EXIT_CRITICAL();
   \                     ??OSSemSet_3:
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       OS_CPU_SR_Restore
    612          }
   \                     ??OSSemSet_1:
   \   0000003E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x3F 0x00          DC8      "\?",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     OSEventFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     OSLockNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .rodata, align 2
   \   00000000   0x3F 0x00          DC8 "?"
    613          #endif
    614          
    615          #endif                                                /* OS_SEM_EN                                     */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   OSSemAccept
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
      16   OSSemCreate
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_EventWaitListInit
      32   OSSemDel
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRdy
        32   -> OS_Sched
      24   OSSemPend
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRemove
        24   -> OS_EventTaskWait
        24   -> OS_Sched
      24   OSSemPendAbort
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      16   OSSemPost
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_EventTaskRdy
        16   -> OS_Sched
      32   OSSemQuery
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
      24   OSSemSet
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "?">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      50  OSSemAccept
      82  OSSemCreate
     248  OSSemDel
     226  OSSemPend
     124  OSSemPendAbort
      92  OSSemPost
      86  OSSemQuery
      64  OSSemSet

 
   2 bytes in section .rodata
 992 bytes in section .text
 
 992 bytes of CODE  memory
   2 bytes of CONST memory

Errors: none
Warnings: none
