###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      05/Apr/2017  15:06:10 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.3\USB\sd_spi_mode.c               #
#    Command line =  D:\wangfan2\桌面\RTU_1.3\USB\sd_spi_mode.c -lCN          #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.3\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.3\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.3\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.3\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.3\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.3\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.3\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\List\sd_spi_m #
#                    ode.lst                                                  #
#    Object file  =  D:\wangfan2\桌面\RTU_1.3\project\iar\Debug\Obj\sd_spi_mo #
#                    de.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.3\USB\sd_spi_mode.c
      1          /*************************************************************************
      2          *
      3          *    Used with ICCARM and AARM.
      4          *
      5          *    (c) Copyright IAR Systems 2008
      6          *
      7          *    File name   : sd_spi_mode.c
      8          *    Description : SD/MMC driver
      9          *
     10          *    History :
     11          *    1. Date        : April 10, 2008
     12          *       Author      : Stanimir Bonev
     13          *       Description : Create
     14          *    $Revision: 28532 $
     15          **************************************************************************/
     16          #include "sd_spi_mode.h"
     17          

   \                                 In section .bss, align 4
     18          DiskCtrlBlk_t _SdDskCtrlBlk;
   \                     _SdDskCtrlBlk:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     19          Int8U  _SdSdCsd[16];
   \                     _SdSdCsd:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     20          Boolean       _bHC;    // 大容量标志 > 2GB 
   \                     _bHC:
   \   00000000                      DS8 4
     21          
     22          extern volatile uint32_t CardRCA;
     23          
     24          extern volatile en_Mci_CardType MCI_CardType;
     25          

   \                                 In section .bss, align 4
     26          BSP_OS_SEM BSP_MMC_RLock;
   \                     BSP_MMC_RLock:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          BSP_OS_SEM BSP_MMC_WLock;
   \                     BSP_MMC_WLock:
   \   00000000                      DS8 4
     28          
     29          /*************************************************************************
     30          * Function Name: SdDiskInit
     31          * Parameters:  none
     32          *
     33          * Return: none
     34          *
     35          * Description: Init MMC/SD disk
     36          *
     37          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          void SdDiskInit (void)
     39          {
   \                     SdDiskInit:
   \   00000000   0xB580             PUSH     {R7,LR}
     40            switch (MCI_disk_initialize()) //xf
   \   00000002   0x.... 0x....      BL       MCI_disk_initialize
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD10D             BNE.N    ??SdDiskInit_0
     41            {
     42            case 0:// 正常
     43              _SdDskCtrlBlk.DiskStatus = DiskCommandPass;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7201             STRB     R1,[R0, #+8]
     44              g_File.bSDState = 0; 
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF880 0x1257      STRB     R1,[R0, #+599]
     45              g_LedMod.Sate = 2;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000020   0x2102             MOVS     R1,#+2
   \   00000022   0x7041             STRB     R1,[R0, #+1]
     46              break;
   \   00000024   0xE00C             B.N      ??SdDiskInit_1
     47            default:
     48              _SdDskCtrlBlk.DiskStatus = DiskNotPresent;
   \                     ??SdDiskInit_0:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable5
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x7201             STRB     R1,[R0, #+8]
     49              g_File.bSDState = 1;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0xF880 0x1257      STRB     R1,[R0, #+599]
     50              DebugMsg("error: MMC Not Present !!!\r\n");
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   0000003C   0x.... 0x....      BL       DebugMsg
     51              break;
     52            }
     53          }
   \                     ??SdDiskInit_1:
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
     54          
     55          /**
     56          SD MMC 初始化 
     57          
     58          返回值：
     59          0 -> 成功
     60          非0 -> 失败
     61          **/

   \                                 In section .text, align 2, keep-with-next
     62          int MCI_disk_initialize(void)
     63          {
   \                     MCI_disk_initialize:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     64            int err = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     65            int i;
     66            uint8_t capity,memory_size;
     67            char size[3]={0,0,0};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     68            st_Mci_CardId cid;
     69            
     70            _SdDskCtrlBlk.DiskType = DiskMMC;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable5
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7241             STRB     R1,[R0, #+9]
     71            
     72          #if MCI_DMA_ENABLED
     73            /* on DMA channel 0, source is memory, destination is MCI FIFO. */
     74            /* On DMA channel 1, source is MCI FIFO, destination is memory. */
     75            GPDMA_Init();
   \   00000014   0x.... 0x....      BL       GPDMA_Init
     76          #endif
     77            
     78            if ( MCI_Init(LOW_LVL) != MCI_FUNC_OK )
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       MCI_Init
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD000             BEQ.N    ??MCI_disk_initialize_0
     79            {
     80              err++; /* fatal error */
   \   00000022   0x1C64             ADDS     R4,R4,#+1
     81            }
     82            
     83            if ( err || MCI_GetCID(&cid) != MCI_FUNC_OK )
   \                     ??MCI_disk_initialize_0:
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD104             BNE.N    ??MCI_disk_initialize_1
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x.... 0x....      BL       MCI_GetCID
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??MCI_disk_initialize_2
     84            {
     85              err++; /* fatal error */
   \                     ??MCI_disk_initialize_1:
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \   00000034   0xE044             B.N      ??MCI_disk_initialize_3
     86            }
     87            else
     88            {
     89              /** PNM_L
     90              4G --> "M04G"
     91              8G --> "M08G"
     92              **/
     93              
     94              size[0] = (cid.PNM_L >> 8) & 0xff;
   \                     ??MCI_disk_initialize_2:
   \   00000036   0x9803             LDR      R0,[SP, #+12]
   \   00000038   0x0A00             LSRS     R0,R0,#+8
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
     95              size[1] = cid.PNM_L & 0xff;
   \   0000003E   0x9803             LDR      R0,[SP, #+12]
   \   00000040   0xF88D 0x0001      STRB     R0,[SP, #+1]
     96              
     97              capity = (size[0]-'0')*10+( size[1] - '0');
   \   00000044   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000048   0x210A             MOVS     R1,#+10
   \   0000004A   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \   0000004E   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000052   0x3810             SUBS     R0,R0,#+16
   \   00000054   0x0006             MOVS     R6,R0
     98              
     99              switch(capity)
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x2804             CMP      R0,#+4
   \   0000005C   0xD006             BEQ.N    ??MCI_disk_initialize_4
   \   0000005E   0x2808             CMP      R0,#+8
   \   00000060   0xD00B             BEQ.N    ??MCI_disk_initialize_5
   \   00000062   0x2810             CMP      R0,#+16
   \   00000064   0xD010             BEQ.N    ??MCI_disk_initialize_6
   \   00000066   0x2820             CMP      R0,#+32
   \   00000068   0xD015             BEQ.N    ??MCI_disk_initialize_7
   \   0000006A   0xE01B             B.N      ??MCI_disk_initialize_8
    100              {
    101              case 4:
    102                memory_size = 1;
   \                     ??MCI_disk_initialize_4:
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x0007             MOVS     R7,R0
    103                _SdDskCtrlBlk.BlockNumb = 7733248;
   \   00000070   0x....             LDR.N    R0,??DataTable5
   \   00000072   0xF45F 0x01EC      MOVS     R1,#+7733248
   \   00000076   0x6001             STR      R1,[R0, #+0]
    104                break;
   \   00000078   0xE019             B.N      ??MCI_disk_initialize_9
    105              case 8:
    106                memory_size = 2;
   \                     ??MCI_disk_initialize_5:
   \   0000007A   0x2002             MOVS     R0,#+2
   \   0000007C   0x0007             MOVS     R7,R0
    107                _SdDskCtrlBlk.BlockNumb = 7733248*2;
   \   0000007E   0x....             LDR.N    R0,??DataTable5
   \   00000080   0xF45F 0x016C      MOVS     R1,#+15466496
   \   00000084   0x6001             STR      R1,[R0, #+0]
    108                break;
   \   00000086   0xE012             B.N      ??MCI_disk_initialize_9
    109              case 16:
    110                memory_size = 3;
   \                     ??MCI_disk_initialize_6:
   \   00000088   0x2003             MOVS     R0,#+3
   \   0000008A   0x0007             MOVS     R7,R0
    111                _SdDskCtrlBlk.BlockNumb = 7733248*4;
   \   0000008C   0x....             LDR.N    R0,??DataTable5
   \   0000008E   0xF05F 0x71EC      MOVS     R1,#+30932992
   \   00000092   0x6001             STR      R1,[R0, #+0]
    112                break;
   \   00000094   0xE00B             B.N      ??MCI_disk_initialize_9
    113              case 32:
    114                memory_size = 4;
   \                     ??MCI_disk_initialize_7:
   \   00000096   0x2004             MOVS     R0,#+4
   \   00000098   0x0007             MOVS     R7,R0
    115                _SdDskCtrlBlk.BlockNumb = 7733248*8;
   \   0000009A   0x....             LDR.N    R0,??DataTable5
   \   0000009C   0xF05F 0x716C      MOVS     R1,#+61865984
   \   000000A0   0x6001             STR      R1,[R0, #+0]
    116                break;
   \   000000A2   0xE004             B.N      ??MCI_disk_initialize_9
    117              default://ERROR
    118                memory_size = 0;
   \                     ??MCI_disk_initialize_8:
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x0007             MOVS     R7,R0
    119                _SdDskCtrlBlk.BlockNumb = 0;
   \   000000A8   0x....             LDR.N    R0,??DataTable5
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x6001             STR      R1,[R0, #+0]
    120                break;
    121              }
    122              g_Byte128[51] = 0x21;
   \                     ??MCI_disk_initialize_9:
   \   000000AE   0x....             LDR.N    R0,??DataTable5_4
   \   000000B0   0x2121             MOVS     R1,#+33
   \   000000B2   0xF880 0x1033      STRB     R1,[R0, #+51]
    123              g_Byte128[58] = memory_size;
   \   000000B6   0x....             LDR.N    R0,??DataTable5_4
   \   000000B8   0xF880 0x703A      STRB     R7,[R0, #+58]
    124              WriteFlash();
   \   000000BC   0x.... 0x....      BL       WriteFlash
    125             // DebugMsg("Capity of the iNAND is :%d G...\r\n", capity);
    126            }
    127            
    128            /* RCA ---------------------------------------------------------------------*/
    129            
    130            if ( err || MCI_SetCardAddress() != MCI_FUNC_OK )
   \                     ??MCI_disk_initialize_3:
   \   000000C0   0x2C00             CMP      R4,#+0
   \   000000C2   0xD103             BNE.N    ??MCI_disk_initialize_10
   \   000000C4   0x.... 0x....      BL       MCI_SetCardAddress
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD000             BEQ.N    ??MCI_disk_initialize_11
    131            {
    132              err++; /* fatal error */
   \                     ??MCI_disk_initialize_10:
   \   000000CC   0x1C64             ADDS     R4,R4,#+1
    133            }
    134            
    135            /* CSD ---------------------------------------------------------------------*/
    136            
    137            if(MCI_GetCSD((uint32_t *)_SdSdCsd) != MCI_FUNC_OK)
   \                     ??MCI_disk_initialize_11:
   \   000000CE   0x....             LDR.N    R0,??DataTable5_5
   \   000000D0   0x.... 0x....      BL       MCI_GetCSD
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD001             BEQ.N    ??MCI_disk_initialize_12
    138            {
    139              return(_SdNoResponse);
   \   000000D8   0x2002             MOVS     R0,#+2
   \   000000DA   0xE038             B.N      ??MCI_disk_initialize_13
    140            }
    141            
    142            /** Block Size **/
    143            _SdDskCtrlBlk.BlockSize = 1<<_CSD_GET_READ_BL_LEN();
   \                     ??MCI_disk_initialize_12:
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x....             LDR.N    R1,??DataTable5_5
   \   000000E0   0x7989             LDRB     R1,[R1, #+6]
   \   000000E2   0xF011 0x010F      ANDS     R1,R1,#0xF
   \   000000E6   0x4088             LSLS     R0,R0,R1
   \   000000E8   0x....             LDR.N    R1,??DataTable5
   \   000000EA   0x6048             STR      R0,[R1, #+4]
    144            
    145            /* Select Card -------------------------------------------------------------*/
    146            
    147            MCI_Cmd_SelectCard();
   \   000000EC   0x.... 0x....      BL       MCI_Cmd_SelectCard
    148            
    149            MCI_SetBusWidth(SD_4_BIT);
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       MCI_SetBusWidth
    150            
    151            while(MCI_CheckStatus(CARD_STATE_TRAN) != MCI_FUNC_OK)
   \                     ??MCI_disk_initialize_14:
   \   000000F6   0x2004             MOVS     R0,#+4
   \   000000F8   0x.... 0x....      BL       MCI_CheckStatus
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD006             BEQ.N    ??MCI_disk_initialize_15
    152            {
    153              for( i = 0;i < 0x100000; i++);
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x0005             MOVS     R5,R0
   \                     ??MCI_disk_initialize_16:
   \   00000104   0xF5B5 0x1F80      CMP      R5,#+1048576
   \   00000108   0xDAF5             BGE.N    ??MCI_disk_initialize_14
   \   0000010A   0x1C6D             ADDS     R5,R5,#+1
   \   0000010C   0xE7FA             B.N      ??MCI_disk_initialize_16
    154            }
    155            
    156            /* Operation Mode ----------------------------------------------------------*/
    157            
    158            MCI_SetOutputMode(0);/* Clear Open Drain output control for mmc */
   \                     ??MCI_disk_initialize_15:
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       MCI_SetOutputMode
    159            
    160            /* Clock -------------------------------------------------------------------*/
    161            if ( !err )
   \   00000114   0x2C00             CMP      R4,#+0
   \   00000116   0xD102             BNE.N    ??MCI_disk_initialize_17
    162            {
    163              MCI_Set_MCIClock(MCI_NORMAL_RATE );
   \   00000118   0x....             LDR.N    R0,??DataTable5_6  ;; 0xe4e1c0
   \   0000011A   0x.... 0x....      BL       MCI_Set_MCIClock
    164            }
    165            
    166            if( !err )
   \                     ??MCI_disk_initialize_17:
   \   0000011E   0x2C00             CMP      R4,#+0
   \   00000120   0xD10A             BNE.N    ??MCI_disk_initialize_18
    167            {
    168              //初始化成功
    169              _SdDskCtrlBlk.DiskStatus = DiskCommandPass;
   \   00000122   0x....             LDR.N    R0,??DataTable5
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x7201             STRB     R1,[R0, #+8]
    170              g_File.bSDState = 0; 
   \   00000128   0x....             LDR.N    R0,??DataTable5_1
   \   0000012A   0x2100             MOVS     R1,#+0
   \   0000012C   0xF880 0x1257      STRB     R1,[R0, #+599]
    171              g_LedMod.Sate = 2;
   \   00000130   0x....             LDR.N    R0,??DataTable5_2
   \   00000132   0x2102             MOVS     R1,#+2
   \   00000134   0x7041             STRB     R1,[R0, #+1]
   \   00000136   0xE009             B.N      ??MCI_disk_initialize_19
    172            }
    173            else
    174            {
    175              //初始化失败
    176              _SdDskCtrlBlk.DiskStatus = DiskNotReady;
   \                     ??MCI_disk_initialize_18:
   \   00000138   0x....             LDR.N    R0,??DataTable5
   \   0000013A   0x2101             MOVS     R1,#+1
   \   0000013C   0x7201             STRB     R1,[R0, #+8]
    177              g_File.bSDState = 1;
   \   0000013E   0x....             LDR.N    R0,??DataTable5_1
   \   00000140   0x2101             MOVS     R1,#+1
   \   00000142   0xF880 0x1257      STRB     R1,[R0, #+599]
    178              DebugMsg("error: MMC Init Failed !!!\r\n");
   \   00000146   0x....             LDR.N    R0,??DataTable5_7
   \   00000148   0x.... 0x....      BL       DebugMsg
    179            }
    180            
    181            return err;
   \                     ??MCI_disk_initialize_19:
   \   0000014C   0x0020             MOVS     R0,R4
   \                     ??MCI_disk_initialize_13:
   \   0000014E   0xB009             ADD      SP,SP,#+36
   \   00000150   0xBDF0             POP      {R4-R7,PC}       ;; return
    182          }
    183          
    184          /**
    185          读取块数据放入pBuf指向的缓冲中
    186          
    187          返回值：
    188          0 -> 成功
    189          1 -> 失败
    190          **/
    191          extern uint32_t dmaRdCh_TermianalCnt;

   \                                 In section .text, align 2, keep-with-next
    192          Int8U MMC_ReadBlock_S(pInt8U pBuf,Int32U BlockNum, Int32U BlockCnt)
    193          {
   \                     MMC_ReadBlock_S:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    194            uint32_t cnt_next;
    195            uint32_t i,j=0;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
    196            CPU_BOOLEAN err;
    197            
    198            err = BSP_OS_SemWait(&BSP_MMC_RLock,0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R0,??DataTable5_8
   \   00000012   0x.... 0x....      BL       BSP_OS_SemWait
   \   00000016   0x4682             MOV      R10,R0
    199            
    200            if( err != DEF_OK)
   \   00000018   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000001C   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000020   0xD001             BEQ.N    ??MMC_ReadBlock_S_0
    201              return 1;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE046             B.N      ??MMC_ReadBlock_S_1
    202            
    203            while (LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(MCI_DMA_READ_CHANNEL)));
   \                     ??MMC_ReadBlock_S_0:
   \   00000026   0x....             LDR.N    R0,??DataTable5_9  ;; 0x2008001c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x0780             LSLS     R0,R0,#+30
   \   0000002C   0xD4FB             BMI.N    ??MMC_ReadBlock_S_0
    204            
    205            cnt_next = dmaRdCh_TermianalCnt + 1;
   \   0000002E   0x....             LDR.N    R0,??DataTable5_10
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x0007             MOVS     R7,R0
    206            
    207            while (MCI_CheckStatus(CARD_STATE_TRAN) != MCI_FUNC_OK)
   \                     ??MMC_ReadBlock_S_2:
   \   00000036   0x2004             MOVS     R0,#+4
   \   00000038   0x.... 0x....      BL       MCI_CheckStatus
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD011             BEQ.N    ??MMC_ReadBlock_S_3
    208            {
    209              for( i = 0;i< 0x10000; i++);
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x4680             MOV      R8,R0
   \                     ??MMC_ReadBlock_S_4:
   \   00000044   0xF5B8 0x3F80      CMP      R8,#+65536
   \   00000048   0xD202             BCS.N    ??MMC_ReadBlock_S_5
   \   0000004A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000004E   0xE7F9             B.N      ??MMC_ReadBlock_S_4
    210              j++;
   \                     ??MMC_ReadBlock_S_5:
   \   00000050   0xF119 0x0901      ADDS     R9,R9,#+1
    211              if( j == 10)
   \   00000054   0xF1B9 0x0F0A      CMP      R9,#+10
   \   00000058   0xD1ED             BNE.N    ??MMC_ReadBlock_S_2
    212              {
    213                BSP_OS_SemPost(&BSP_MMC_RLock);
   \   0000005A   0x....             LDR.N    R0,??DataTable5_8
   \   0000005C   0x.... 0x....      BL       BSP_OS_SemPost
    214                return 1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0xE027             B.N      ??MMC_ReadBlock_S_1
    215              }
    216            }
    217            
    218            i = MCI_ReadBlock(pBuf,BlockNum,BlockCnt);
   \                     ??MMC_ReadBlock_S_3:
   \   00000064   0x0032             MOVS     R2,R6
   \   00000066   0x0029             MOVS     R1,R5
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x.... 0x....      BL       MCI_ReadBlock
   \   0000006E   0x4680             MOV      R8,R0
    219            
    220            if( i != MCI_FUNC_OK)
   \   00000070   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000074   0xD004             BEQ.N    ??MMC_ReadBlock_S_6
    221            {
    222              BSP_OS_SemPost(&BSP_MMC_RLock);
   \   00000076   0x....             LDR.N    R0,??DataTable5_8
   \   00000078   0x.... 0x....      BL       BSP_OS_SemPost
    223              return 1;
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xE019             B.N      ??MMC_ReadBlock_S_1
    224            }
    225            
    226            j = 0;
   \                     ??MMC_ReadBlock_S_6:
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x4681             MOV      R9,R0
    227            
    228            while( cnt_next != dmaRdCh_TermianalCnt)
   \                     ??MMC_ReadBlock_S_7:
   \   00000084   0x....             LDR.N    R0,??DataTable5_10
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x4287             CMP      R7,R0
   \   0000008A   0xD00F             BEQ.N    ??MMC_ReadBlock_S_8
    229            {
    230              
    231             j++;
   \   0000008C   0xF119 0x0901      ADDS     R9,R9,#+1
    232             
    233             if(  LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(MCI_DMA_READ_CHANNEL)) == 0)
   \   00000090   0x....             LDR.N    R0,??DataTable5_9  ;; 0x2008001c
   \   00000092   0x6800             LDR      R0,[R0, #+0]
    234             {
    235               BSP_OS_SemPost(&BSP_MMC_RLock);
    236               return 1;
    237             }
    238             
    239             if( j > 1200000)
   \   00000094   0x....             LDR.N    R1,??DataTable5_11  ;; 0x124f81
   \   00000096   0x4589             CMP      R9,R1
   \   00000098   0xD3F4             BCC.N    ??MMC_ReadBlock_S_7
    240             {
    241               GPDMA_ChannelCmd(MCI_DMA_READ_CHANNEL, DISABLE);
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x.... 0x....      BL       GPDMA_ChannelCmd
    242               BSP_OS_SemPost(&BSP_MMC_RLock);
   \   000000A2   0x....             LDR.N    R0,??DataTable5_8
   \   000000A4   0x.... 0x....      BL       BSP_OS_SemPost
    243               return 1;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE003             B.N      ??MMC_ReadBlock_S_1
    244             }
    245             
    246            }
    247            
    248            BSP_OS_SemPost(&BSP_MMC_RLock);
   \                     ??MMC_ReadBlock_S_8:
   \   000000AC   0x....             LDR.N    R0,??DataTable5_8
   \   000000AE   0x.... 0x....      BL       BSP_OS_SemPost
    249            
    250            return 0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \                     ??MMC_ReadBlock_S_1:
   \   000000B4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    251          }
    252          
    253          /**
    254          将 pBuf指向的缓冲数据写入到 (BlockNum ,BlockNum + Blockcnt -1) 块中
    255          
    256          返回值：
    257          0 -> 成功
    258          1 -> 失败
    259          **/
    260          
    261          extern uint32_t dmaWrCh_TermianalCnt;
    262          

   \                                 In section .text, align 2, keep-with-next
    263          Int8U MMC_WriteBlock_S(pInt8U pBuf,Int32U BlockNum, Int32U BlockCnt)
    264          {
   \                     MMC_WriteBlock_S:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    265            uint32_t cnt_next;
    266            uint32_t i,j;
    267            CPU_BOOLEAN err;
    268            
    269            err = BSP_OS_SemWait(&BSP_MMC_WLock,100);
   \   0000000A   0x2164             MOVS     R1,#+100
   \   0000000C   0x....             LDR.N    R0,??DataTable5_12
   \   0000000E   0x.... 0x....      BL       BSP_OS_SemWait
   \   00000012   0x4682             MOV      R10,R0
    270            
    271            if( err != DEF_OK)
   \   00000014   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000018   0xF1BA 0x0F01      CMP      R10,#+1
   \   0000001C   0xD001             BEQ.N    ??MMC_WriteBlock_S_0
    272              return 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE046             B.N      ??MMC_WriteBlock_S_1
    273            
    274            while (LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(MCI_DMA_WRITE_CHANNEL)));
   \                     ??MMC_WriteBlock_S_0:
   \   00000022   0x....             LDR.N    R0,??DataTable5_9  ;; 0x2008001c
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x07C0             LSLS     R0,R0,#+31
   \   00000028   0xD4FB             BMI.N    ??MMC_WriteBlock_S_0
    275            
    276            cnt_next = dmaWrCh_TermianalCnt + 1;
   \   0000002A   0x....             LDR.N    R0,??DataTable5_13
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x0007             MOVS     R7,R0
    277            
    278            while (MCI_CheckStatus(CARD_STATE_TRAN) != MCI_FUNC_OK)
   \                     ??MMC_WriteBlock_S_2:
   \   00000032   0x2004             MOVS     R0,#+4
   \   00000034   0x.... 0x....      BL       MCI_CheckStatus
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD011             BEQ.N    ??MMC_WriteBlock_S_3
    279            {
    280              for( i = 0;i< 0x10000; i++);
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x4680             MOV      R8,R0
   \                     ??MMC_WriteBlock_S_4:
   \   00000040   0xF5B8 0x3F80      CMP      R8,#+65536
   \   00000044   0xD202             BCS.N    ??MMC_WriteBlock_S_5
   \   00000046   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000004A   0xE7F9             B.N      ??MMC_WriteBlock_S_4
    281              j++;
   \                     ??MMC_WriteBlock_S_5:
   \   0000004C   0xF119 0x0901      ADDS     R9,R9,#+1
    282              if( j == 10)
   \   00000050   0xF1B9 0x0F0A      CMP      R9,#+10
   \   00000054   0xD1ED             BNE.N    ??MMC_WriteBlock_S_2
    283              {
    284                BSP_OS_SemPost(&BSP_MMC_WLock);
   \   00000056   0x....             LDR.N    R0,??DataTable5_12
   \   00000058   0x.... 0x....      BL       BSP_OS_SemPost
    285                return 1;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE027             B.N      ??MMC_WriteBlock_S_1
    286              }
    287            }
    288            
    289            i = MCI_WriteBlock(pBuf,BlockNum,BlockCnt);
   \                     ??MMC_WriteBlock_S_3:
   \   00000060   0x0032             MOVS     R2,R6
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       MCI_WriteBlock
   \   0000006A   0x4680             MOV      R8,R0
    290            
    291            if( i != MCI_FUNC_OK)
   \   0000006C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000070   0xD004             BEQ.N    ??MMC_WriteBlock_S_6
    292            {
    293              BSP_OS_SemPost(&BSP_MMC_WLock);
   \   00000072   0x....             LDR.N    R0,??DataTable5_12
   \   00000074   0x.... 0x....      BL       BSP_OS_SemPost
    294              return 1;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xE019             B.N      ??MMC_WriteBlock_S_1
    295            }
    296            
    297            j = 0;
   \                     ??MMC_WriteBlock_S_6:
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x4681             MOV      R9,R0
    298            while( cnt_next != dmaWrCh_TermianalCnt)
   \                     ??MMC_WriteBlock_S_7:
   \   00000080   0x....             LDR.N    R0,??DataTable5_13
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x4287             CMP      R7,R0
   \   00000086   0xD00F             BEQ.N    ??MMC_WriteBlock_S_8
    299            {
    300              j++;
   \   00000088   0xF119 0x0901      ADDS     R9,R9,#+1
    301              
    302             if(  LPC_GPDMA->EnbldChns & (GPDMA_DMACEnbldChns_Ch(MCI_DMA_WRITE_CHANNEL)) == 0)
   \   0000008C   0x....             LDR.N    R0,??DataTable5_9  ;; 0x2008001c
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
    303             {
    304               BSP_OS_SemPost(&BSP_MMC_WLock);
    305               return 1;
    306             }
    307             
    308              if( j > 1200000)
   \   00000090   0x....             LDR.N    R1,??DataTable5_11  ;; 0x124f81
   \   00000092   0x4589             CMP      R9,R1
   \   00000094   0xD3F4             BCC.N    ??MMC_WriteBlock_S_7
    309             {
    310               GPDMA_ChannelCmd(MCI_DMA_WRITE_CHANNEL, DISABLE);
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       GPDMA_ChannelCmd
    311               BSP_OS_SemPost(&BSP_MMC_RLock);
   \   0000009E   0x....             LDR.N    R0,??DataTable5_8
   \   000000A0   0x.... 0x....      BL       BSP_OS_SemPost
    312               return 1;
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0xE003             B.N      ??MMC_WriteBlock_S_1
    313             }
    314             
    315            }
    316            
    317            BSP_OS_SemPost(&BSP_MMC_WLock);
   \                     ??MMC_WriteBlock_S_8:
   \   000000A8   0x....             LDR.N    R0,??DataTable5_12
   \   000000AA   0x.... 0x....      BL       BSP_OS_SemPost
    318            
    319            return 0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??MMC_WriteBlock_S_1:
   \   000000B0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    320          }
    321          
    322          /*************************************************************************
    323          * Function Name: SdGetDiskCtrlBkl
    324          * Parameters:  none
    325          *
    326          * Return: pDiskCtrlBlk_t
    327          *
    328          * Description: Return pointer to status structure of the disk
    329          *
    330          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    331          pDiskCtrlBlk_t SdGetDiskCtrlBkl (void)
    332          {
    333            return(&_SdDskCtrlBlk);
   \                     SdGetDiskCtrlBkl:
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x4770             BX       LR               ;; return
    334          }
    335          
    336          /*************************************************************************
    337          * Function Name: SdDiskIO
    338          * Parameters: pInt8U pData,Int32U BlockStart,
    339          *             Int32U BlockNum, DiskIoRequest_t IoRequest
    340          *
    341          * Return: DiskStatusCode_t
    342          *
    343          * Description: MMC/SD disk I/O
    344          *
    345          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    346          DiskStatusCode_t SdDiskIO (pInt8U pData,Int32U BlockStart,
    347                                     Int32U BlockNum, DiskIoRequest_t IoRequest)
    348          {
   \                     SdDiskIO:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    349            
    350            if((NULL == pData) || (BlockStart+BlockNum > _SdDskCtrlBlk.BlockNumb))
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD004             BEQ.N    ??SdDiskIO_0
   \   0000000E   0x....             LDR.N    R0,??DataTable5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x1971             ADDS     R1,R6,R5
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD201             BCS.N    ??SdDiskIO_1
    351            {
    352              return(DiskParametersError);
   \                     ??SdDiskIO_0:
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0xE024             B.N      ??SdDiskIO_2
    353            }
    354            
    355            if (_SdDskCtrlBlk.DiskStatus != DiskCommandPass )
   \                     ??SdDiskIO_1:
   \   0000001C   0x....             LDR.N    R0,??DataTable5
   \   0000001E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD002             BEQ.N    ??SdDiskIO_3
    356            {//SD卡状态错误
    357              return(_SdDskCtrlBlk.DiskStatus);
   \   00000024   0x....             LDR.N    R0,??DataTable5
   \   00000026   0x7A00             LDRB     R0,[R0, #+8]
   \   00000028   0xE01D             B.N      ??SdDiskIO_2
    358            }
    359            
    360            switch (IoRequest)
   \                     ??SdDiskIO_3:
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0x2F00             CMP      R7,#+0
   \   0000002E   0xD003             BEQ.N    ??SdDiskIO_4
   \   00000030   0x2F02             CMP      R7,#+2
   \   00000032   0xD013             BEQ.N    ??SdDiskIO_5
   \   00000034   0xD30C             BCC.N    ??SdDiskIO_6
   \   00000036   0xE012             B.N      ??SdDiskIO_7
    361            {
    362            case DiskWrite:
    363              
    364              if(_SdDskCtrlBlk.WriteProtect)
   \                     ??SdDiskIO_4:
   \   00000038   0x....             LDR.N    R0,??DataTable5
   \   0000003A   0x68C0             LDR      R0,[R0, #+12]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD001             BEQ.N    ??SdDiskIO_8
    365              {
    366                return(DiskParametersError);
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0xE010             B.N      ??SdDiskIO_2
    367              }
    368              
    369              MMC_WriteBlock_S(pData,BlockStart,BlockNum);
   \                     ??SdDiskIO_8:
   \   00000044   0x0032             MOVS     R2,R6
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       MMC_WriteBlock_S
    370              
    371              break;
   \   0000004E   0xE008             B.N      ??SdDiskIO_9
    372            case DiskRead:
    373              
    374              MMC_ReadBlock_S(pData,BlockStart,BlockNum);
   \                     ??SdDiskIO_6:
   \   00000050   0x0032             MOVS     R2,R6
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       MMC_ReadBlock_S
    375              
    376              break;
   \   0000005A   0xE002             B.N      ??SdDiskIO_9
    377            case DiskVerify:
    378              break;
   \                     ??SdDiskIO_5:
   \   0000005C   0xE001             B.N      ??SdDiskIO_9
    379            default:
    380              return(DiskParametersError);
   \                     ??SdDiskIO_7:
   \   0000005E   0x2003             MOVS     R0,#+3
   \   00000060   0xE001             B.N      ??SdDiskIO_2
    381            }
    382            
    383            return(_SdDskCtrlBlk.DiskStatus);
   \                     ??SdDiskIO_9:
   \   00000062   0x....             LDR.N    R0,??DataTable5
   \   00000064   0x7A00             LDRB     R0,[R0, #+8]
   \                     ??SdDiskIO_2:
   \   00000066   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    384          }
    385          
    386          
    387          #if MCI_DMA_ENABLED
    388          /******************************************************************************
    389          **  DMA Handler
    390          ******************************************************************************/
    391          extern void ADC_DMA_IRQHandler();
    392          #include <bsp_adc.h>
    393          

   \                                 In section .text, align 2, keep-with-next
    394          void DMA_IRQHandler (void)
    395          {
   \                     DMA_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    396            	if (GPDMA_IntGetStatus(GPDMA_STAT_INT, MCI_DMA_READ_CHANNEL))
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       GPDMA_IntGetStatus
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD002             BEQ.N    ??DMA_IRQHandler_0
    397          	{
    398                    MCI_DMA_IRQHandler();
   \   0000000E   0x.... 0x....      BL       MCI_DMA_IRQHandler
   \   00000012   0xE010             B.N      ??DMA_IRQHandler_1
    399          	}
    400                  else if (GPDMA_IntGetStatus(GPDMA_STAT_INT, MCI_DMA_WRITE_CHANNEL))
   \                     ??DMA_IRQHandler_0:
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       GPDMA_IntGetStatus
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD002             BEQ.N    ??DMA_IRQHandler_2
    401                  {
    402                    MCI_DMA_IRQHandler();
   \   00000020   0x.... 0x....      BL       MCI_DMA_IRQHandler
   \   00000024   0xE007             B.N      ??DMA_IRQHandler_1
    403                  }
    404                  else if (GPDMA_IntGetStatus(GPDMA_STAT_INT, ADC_DMA_CH))
   \                     ??DMA_IRQHandler_2:
   \   00000026   0x2102             MOVS     R1,#+2
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       GPDMA_IntGetStatus
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??DMA_IRQHandler_1
    405                  {
    406                    ADC_DMA_IRQHandler();
   \   00000032   0x.... 0x....      BL       ADC_DMA_IRQHandler
    407                  }
    408            
    409          }
   \                     ??DMA_IRQHandler_1:
   \   00000036   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     _SdDskCtrlBlk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     g_File

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     g_LedMod

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     `?<Constant "error: MMC Not Presen...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     g_Byte128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     _SdSdCsd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00E4E1C0         DC32     0xe4e1c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     `?<Constant "error: MMC Init Faile...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     BSP_MMC_RLock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x2008001C         DC32     0x2008001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     dmaRdCh_TermianalCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x00124F81         DC32     0x124f81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     BSP_MMC_WLock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     dmaWrCh_TermianalCnt

   \                                 In section .rodata, align 4
   \                     `?<Constant "error: MMC Not Presen...">`:
   \   00000000   0x65 0x72          DC8 "error: MMC Not Present !!!\015\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x4D    
   \              0x4D 0x43    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x74    
   \              0x20 0x21    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "error: MMC Init Faile...">`:
   \   00000000   0x65 0x72          DC8 "error: MMC Init Failed !!!\015\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x4D    
   \              0x4D 0x43    
   \              0x20 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x21    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    410          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DMA_IRQHandler
         8   -> ADC_DMA_IRQHandler
         8   -> GPDMA_IntGetStatus
         8   -> MCI_DMA_IRQHandler
      56   MCI_disk_initialize
        56   -> DebugMsg
        56   -> GPDMA_Init
        56   -> MCI_CheckStatus
        56   -> MCI_Cmd_SelectCard
        56   -> MCI_GetCID
        56   -> MCI_GetCSD
        56   -> MCI_Init
        56   -> MCI_SetBusWidth
        56   -> MCI_SetCardAddress
        56   -> MCI_SetOutputMode
        56   -> MCI_Set_MCIClock
        56   -> WriteFlash
      32   MMC_ReadBlock_S
        32   -> BSP_OS_SemPost
        32   -> BSP_OS_SemWait
        32   -> GPDMA_ChannelCmd
        32   -> MCI_CheckStatus
        32   -> MCI_ReadBlock
      32   MMC_WriteBlock_S
        32   -> BSP_OS_SemPost
        32   -> BSP_OS_SemWait
        32   -> GPDMA_ChannelCmd
        32   -> MCI_CheckStatus
        32   -> MCI_WriteBlock
      24   SdDiskIO
        24   -> MMC_ReadBlock_S
        24   -> MMC_WriteBlock_S
       8   SdDiskInit
         8   -> DebugMsg
         8   -> MCI_disk_initialize
       0   SdGetDiskCtrlBkl


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "error: MMC Init Faile...">
      32  ?<Constant "error: MMC Not Presen...">
       4  ?<Constant {0, 0, 0}>
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  BSP_MMC_RLock
       4  BSP_MMC_WLock
      56  DMA_IRQHandler
     338  MCI_disk_initialize
     184  MMC_ReadBlock_S
     180  MMC_WriteBlock_S
     104  SdDiskIO
      66  SdDiskInit
       4  SdGetDiskCtrlBkl
      20  _SdDskCtrlBlk
      16  _SdSdCsd
       4  _bHC

 
  48 bytes in section .bss
  68 bytes in section .rodata
 988 bytes in section .text
 
 988 bytes of CODE  memory
  68 bytes of CONST memory
  48 bytes of DATA  memory

Errors: none
Warnings: none
