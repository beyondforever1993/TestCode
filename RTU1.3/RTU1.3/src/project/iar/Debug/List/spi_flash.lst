###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      26/Mar/2017  12:36:41 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\桌面\RTU_1.2\bsp\spi_flash\spi_flash.c       #
#    Command line =  D:\wangfan2\桌面\RTU_1.2\bsp\spi_flash\spi_flash.c -lCN  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\ -o      #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\          #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I D:\wangfan2\桌面\RTU_1.2\project\iar\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\ADC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RTC\ -I   #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\TILT\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RDLevel\  #
#                    -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\RS232\ #
#                     -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\OS-v2 #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\BSP\Vibr #
#                    ationString\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\ucos2\uCOS-II #
#                    \Source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\u #
#                    cos2\uC-LIB\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\ #
#                    ..\ucos2\uC-CPU\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I                #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Drivers #
#                    \source\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\c #
#                    msis\Drivers\include\ -I D:\wangfan2\桌面\RTU_1.2\projec #
#                    t\iar\..\..\app\ -I D:\wangfan2\桌面\RTU_1.2\project\iar #
#                    \..\..\uC-Probe\Target\Plugins\uCOS-II\ -I               #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Workspaces\ -I                            #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Demos\Intro\Source\ -I D:\wangfan2\桌面\RTU_1.2\proje #
#                    ct\iar\..\..\uC-Probe\Target\Communication\Generic\Sourc #
#                    e\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Prob #
#                    e\Target\Communication\Generic\RS-232\Source\ -I         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\Ports\NXP\LPC17xx\ -I    #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\uC-Probe\Targ #
#                    et\Communication\Generic\RS-232\OS\uCOS-II\ -I           #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\cmsis\Core\CM #
#                    3\CoreSupport\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\. #
#                    .\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\ -I  #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_BT\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hua #
#                    ceApp\DEVICE_COM\ -I D:\wangfan2\桌面\RTU_1.2\project\ia #
#                    r\..\..\HuaceApp\DEVICE_GPRS\ -I                         #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp\DEVI #
#                    CE_GPS\ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\Hu #
#                    aceApp\DEVICE_RADIO\ -I D:\wangfan2\桌面\RTU_1.2\project #
#                    \iar\..\..\HuaceApp\iap\ -I                              #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\FatFs\ -I     #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\USB\ -I       #
#                    D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\bsp\spi_flash #
#                    \ -I D:\wangfan2\桌面\RTU_1.2\project\iar\..\..\HuaceApp #
#                    \LED\ -On --use_c++_inline                               #
#    List file    =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\List\spi_flas #
#                    h.lst                                                    #
#    Object file  =  D:\wangfan2\桌面\RTU_1.2\project\iar\Debug\Obj\spi_flash #
#                    .o                                                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\桌面\RTU_1.2\bsp\spi_flash\spi_flash.c
      1          #include "spi_flash.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
      2          

   \                                 In section .bss, align 4
      3          static uint8_t  sector_buf[SECTOR_SIZE];
   \                     sector_buf:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
      4          static uint32_t curr_sector ; // 针对 sector_buf
   \                     curr_sector:
   \   00000000                      DS8 4
      5          
      6          //static uint8_t  page_buf[PAGE_SIZE];
      7          

   \                                 In section .bss, align 4
      8           uint32_t addr_read;
   \                     addr_read:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      9           uint32_t addr_write;
   \                     addr_write:
   \   00000000                      DS8 4
     10          
     11          static uint32_t sflash_rt_bytes(uint8_t * pbuf_t,uint32_t len_t,uint8_t * pbuf_r,uint32_t len_r);
     12          
     13          static uint8_t  sflash_read_status(void);
     14          
     15          static uint8_t  sflash_ersse_sector(uint32_t addr);
     16          
     17          static uint8_t  sflash_write_page(uint32_t addr,uint8_t * src_buf,uint16_t len);
     18          
     19          static uint8_t  sflash_write_sector(uint32_t addr,uint8_t * src_buf);
     20           
     21          
     22          #define SFLASH_CS_LOW()  GPIO_OutputValue(SFLASH_SSEL_PORT, 1<<SFLASH_SSEL_PIN , 0)
     23          #define SFLASH_CS_HIGH() GPIO_OutputValue(SFLASH_SSEL_PORT, 1<<SFLASH_SSEL_PIN , 1)
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void spi_flash_init(void)
     26          {
   \                     spi_flash_init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     27            
     28            // SSP Configuration structure variable
     29            SSP_CFG_Type SSP_ConfigStruct;
     30            
     31            /** 获取读写指针 --------------------------------------------------*/
     32            addr_read = g_RtuConfig.addr_rd;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000008   0x69C0             LDR      R0,[R0, #+28]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     33            addr_write = g_RtuConfig.addr_wr;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000014   0x6980             LDR      R0,[R0, #+24]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     34            
     35            curr_sector = 0xffff0000;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0xffff0000
   \   00000024   0x6001             STR      R1,[R0, #+0]
     36            
     37            /** 引脚初始化 -------------------------------------------------------------*/
     38            
     39            /** 控制引脚 **/
     40            GPIO_SetDir(SFLASH_HOLD_PORT, 1<<SFLASH_HOLD_PIN, GPIO_DIRECTION_OUTPUT);
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       GPIO_SetDir
     41            GPIO_SetDir(SFLASH_WP_PORT,   1<<SFLASH_WP_PIN  , GPIO_DIRECTION_OUTPUT);
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0xF05F 0x7100      MOVS     R1,#+33554432
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       GPIO_SetDir
     42            GPIO_SetDir(SFLASH_SSEL_PORT, 1<<SFLASH_SSEL_PIN, GPIO_DIRECTION_OUTPUT);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x.... 0x....      BL       GPIO_SetDir
     43            
     44            GPIO_OutputValue(SFLASH_HOLD_PORT, 1<<SFLASH_HOLD_PIN , 1);
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       GPIO_OutputValue
     45            GPIO_OutputValue(SFLASH_WP_PORT  , 1<<SFLASH_WP_PIN   , 1);
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0xF05F 0x7100      MOVS     R1,#+33554432
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x.... 0x....      BL       GPIO_OutputValue
     46            GPIO_OutputValue(SFLASH_SSEL_PORT, 1<<SFLASH_SSEL_PIN , 1);
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0x.... 0x....      BL       GPIO_OutputValue
     47            
     48            /** spi 引脚初始化 **/
     49            
     50            PINSEL_ConfigPin(SFLASH_CLK_PORT , SFLASH_CLK_PIN   , SFLASH_CLK_FUNC);
   \   0000006E   0x2202             MOVS     R2,#+2
   \   00000070   0x2116             MOVS     R1,#+22
   \   00000072   0x2002             MOVS     R0,#+2
   \   00000074   0x.... 0x....      BL       PINSEL_ConfigPin
     51            PINSEL_SetFilter(SFLASH_CLK_PORT , SFLASH_CLK_PIN   , DISABLE);
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0x2116             MOVS     R1,#+22
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x.... 0x....      BL       PINSEL_SetFilter
     52            
     53            PINSEL_ConfigPin(SFLASH_MOSI_PORT, SFLASH_MOSI_PIN  , SFLASH_MOSI_FUNC);
   \   00000082   0x2202             MOVS     R2,#+2
   \   00000084   0x211B             MOVS     R1,#+27
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0x.... 0x....      BL       PINSEL_ConfigPin
     54            PINSEL_SetFilter(SFLASH_MOSI_PORT, SFLASH_MOSI_PIN  , DISABLE);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x211B             MOVS     R1,#+27
   \   00000090   0x2002             MOVS     R0,#+2
   \   00000092   0x.... 0x....      BL       PINSEL_SetFilter
     55            
     56            PINSEL_ConfigPin(SFLASH_MISO_PORT, SFLASH_MISO_PIN  , SFLASH_MISO_FUNC);
   \   00000096   0x2202             MOVS     R2,#+2
   \   00000098   0x211A             MOVS     R1,#+26
   \   0000009A   0x2002             MOVS     R0,#+2
   \   0000009C   0x.... 0x....      BL       PINSEL_ConfigPin
     57            PINSEL_SetFilter(SFLASH_MISO_PORT, SFLASH_MISO_PIN  , DISABLE);
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0x211A             MOVS     R1,#+26
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x.... 0x....      BL       PINSEL_SetFilter
     58            
     59            //  PINSEL_ConfigPin(SFLASH_SSEL_PORT, SFLASH_SSEL_PIN  , SFLASH_SSEL_FUNC);
     60            //  PINSEL_SetFilter(SFLASH_SSEL_PORT, SFLASH_SSEL_PIN  , DISABLE);
     61            
     62            /** 外设初始化 **/
     63            
     64            // initialize SSP configuration structure to default
     65            SSP_ConfigStructInit(&SSP_ConfigStruct);
   \   000000AA   0xA800             ADD      R0,SP,#+0
   \   000000AC   0x.... 0x....      BL       SSP_ConfigStructInit
     66            
     67            SSP_ConfigStruct.CPHA = SSP_CPHA_FIRST;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x9001             STR      R0,[SP, #+4]
     68            SSP_ConfigStruct.CPOL = SSP_CPOL_HI;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9002             STR      R0,[SP, #+8]
     69            SSP_ConfigStruct.ClockRate = 5000000;
   \   000000B8   0x.... 0x....      LDR.W    R0,??DataTable3_5  ;; 0x4c4b40
   \   000000BC   0x9005             STR      R0,[SP, #+20]
     70            
     71            SSP_ConfigStruct.Mode = SSP_MASTER_MODE;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x9003             STR      R0,[SP, #+12]
     72            // Initialize SSP peripheral with parameter given in structure above
     73            SSP_Init(SFLASH_SSP, &SSP_ConfigStruct);
   \   000000C2   0xA900             ADD      R1,SP,#+0
   \   000000C4   0x.... 0x....      LDR.W    R0,??DataTable3_6  ;; 0x40088000
   \   000000C8   0x.... 0x....      BL       SSP_Init
     74            
     75            
     76            /* Clear all remaining data in RX FIFO */
     77            while (SFLASH_SSP->SR & SSP_SR_RNE)
   \                     ??spi_flash_init_0:
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable3_7  ;; 0x4008800c
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x0740             LSLS     R0,R0,#+29
   \   000000D4   0xD504             BPL.N    ??spi_flash_init_1
     78              SSP_ReceiveData(SFLASH_SSP);
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable3_6  ;; 0x40088000
   \   000000DA   0x.... 0x....      BL       SSP_ReceiveData
   \   000000DE   0xE7F5             B.N      ??spi_flash_init_0
     79            
     80            // Clear status
     81            SFLASH_SSP->ICR = SSP_ICR_BITMASK;
   \                     ??spi_flash_init_1:
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable3_8  ;; 0x40088020
   \   000000E4   0x2103             MOVS     R1,#+3
   \   000000E6   0x6001             STR      R1,[R0, #+0]
     82            
     83            // Enable SSP peripheral
     84            SSP_Cmd(SFLASH_SSP, ENABLE);
   \   000000E8   0x2101             MOVS     R1,#+1
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable3_6  ;; 0x40088000
   \   000000EE   0x.... 0x....      BL       SSP_Cmd
     85            
     86            /** 中断及DMA初始化 **/
     87            
     88            //spi_flash_test();
     89            //spi_flash_read_data((addr_write/SECTOR_SIZE)*SECTOR_SIZE,sector_buf,SECTOR_SIZE,2);
     90            
     91          }
   \   000000F2   0xB007             ADD      SP,SP,#+28
   \   000000F4   0xBD00             POP      {PC}             ;; return
     92          
     93          /**
     94          读取 JEDEC ID
     95          **/

   \                                 In section .text, align 2, keep-with-next
     96          uint32_t spi_flash_read_id(void)
     97          {
   \                     spi_flash_read_id:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     98            
     99            uint8_t cmd = 0x9F;
   \   00000004   0x209F             MOVS     R0,#+159
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
    100            uint8_t  buf[4]={0};;
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    101            
    102            
    103            /** SSEL_LOW **/
    104            SFLASH_CS_LOW();
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       GPIO_OutputValue
    105            
    106            sflash_rt_bytes(&cmd,1,buf,4);
   \   0000001C   0x2304             MOVS     R3,#+4
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0xA801             ADD      R0,SP,#+4
   \   00000024   0x.... 0x....      BL       sflash_rt_bytes
    107            
    108            SFLASH_CS_HIGH();
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       GPIO_OutputValue
    109            
    110            /** TODO: 修改为中断及增加信号量 DMA的使用  **/
    111            
    112            return *(uint32_t *)buf; 
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0xBD0E             POP      {R1-R3,PC}       ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void spi_flash_test(void)
    116          {
   \                     spi_flash_test:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0C1             SUB      SP,SP,#+260
    117            uint8_t buf[256];
    118            
    119            /** 擦除扇区 **/
    120            sflash_ersse_sector(0);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       sflash_ersse_sector
    121            
    122            
    123            for( int i = 0; i < 256;i++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??spi_flash_test_0:
   \   0000000C   0x28FF             CMP      R0,#+255
   \   0000000E   0xDC04             BGT.N    ??spi_flash_test_1
    124            {
    125              buf[i] = 0x38;
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2238             MOVS     R2,#+56
   \   00000014   0x5442             STRB     R2,[R0, R1]
    126            }
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0xE7F8             B.N      ??spi_flash_test_0
    127            
    128            /** 写扇区 **/
    129            spi_flash_write_data(0,buf,100,2);
   \                     ??spi_flash_test_1:
   \   0000001A   0x2302             MOVS     R3,#+2
   \   0000001C   0x2264             MOVS     R2,#+100
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       spi_flash_write_data
    130            
    131            /** 读数据 **/
    132            
    133            memset(buf,0,sizeof buf);
   \   00000026   0xF44F 0x7280      MOV      R2,#+256
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       memset
    134            
    135            spi_flash_read_data(0,buf,100,2);
   \   00000032   0x2302             MOVS     R3,#+2
   \   00000034   0x2264             MOVS     R2,#+100
   \   00000036   0xA900             ADD      R1,SP,#+0
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       spi_flash_read_data
    136            
    137            while(1);
   \                     ??spi_flash_test_2:
   \   0000003E   0xE7FE             B.N      ??spi_flash_test_2
    138          }
    139          
    140          /** 
    141          整个内存可以一次读出,addr 为字节地址,范围为 0 - 0xffffff
    142          @flag bit0  0-> 不修改读指针  1-> 修改读指针
    143                bit1  0-> 使用addr_read 1-> 使用addr 
    144          
    145          return: 0 读成功 1 读失败
    146          **/

   \                                 In section .text, align 2, keep-with-next
    147          uint8_t spi_flash_read_data(uint32_t addr,uint8_t * dest_buf,uint32_t len,uint8_t flag)
    148          {
   \                     spi_flash_read_data:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    149            
    150            uint8_t  buf[4];
    151            
    152            if( (flag & 0x02) == 0)
   \   0000000A   0x07B8             LSLS     R0,R7,#+30
   \   0000000C   0xD40F             BMI.N    ??spi_flash_read_data_0
    153            {
    154              addr = addr_read;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x0004             MOVS     R4,R0
    155              
    156              if( flag & 0x01)
   \   00000016   0x07F8             LSLS     R0,R7,#+31
   \   00000018   0xD509             BPL.N    ??spi_flash_read_data_0
    157              {
    158                if( addr_read == addr_write )
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD101             BNE.N    ??spi_flash_read_data_0
    159                {
    160                  return 1;//无数据 
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE048             B.N      ??spi_flash_read_data_1
    161                }
    162              }
    163            }
    164          
    165            buf[0] = 0x03;
   \                     ??spi_flash_read_data_0:
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
    166            buf[1] = (addr >> 16) & 0xff;
   \   00000034   0x0C20             LSRS     R0,R4,#+16
   \   00000036   0xF88D 0x0001      STRB     R0,[SP, #+1]
    167            buf[2] = (addr >> 8) & 0xff;
   \   0000003A   0x0A20             LSRS     R0,R4,#+8
   \   0000003C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    168            buf[3] = addr & 0xff;
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xF88D 0x0003      STRB     R0,[SP, #+3]
    169            
    170            while( sflash_read_status());
   \                     ??spi_flash_read_data_2:
   \   00000046   0x.... 0x....      BL       sflash_read_status
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1FB             BNE.N    ??spi_flash_read_data_2
    171            
    172            /** SSEL_LOW **/
    173            SFLASH_CS_LOW();
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x.... 0x....      BL       GPIO_OutputValue
    174            
    175            sflash_rt_bytes(buf,4,NULL,0);
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x2104             MOVS     R1,#+4
   \   00000060   0xA800             ADD      R0,SP,#+0
   \   00000062   0x.... 0x....      BL       sflash_rt_bytes
    176            
    177            sflash_rt_bytes(buf,0,dest_buf,len);
   \   00000066   0x0033             MOVS     R3,R6
   \   00000068   0x002A             MOVS     R2,R5
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       sflash_rt_bytes
    178            
    179            SFLASH_CS_HIGH();
   \   00000072   0x2201             MOVS     R2,#+1
   \   00000074   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0x.... 0x....      BL       GPIO_OutputValue
    180            
    181            if( flag &0x01)
   \   0000007E   0x07F8             LSLS     R0,R7,#+31
   \   00000080   0xD51D             BPL.N    ??spi_flash_read_data_3
    182            {
    183              addr_read += len; 
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x1830             ADDS     R0,R6,R0
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    184              
    185              if( addr_read >= (300*1000*sizeof(struct DATA_STRUCT)) )
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable3_9  ;; 0xe4e1c0
   \   0000009A   0x4288             CMP      R0,R1
   \   0000009C   0xD303             BCC.N    ??spi_flash_read_data_4
    186              {
    187                addr_read = 0;
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x6001             STR      R1,[R0, #+0]
    188              }
    189              
    190              /** 读指针更新 **/
    191              g_RtuConfig.addr_rd = addr_read;
   \                     ??spi_flash_read_data_4:
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable3
   \   000000AA   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   000000AE   0x6809             LDR      R1,[R1, #+0]
   \   000000B0   0x61C1             STR      R1,[R0, #+28]
    192          
    193              LPC_RTC->GPREG2 = addr_read;
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x4002404c
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   000000BA   0x6809             LDR      R1,[R1, #+0]
   \   000000BC   0x6001             STR      R1,[R0, #+0]
    194              
    195            }
    196            
    197            return 0;
   \                     ??spi_flash_read_data_3:
   \   000000BE   0x2000             MOVS     R0,#+0
   \                     ??spi_flash_read_data_1:
   \   000000C0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    198          }
    199          /**
    200          @len: 长度要 <= PAGE_SIZE
    201          @addr:  字节地址
    202          @flag: bit0 0 -> 不修改写指针     1  -> 修改写指针
    203                 bit1 0 -> 使用addr_write   1  -> 使用addr 
    204          **/

   \                                 In section .text, align 2, keep-with-next
    205          uint8_t spi_flash_write_data(uint32_t addr ,uint8_t * src_buf,uint32_t len,uint8_t flag )
    206          {
   \                     spi_flash_write_data:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    207            
    208            uint32_t saddr1,saddr2;
    209            
    210            uint32_t i,j,erase_flag=0;
   \   0000000A   0xF05F 0x0B00      MOVS     R11,#+0
    211            
    212            if( (flag & 0x02) == 0x00)
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x0780             LSLS     R0,R0,#+30
   \   00000014   0xD403             BMI.N    ??spi_flash_write_data_0
    213            {
    214              addr = addr_write;
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x0004             MOVS     R4,R0
    215            }
    216            
    217            saddr1 = addr/SECTOR_SIZE;
   \                     ??spi_flash_write_data_0:
   \   0000001E   0x0B20             LSRS     R0,R4,#+12
   \   00000020   0x0007             MOVS     R7,R0
    218            saddr2 = (addr+len-1)/SECTOR_SIZE;
   \   00000022   0x1930             ADDS     R0,R6,R4
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x0B00             LSRS     R0,R0,#+12
   \   00000028   0x4680             MOV      R8,R0
    219            
    220            if( saddr1 == saddr2)
   \   0000002A   0x4547             CMP      R7,R8
   \   0000002C   0xF040 0x8095      BNE.W    ??spi_flash_write_data_1
    221            {
    222              // 同一扇区
    223              
    224              if( curr_sector != saddr1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x42B8             CMP      R0,R7
   \   00000038   0xD00D             BEQ.N    ??spi_flash_write_data_2
    225              {
    226                spi_flash_read_data(saddr1*SECTOR_SIZE,sector_buf,SECTOR_SIZE,2);
   \   0000003A   0x2302             MOVS     R3,#+2
   \   0000003C   0xF44F 0x5280      MOV      R2,#+4096
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00000044   0xF44F 0x5080      MOV      R0,#+4096
   \   00000048   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000004C   0x.... 0x....      BL       spi_flash_read_data
    227                
    228                curr_sector = saddr1;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000054   0x6007             STR      R7,[R0, #+0]
    229              }
    230              
    231              for( i = addr-saddr1*SECTOR_SIZE,j=0; i < addr+len-saddr1*SECTOR_SIZE;i++,j++)
   \                     ??spi_flash_write_data_2:
   \   00000056   0xF44F 0x5080      MOV      R0,#+4096
   \   0000005A   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   0000005E   0x4681             MOV      R9,R0
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x4682             MOV      R10,R0
   \                     ??spi_flash_write_data_3:
   \   00000064   0x1930             ADDS     R0,R6,R4
   \   00000066   0xF44F 0x5180      MOV      R1,#+4096
   \   0000006A   0xFB01 0x0017      MLS      R0,R1,R7,R0
   \   0000006E   0x4581             CMP      R9,R0
   \   00000070   0xD217             BCS.N    ??spi_flash_write_data_4
    232              {
    233                if( (src_buf[j] & sector_buf[i]) != src_buf[j])
   \   00000072   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   0000007A   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   0000007E   0x4008             ANDS     R0,R1,R0
   \   00000080   0xF81A 0x1005      LDRB     R1,[R10, R5]
   \   00000084   0x4288             CMP      R0,R1
   \   00000086   0xD001             BEQ.N    ??spi_flash_write_data_5
    234                {
    235                  erase_flag = 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x4683             MOV      R11,R0
    236                }
    237                
    238                sector_buf[i] = src_buf[j];
   \                     ??spi_flash_write_data_5:
   \   0000008C   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00000094   0xF809 0x0001      STRB     R0,[R9, R1]
    239              }
   \   00000098   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000009C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000A0   0xE7E0             B.N      ??spi_flash_write_data_3
    240              
    241              if( erase_flag == 1)
   \                     ??spi_flash_write_data_4:
   \   000000A2   0xF1BB 0x0F01      CMP      R11,#+1
   \   000000A6   0xD10B             BNE.N    ??spi_flash_write_data_6
    242              {
    243                sflash_ersse_sector(saddr1*SECTOR_SIZE);
   \   000000A8   0xF44F 0x5080      MOV      R0,#+4096
   \   000000AC   0xFB00 0xF007      MUL      R0,R0,R7
   \   000000B0   0x.... 0x....      BL       sflash_ersse_sector
    244                
    245                sflash_write_sector(saddr1,sector_buf);
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000000B8   0x0038             MOVS     R0,R7
   \   000000BA   0x.... 0x....      BL       sflash_write_sector
   \   000000BE   0xE0F3             B.N      ??spi_flash_write_data_7
    246              }
    247              else
    248              {
    249                if( addr/PAGE_SIZE == (addr+len)/PAGE_SIZE)
   \                     ??spi_flash_write_data_6:
   \   000000C0   0x0A20             LSRS     R0,R4,#+8
   \   000000C2   0x1931             ADDS     R1,R6,R4
   \   000000C4   0xEBB0 0x2F11      CMP      R0,R1, LSR #+8
   \   000000C8   0xD10C             BNE.N    ??spi_flash_write_data_8
    250                {
    251                  //相同页
    252                  sflash_write_page(addr,&sector_buf[addr-saddr1*SECTOR_SIZE],len);
   \   000000CA   0x0032             MOVS     R2,R6
   \   000000CC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000CE   0xF44F 0x5080      MOV      R0,#+4096
   \   000000D2   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   000000D6   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000000DA   0x1841             ADDS     R1,R0,R1
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x.... 0x....      BL       sflash_write_page
   \   000000E2   0xE0E1             B.N      ??spi_flash_write_data_7
    253                }
    254                else
    255                {// 不同页
    256                  
    257                  /** 第一页 **/
    258                  
    259                  sflash_write_page(addr,&sector_buf[addr-saddr1*SECTOR_SIZE],PAGE_SIZE-addr%PAGE_SIZE);
   \                     ??spi_flash_write_data_8:
   \   000000E4   0xF44F 0x7080      MOV      R0,#+256
   \   000000E8   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   000000EC   0xFB01 0x4110      MLS      R1,R1,R0,R4
   \   000000F0   0xF5D1 0x7280      RSBS     R2,R1,#+256
   \   000000F4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000F6   0xF44F 0x5080      MOV      R0,#+4096
   \   000000FA   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00000102   0x1841             ADDS     R1,R0,R1
   \   00000104   0x0020             MOVS     R0,R4
   \   00000106   0x.... 0x....      BL       sflash_write_page
    260                  
    261                  /** 第二页 **/
    262                  
    263                  sflash_write_page(addr+PAGE_SIZE-addr%PAGE_SIZE,
    264                                    &sector_buf[addr-saddr1*SECTOR_SIZE+PAGE_SIZE-addr%PAGE_SIZE],
    265                                    len-(PAGE_SIZE-addr%PAGE_SIZE)
    266                                      );
   \   0000010A   0x0030             MOVS     R0,R6
   \   0000010C   0xF5B0 0x7080      SUBS     R0,R0,#+256
   \   00000110   0xF44F 0x7180      MOV      R1,#+256
   \   00000114   0xFBB4 0xF2F1      UDIV     R2,R4,R1
   \   00000118   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000011C   0x1812             ADDS     R2,R2,R0
   \   0000011E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000120   0xF44F 0x5080      MOV      R0,#+4096
   \   00000124   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   00000128   0xF510 0x7080      ADDS     R0,R0,#+256
   \   0000012C   0xF44F 0x7180      MOV      R1,#+256
   \   00000130   0xFBB4 0xF3F1      UDIV     R3,R4,R1
   \   00000134   0xFB03 0x4311      MLS      R3,R3,R1,R4
   \   00000138   0x1AC0             SUBS     R0,R0,R3
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   0000013E   0x1841             ADDS     R1,R0,R1
   \   00000140   0xF514 0x7080      ADDS     R0,R4,#+256
   \   00000144   0xF44F 0x7380      MOV      R3,#+256
   \   00000148   0xFBB4 0xFCF3      UDIV     R12,R4,R3
   \   0000014C   0xFB0C 0x4C13      MLS      R12,R12,R3,R4
   \   00000150   0xEBB0 0x000C      SUBS     R0,R0,R12
   \   00000154   0x.... 0x....      BL       sflash_write_page
   \   00000158   0xE0A6             B.N      ??spi_flash_write_data_7
    267                }
    268              }
    269              
    270              
    271            }
    272            else
    273            {
    274              //两个扇区
    275              
    276              /** 第一页 **/
    277              erase_flag = 0;
   \                     ??spi_flash_write_data_1:
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x4683             MOV      R11,R0
    278              
    279              if( curr_sector != saddr1)
   \   0000015E   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000162   0x6800             LDR      R0,[R0, #+0]
   \   00000164   0x42B8             CMP      R0,R7
   \   00000166   0xD00D             BEQ.N    ??spi_flash_write_data_9
    280              {
    281                spi_flash_read_data(saddr1*SECTOR_SIZE,sector_buf,SECTOR_SIZE,2);
   \   00000168   0x2302             MOVS     R3,#+2
   \   0000016A   0xF44F 0x5280      MOV      R2,#+4096
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   00000172   0xF44F 0x5080      MOV      R0,#+4096
   \   00000176   0xFB00 0xF007      MUL      R0,R0,R7
   \   0000017A   0x.... 0x....      BL       spi_flash_read_data
    282                
    283                curr_sector = saddr1;
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000182   0x6007             STR      R7,[R0, #+0]
    284              }
    285              
    286              for( i = addr-saddr1*SECTOR_SIZE,j=0; i < SECTOR_SIZE;i++,j++)
   \                     ??spi_flash_write_data_9:
   \   00000184   0xF44F 0x5080      MOV      R0,#+4096
   \   00000188   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   0000018C   0x4681             MOV      R9,R0
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x4682             MOV      R10,R0
   \                     ??spi_flash_write_data_10:
   \   00000192   0xF5B9 0x5F80      CMP      R9,#+4096
   \   00000196   0xD217             BCS.N    ??spi_flash_write_data_11
    287              {
    288                if( (src_buf[j] & sector_buf[i]) != src_buf[j])
   \   00000198   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000001A0   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   000001A4   0x4008             ANDS     R0,R1,R0
   \   000001A6   0xF81A 0x1005      LDRB     R1,[R10, R5]
   \   000001AA   0x4288             CMP      R0,R1
   \   000001AC   0xD001             BEQ.N    ??spi_flash_write_data_12
    289                {
    290                  erase_flag = 1;
   \   000001AE   0x2001             MOVS     R0,#+1
   \   000001B0   0x4683             MOV      R11,R0
    291                }
    292                
    293                sector_buf[i] = src_buf[j];
   \                     ??spi_flash_write_data_12:
   \   000001B2   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000001BA   0xF809 0x0001      STRB     R0,[R9, R1]
    294              }
   \   000001BE   0xF119 0x0901      ADDS     R9,R9,#+1
   \   000001C2   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000001C6   0xE7E4             B.N      ??spi_flash_write_data_10
    295              
    296              if( erase_flag == 1)
   \                     ??spi_flash_write_data_11:
   \   000001C8   0xF1BB 0x0F01      CMP      R11,#+1
   \   000001CC   0xD10B             BNE.N    ??spi_flash_write_data_13
    297              {
    298                sflash_ersse_sector(saddr1*SECTOR_SIZE);
   \   000001CE   0xF44F 0x5080      MOV      R0,#+4096
   \   000001D2   0xFB00 0xF007      MUL      R0,R0,R7
   \   000001D6   0x.... 0x....      BL       sflash_ersse_sector
    299                
    300                sflash_write_sector(saddr1,sector_buf);
   \   000001DA   0x.... 0x....      LDR.W    R1,??DataTable3_11
   \   000001DE   0x0038             MOVS     R0,R7
   \   000001E0   0x.... 0x....      BL       sflash_write_sector
   \   000001E4   0xE011             B.N      ??spi_flash_write_data_14
    301              }
    302              else
    303              {
    304                sflash_write_page(addr,&sector_buf[addr-saddr1*SECTOR_SIZE],PAGE_SIZE-addr%PAGE_SIZE);
   \                     ??spi_flash_write_data_13:
   \   000001E6   0xF44F 0x7080      MOV      R0,#+256
   \   000001EA   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   000001EE   0xFB01 0x4110      MLS      R1,R1,R0,R4
   \   000001F2   0xF5D1 0x7280      RSBS     R2,R1,#+256
   \   000001F6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000001F8   0xF44F 0x5080      MOV      R0,#+4096
   \   000001FC   0xFB00 0x4017      MLS      R0,R0,R7,R4
   \   00000200   0x....             LDR.N    R1,??DataTable3_11
   \   00000202   0x1841             ADDS     R1,R0,R1
   \   00000204   0x0020             MOVS     R0,R4
   \   00000206   0x.... 0x....      BL       sflash_write_page
    305              }
    306              
    307              /** 第二页 **/
    308              
    309              erase_flag = 0;
   \                     ??spi_flash_write_data_14:
   \   0000020A   0x2000             MOVS     R0,#+0
   \   0000020C   0x4683             MOV      R11,R0
    310              
    311              spi_flash_read_data(saddr2*SECTOR_SIZE,sector_buf,SECTOR_SIZE,2);
   \   0000020E   0x2302             MOVS     R3,#+2
   \   00000210   0xF44F 0x5280      MOV      R2,#+4096
   \   00000214   0x....             LDR.N    R1,??DataTable3_11
   \   00000216   0xF44F 0x5080      MOV      R0,#+4096
   \   0000021A   0xFB00 0xF008      MUL      R0,R0,R8
   \   0000021E   0x.... 0x....      BL       spi_flash_read_data
    312              
    313              curr_sector = saddr2;
   \   00000222   0x....             LDR.N    R0,??DataTable3_3
   \   00000224   0xF8C0 0x8000      STR      R8,[R0, #+0]
    314              
    315              for( i = 0,j=saddr2*SECTOR_SIZE-addr; i < addr + len  - saddr2*SECTOR_SIZE;i++,j++)
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x4681             MOV      R9,R0
   \   0000022C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000230   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000234   0x1B00             SUBS     R0,R0,R4
   \   00000236   0x4682             MOV      R10,R0
   \                     ??spi_flash_write_data_15:
   \   00000238   0x1930             ADDS     R0,R6,R4
   \   0000023A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000023E   0xFB01 0x0018      MLS      R0,R1,R8,R0
   \   00000242   0x4581             CMP      R9,R0
   \   00000244   0xD215             BCS.N    ??spi_flash_write_data_16
    316              {
    317                if( (src_buf[j] & sector_buf[i]) != src_buf[j])
   \   00000246   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   0000024A   0x....             LDR.N    R1,??DataTable3_11
   \   0000024C   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   00000250   0x4008             ANDS     R0,R1,R0
   \   00000252   0xF81A 0x1005      LDRB     R1,[R10, R5]
   \   00000256   0x4288             CMP      R0,R1
   \   00000258   0xD001             BEQ.N    ??spi_flash_write_data_17
    318                {
    319                  erase_flag = 1;
   \   0000025A   0x2001             MOVS     R0,#+1
   \   0000025C   0x4683             MOV      R11,R0
    320                }
    321                
    322                sector_buf[i] = src_buf[j];
   \                     ??spi_flash_write_data_17:
   \   0000025E   0xF81A 0x0005      LDRB     R0,[R10, R5]
   \   00000262   0x....             LDR.N    R1,??DataTable3_11
   \   00000264   0xF809 0x0001      STRB     R0,[R9, R1]
    323              }
   \   00000268   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000026C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000270   0xE7E2             B.N      ??spi_flash_write_data_15
    324              
    325              if( erase_flag == 1)
   \                     ??spi_flash_write_data_16:
   \   00000272   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000276   0xD10A             BNE.N    ??spi_flash_write_data_18
    326              {
    327                sflash_ersse_sector(saddr2*SECTOR_SIZE);
   \   00000278   0xF44F 0x5080      MOV      R0,#+4096
   \   0000027C   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000280   0x.... 0x....      BL       sflash_ersse_sector
    328                
    329                sflash_write_sector(saddr2,sector_buf);
   \   00000284   0x....             LDR.N    R1,??DataTable3_11
   \   00000286   0x4640             MOV      R0,R8
   \   00000288   0x.... 0x....      BL       sflash_write_sector
   \   0000028C   0xE00C             B.N      ??spi_flash_write_data_7
    330              }
    331              else
    332              {
    333                sflash_write_page(saddr2*SECTOR_SIZE,sector_buf,addr+len - saddr2*SECTOR_SIZE);
   \                     ??spi_flash_write_data_18:
   \   0000028E   0x1930             ADDS     R0,R6,R4
   \   00000290   0xF44F 0x5180      MOV      R1,#+4096
   \   00000294   0xFB01 0x0218      MLS      R2,R1,R8,R0
   \   00000298   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000029A   0x....             LDR.N    R1,??DataTable3_11
   \   0000029C   0xF44F 0x5080      MOV      R0,#+4096
   \   000002A0   0xFB00 0xF008      MUL      R0,R0,R8
   \   000002A4   0x.... 0x....      BL       sflash_write_page
    334              }
    335            }
    336            
    337            if( flag == 1)
   \                     ??spi_flash_write_data_7:
   \   000002A8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002AC   0x2801             CMP      R0,#+1
   \   000002AE   0xD114             BNE.N    ??spi_flash_write_data_19
    338            {
    339              addr_write += len;
   \   000002B0   0x....             LDR.N    R0,??DataTable3_2
   \   000002B2   0x6800             LDR      R0,[R0, #+0]
   \   000002B4   0x1830             ADDS     R0,R6,R0
   \   000002B6   0x....             LDR.N    R1,??DataTable3_2
   \   000002B8   0x6008             STR      R0,[R1, #+0]
    340              
    341              if( addr_write >= (300*1000*sizeof(struct DATA_STRUCT)) )
   \   000002BA   0x....             LDR.N    R0,??DataTable3_2
   \   000002BC   0x6800             LDR      R0,[R0, #+0]
   \   000002BE   0x....             LDR.N    R1,??DataTable3_9  ;; 0xe4e1c0
   \   000002C0   0x4288             CMP      R0,R1
   \   000002C2   0xD302             BCC.N    ??spi_flash_write_data_20
    342              {
    343                addr_write = 0;
   \   000002C4   0x....             LDR.N    R0,??DataTable3_2
   \   000002C6   0x2100             MOVS     R1,#+0
   \   000002C8   0x6001             STR      R1,[R0, #+0]
    344              }
    345              
    346              /** 写指针更新 **/
    347              
    348              g_RtuConfig.addr_wr = addr_write;
   \                     ??spi_flash_write_data_20:
   \   000002CA   0x....             LDR.N    R0,??DataTable3
   \   000002CC   0x....             LDR.N    R1,??DataTable3_2
   \   000002CE   0x6809             LDR      R1,[R1, #+0]
   \   000002D0   0x6181             STR      R1,[R0, #+24]
    349              
    350              LPC_RTC->GPREG1 = addr_write;
   \   000002D2   0x....             LDR.N    R0,??DataTable3_12  ;; 0x40024048
   \   000002D4   0x....             LDR.N    R1,??DataTable3_2
   \   000002D6   0x6809             LDR      R1,[R1, #+0]
   \   000002D8   0x6001             STR      R1,[R0, #+0]
    351            }
    352            
    353            return 0;
   \                     ??spi_flash_write_data_19:
   \   000002DA   0x2000             MOVS     R0,#+0
   \   000002DC   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    354          }
    355          
    356          
    357          /************************** INTERNAL FUNCTIONS *******************************/
    358          
    359          /**
    360          @addr: 字节地址
    361          @len : 要 <= PAGE_SIZE
    362          **/
    363          

   \                                 In section .text, align 2, keep-with-next
    364          static uint8_t sflash_write_page(uint32_t addr,uint8_t * src_buf,uint16_t len)
    365          {
   \                     sflash_write_page:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    366            
    367            
    368            uint8_t  buf[4];
    369            
    370            
    371            if ( len == 0)
   \   0000000A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD101             BNE.N    ??sflash_write_page_0
    372            {
    373              return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE042             B.N      ??sflash_write_page_1
    374            }
    375            
    376            buf[0] = 0x06;
   \                     ??sflash_write_page_0:
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016   0xF88D 0x0000      STRB     R0,[SP, #+0]
    377            
    378            while( sflash_read_status() );
   \                     ??sflash_write_page_2:
   \   0000001A   0x.... 0x....      BL       sflash_read_status
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1FB             BNE.N    ??sflash_write_page_2
    379            
    380            /** 写使能 **/
    381            SFLASH_CS_LOW();
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x.... 0x....      BL       GPIO_OutputValue
    382            
    383            sflash_rt_bytes(buf,1,NULL,0);
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0xA800             ADD      R0,SP,#+0
   \   00000036   0x.... 0x....      BL       sflash_rt_bytes
    384            
    385            SFLASH_CS_HIGH();
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      BL       GPIO_OutputValue
    386            
    387            
    388            while( sflash_read_status() );
   \                     ??sflash_write_page_3:
   \   00000046   0x.... 0x....      BL       sflash_read_status
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1FB             BNE.N    ??sflash_write_page_3
    389            
    390            /** 写入 **/
    391            
    392            buf[0] = 0x02;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0xF88D 0x0000      STRB     R0,[SP, #+0]
    393            buf[1] = (addr >> 16) & 0xff;
   \   00000054   0x0C20             LSRS     R0,R4,#+16
   \   00000056   0xF88D 0x0001      STRB     R0,[SP, #+1]
    394            buf[2] = (addr >> 8) & 0xff;
   \   0000005A   0x0A20             LSRS     R0,R4,#+8
   \   0000005C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    395            buf[3] = addr & 0xff;
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xF88D 0x0003      STRB     R0,[SP, #+3]
    396            
    397            /** SSEL_LOW **/
    398            SFLASH_CS_LOW();
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000006C   0x2002             MOVS     R0,#+2
   \   0000006E   0x.... 0x....      BL       GPIO_OutputValue
    399            
    400            sflash_rt_bytes(buf,4,NULL,0);
   \   00000072   0x2300             MOVS     R3,#+0
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2104             MOVS     R1,#+4
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0x.... 0x....      BL       sflash_rt_bytes
    401            
    402            sflash_rt_bytes(src_buf,len,buf,0);
   \   0000007E   0x2300             MOVS     R3,#+0
   \   00000080   0xAA00             ADD      R2,SP,#+0
   \   00000082   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000084   0x0031             MOVS     R1,R6
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0x.... 0x....      BL       sflash_rt_bytes
    403            
    404            SFLASH_CS_HIGH();
   \   0000008C   0x2201             MOVS     R2,#+1
   \   0000008E   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0x.... 0x....      BL       GPIO_OutputValue
    405            
    406            return 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \                     ??sflash_write_page_1:
   \   0000009A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    407          }
    408          /**
    409          saddr : 扇区地址
    410          
    411          **/

   \                                 In section .text, align 2, keep-with-next
    412          static uint8_t sflash_write_sector(uint32_t saddr,uint8_t * src_buf)
    413          {
   \                     sflash_write_sector:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    414            uint32_t i;
    415            
    416            for( i = saddr * SECTOR_SIZE; i < (saddr+1)* SECTOR_SIZE;i+= PAGE_SIZE)
   \   00000006   0xF44F 0x5080      MOV      R0,#+4096
   \   0000000A   0xFB00 0xF004      MUL      R0,R0,R4
   \   0000000E   0x0006             MOVS     R6,R0
   \                     ??sflash_write_sector_0:
   \   00000010   0x1C60             ADDS     R0,R4,#+1
   \   00000012   0xF44F 0x5180      MOV      R1,#+4096
   \   00000016   0x4348             MULS     R0,R1,R0
   \   00000018   0x4286             CMP      R6,R0
   \   0000001A   0xD20A             BCS.N    ??sflash_write_sector_1
    417            {
    418              sflash_write_page(i,src_buf,PAGE_SIZE);
   \   0000001C   0xF44F 0x7280      MOV      R2,#+256
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0x.... 0x....      BL       sflash_write_page
    419              
    420              src_buf += PAGE_SIZE;
   \   00000028   0xF515 0x7580      ADDS     R5,R5,#+256
    421            }
   \   0000002C   0xF516 0x7680      ADDS     R6,R6,#+256
   \   00000030   0xE7EE             B.N      ??sflash_write_sector_0
    422            
    423            return 0;
   \                     ??sflash_write_sector_1:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    424          }
    425          
    426          /**
    427          返回值 : 1 -> 忙 0-> 空闲
    428          **/
    429          

   \                                 In section .text, align 2, keep-with-next
    430          static uint8_t sflash_read_status(void)
    431          {
   \                     sflash_read_status:
   \   00000000   0xB580             PUSH     {R7,LR}
    432            uint8_t cmd ;
    433            uint8_t  buf[2]={0};;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    434            
    435            
    436            /** SSEL_LOW **/
    437            cmd = 0x05;
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    438            SFLASH_CS_LOW();
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       GPIO_OutputValue
    439            
    440            sflash_rt_bytes(&cmd,1,buf,2);
   \   0000001A   0x2302             MOVS     R3,#+2
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000024   0x.... 0x....      BL       sflash_rt_bytes
    441            
    442            SFLASH_CS_HIGH();
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       GPIO_OutputValue
    443            
    444            /** TODO: 修改为中断及增加信号量 DMA的使用  **/
    445            
    446            return buf[1]&0x01;  
   \   00000034   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000038   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000003C   0xBD02             POP      {R1,PC}          ;; return
    447            
    448          }
    449          
    450          
    451          /**
    452          擦除扇区 4K字节对齐
    453          **/

   \                                 In section .text, align 2, keep-with-next
    454          static uint8_t sflash_ersse_sector(uint32_t addr)
    455          {
   \                     sflash_ersse_sector:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    456            uint8_t  buf[4];
    457            
    458            
    459            buf[0] = 0x06;
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    460            
    461            while( sflash_read_status() );
   \                     ??sflash_ersse_sector_0:
   \   0000000C   0x.... 0x....      BL       sflash_read_status
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD1FB             BNE.N    ??sflash_ersse_sector_0
    462            
    463            /** 写使能 **/
    464            SFLASH_CS_LOW();
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       GPIO_OutputValue
    465            
    466            sflash_rt_bytes(buf,1,NULL,0);
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x.... 0x....      BL       sflash_rt_bytes
    467            
    468            SFLASH_CS_HIGH();
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x.... 0x....      BL       GPIO_OutputValue
    469            
    470            while( sflash_read_status());
   \                     ??sflash_ersse_sector_1:
   \   00000038   0x.... 0x....      BL       sflash_read_status
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1FB             BNE.N    ??sflash_ersse_sector_1
    471            
    472            buf[0] = 0x20;
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
    473            buf[1] = (addr >> 16) & 0xff;
   \   00000046   0x0C20             LSRS     R0,R4,#+16
   \   00000048   0xF88D 0x0001      STRB     R0,[SP, #+1]
    474            buf[2] = (addr >> 8) & 0xff;
   \   0000004C   0x0A20             LSRS     R0,R4,#+8
   \   0000004E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    475            buf[3] = addr & 0xff;
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xF88D 0x0003      STRB     R0,[SP, #+3]
    476            
    477            /** SSEL_LOW **/
    478            SFLASH_CS_LOW();
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x.... 0x....      BL       GPIO_OutputValue
    479            
    480            sflash_rt_bytes(buf,4,NULL,0);
   \   00000064   0x2300             MOVS     R3,#+0
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2104             MOVS     R1,#+4
   \   0000006A   0xA800             ADD      R0,SP,#+0
   \   0000006C   0x.... 0x....      BL       sflash_rt_bytes
    481            
    482            SFLASH_CS_HIGH();
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0x.... 0x....      BL       GPIO_OutputValue
    483            
    484            /** TODO: 修改为中断及增加信号量 DMA的使用  **/
    485            
    486            return 0; 
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    487          }
    488          
    489          
    490          

   \                                 In section .text, align 2, keep-with-next
    491          static uint32_t sflash_rt_bytes(uint8_t * pbuf_t,uint32_t len_t,uint8_t * pbuf_r,uint32_t len_r)
    492          {
   \                     sflash_rt_bytes:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    493            uint32_t i ,j,k,len;
    494            
    495            k = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4683             MOV      R11,R0
    496            
    497            len = (len_r > len_t) ? len_r : len_t;
   \   00000010   0x42BD             CMP      R5,R7
   \   00000012   0xD201             BCS.N    ??sflash_rt_bytes_0
   \   00000014   0x46B8             MOV      R8,R7
   \   00000016   0xE000             B.N      ??sflash_rt_bytes_1
   \                     ??sflash_rt_bytes_0:
   \   00000018   0x46A8             MOV      R8,R5
    498            
    499            while (SFLASH_SSP->SR & SSP_SR_RNE)
   \                     ??sflash_rt_bytes_1:
   \   0000001A   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x0740             LSLS     R0,R0,#+29
   \   00000020   0xD503             BPL.N    ??sflash_rt_bytes_2
    500              SSP_ReceiveData(SFLASH_SSP);
   \   00000022   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   00000024   0x.... 0x....      BL       SSP_ReceiveData
   \   00000028   0xE7F7             B.N      ??sflash_rt_bytes_1
    501            
    502            for( i = 0,j = 0; i < len ; )
   \                     ??sflash_rt_bytes_2:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x4681             MOV      R9,R0
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x4682             MOV      R10,R0
   \                     ??sflash_rt_bytes_3:
   \   00000032   0x45C1             CMP      R9,R8
   \   00000034   0xD22A             BCS.N    ??sflash_rt_bytes_4
    503            {
    504              if ( (SFLASH_SSP->SR & (SSP_SR_TNF|SSP_SR_BSY)) == SSP_SR_TNF)
   \   00000036   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF010 0x0012      ANDS     R0,R0,#0x12
   \   0000003E   0x2802             CMP      R0,#+2
   \   00000040   0xD10E             BNE.N    ??sflash_rt_bytes_5
    505              {
    506                
    507                if( i < len_t)
   \   00000042   0x45A9             CMP      R9,R5
   \   00000044   0xD206             BCS.N    ??sflash_rt_bytes_6
    508                {
    509                  SSP_SendData(SFLASH_SSP, *(pbuf_t+i));
   \   00000046   0xF819 0x1004      LDRB     R1,[R9, R4]
   \   0000004A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   0000004E   0x.... 0x....      BL       SSP_SendData
   \   00000052   0xE003             B.N      ??sflash_rt_bytes_7
    510                }
    511                else
    512                {
    513                  SSP_SendData(SFLASH_SSP, 0x00);
   \                     ??sflash_rt_bytes_6:
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   00000058   0x.... 0x....      BL       SSP_SendData
    514                }
    515                
    516                i++;
   \                     ??sflash_rt_bytes_7:
   \   0000005C   0xF119 0x0901      ADDS     R9,R9,#+1
    517              }
    518              
    519              while (SFLASH_SSP->SR & SSP_SR_RNE)
   \                     ??sflash_rt_bytes_5:
   \   00000060   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x0740             LSLS     R0,R0,#+29
   \   00000066   0xD5E4             BPL.N    ??sflash_rt_bytes_3
    520              {
    521                if( j < len_r)
   \   00000068   0x45BA             CMP      R10,R7
   \   0000006A   0xD209             BCS.N    ??sflash_rt_bytes_8
    522                {
    523                  *(pbuf_r+j) = SSP_ReceiveData(SFLASH_SSP);
   \   0000006C   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   0000006E   0x.... 0x....      BL       SSP_ReceiveData
   \   00000072   0xF80A 0x0006      STRB     R0,[R10, R6]
    524                  j++;
   \   00000076   0xF11A 0x0A01      ADDS     R10,R10,#+1
    525                  k++;
   \   0000007A   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000007E   0xE7EF             B.N      ??sflash_rt_bytes_5
    526                }
    527                else
    528                {
    529                  SSP_ReceiveData(SFLASH_SSP);
   \                     ??sflash_rt_bytes_8:
   \   00000080   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   00000082   0x.... 0x....      BL       SSP_ReceiveData
    530                  k++;
   \   00000086   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000008A   0xE7E9             B.N      ??sflash_rt_bytes_5
    531                }
    532              }
    533            }
    534            
    535            while ( j < len_r )
   \                     ??sflash_rt_bytes_4:
   \   0000008C   0x45BA             CMP      R10,R7
   \   0000008E   0xD20F             BCS.N    ??sflash_rt_bytes_9
    536            {
    537              if( SFLASH_SSP->SR & SSP_SR_RNE )
   \   00000090   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x0740             LSLS     R0,R0,#+29
   \   00000096   0xD508             BPL.N    ??sflash_rt_bytes_10
    538              {
    539                *(pbuf_r+j) = SSP_ReceiveData(SFLASH_SSP);
   \   00000098   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   0000009A   0x.... 0x....      BL       SSP_ReceiveData
   \   0000009E   0xF80A 0x0006      STRB     R0,[R10, R6]
    540                j++;
   \   000000A2   0xF11A 0x0A01      ADDS     R10,R10,#+1
    541                k++;
   \   000000A6   0xF11B 0x0B01      ADDS     R11,R11,#+1
    542              }
    543              
    544              if( SFLASH_SSP->SR & SSP_SR_RNE )
   \                     ??sflash_rt_bytes_10:
   \   000000AA   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xE7ED             B.N      ??sflash_rt_bytes_4
    545              {
    546                
    547              }
    548            }
    549            
    550            while( k < len)
   \                     ??sflash_rt_bytes_9:
   \   000000B0   0x45C3             CMP      R11,R8
   \   000000B2   0xD209             BCS.N    ??sflash_rt_bytes_11
    551            {
    552              if( SFLASH_SSP->SR & SSP_SR_RNE )
   \   000000B4   0x....             LDR.N    R0,??DataTable3_7  ;; 0x4008800c
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0x0740             LSLS     R0,R0,#+29
   \   000000BA   0xD5F9             BPL.N    ??sflash_rt_bytes_9
    553              {
    554                SSP_ReceiveData(SFLASH_SSP);
   \   000000BC   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40088000
   \   000000BE   0x.... 0x....      BL       SSP_ReceiveData
    555                k++;
   \   000000C2   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000C6   0xE7F3             B.N      ??sflash_rt_bytes_9
    556              }
    557            }
    558            
    559            return j;
   \                     ??sflash_rt_bytes_11:
   \   000000C8   0x4650             MOV      R0,R10
   \   000000CA   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    560          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     g_RtuConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     addr_read

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     addr_write

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     curr_sector

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xFFFF0000         DC32     0xffff0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x004C4B40         DC32     0x4c4b40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40088000         DC32     0x40088000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4008800C         DC32     0x4008800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x40088020         DC32     0x40088020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x00E4E1C0         DC32     0xe4e1c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4002404C         DC32     0x4002404c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     sector_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40024048         DC32     0x40024048

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   memset
        16   -> __aeabi_memset
      16   sflash_ersse_sector
        16   -> GPIO_OutputValue
        16   -> sflash_read_status
        16   -> sflash_rt_bytes
       8   sflash_read_status
         8   -> GPIO_OutputValue
         8   -> sflash_rt_bytes
      40   sflash_rt_bytes
        40   -> SSP_ReceiveData
        40   -> SSP_SendData
      24   sflash_write_page
        24   -> GPIO_OutputValue
        24   -> sflash_read_status
        24   -> sflash_rt_bytes
      16   sflash_write_sector
        16   -> sflash_write_page
      32   spi_flash_init
        32   -> GPIO_OutputValue
        32   -> GPIO_SetDir
        32   -> PINSEL_ConfigPin
        32   -> PINSEL_SetFilter
        32   -> SSP_Cmd
        32   -> SSP_ConfigStructInit
        32   -> SSP_Init
        32   -> SSP_ReceiveData
      24   spi_flash_read_data
        24   -> GPIO_OutputValue
        24   -> sflash_read_status
        24   -> sflash_rt_bytes
      16   spi_flash_read_id
        16   -> GPIO_OutputValue
        16   -> sflash_rt_bytes
     264   spi_flash_test
       264   -> memset
       264   -> sflash_ersse_sector
       264   -> spi_flash_read_data
       264   -> spi_flash_write_data
      40   spi_flash_write_data
        40   -> sflash_ersse_sector
        40   -> sflash_write_page
        40   -> sflash_write_sector
        40   -> spi_flash_read_data


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant {0}>
       2  ?<Constant {0}>_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  addr_read
       4  addr_write
       4  curr_sector
      22  memset
    4096  sector_buf
     128  sflash_ersse_sector
      62  sflash_read_status
     206  sflash_rt_bytes
     156  sflash_write_page
      54  sflash_write_sector
     246  spi_flash_init
     194  spi_flash_read_data
      56  spi_flash_read_id
      64  spi_flash_test
     736  spi_flash_write_data

 
 4 108 bytes in section .bss
     6 bytes in section .rodata
 1 976 bytes in section .text
 
 1 954 bytes of CODE  memory (+ 22 bytes shared)
     6 bytes of CONST memory
 4 108 bytes of DATA  memory

Errors: none
Warnings: none
