###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      11/Mar/2017  15:34:24 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Cor #
#                    e\CM3\DeviceSupport\NXP\LPC177x_8x\system_LPC177x_8x.c   #
#    Command line =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Cor #
#                    e\CM3\DeviceSupport\NXP\LPC177x_8x\system_LPC177x_8x.c   #
#                    -lCN D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\proj #
#                    ect\iar\Debug\List\ -o D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\Debug\Obj\ --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5_2\arm\INC\c\DLib_Config_Full.h" -I                   #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pr #
#                    oject\iar\..\..\BSP\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RT #
#                    U\´úÂë\RTU_1.2\project\iar\..\..\BSP\ADC\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RTC\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´ #
#                    úÂë\RTU_1.2\project\iar\..\..\BSP\TILT\ -I               #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\RDLevel\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\BSP\RS232\ -I          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\BSP\OS-v2\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU #
#                    \´úÂë\RTU_1.2\project\iar\..\..\BSP\VibrationString\ -I  #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\  #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\ucos2\uCOS-II\Source\ -I                     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-LIB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\ucos2\uC-CPU\ -I      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\ucos2\uC-CPU\ARM-Cortex-M3\IAR\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\source\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Drivers\include\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\app\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\uC-Probe\Target\Plugins\uCOS-I #
#                    I\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\pro #
#                    ject\iar\..\..\uC-Probe\Target\Demos\Intro\Workspaces\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Demos\Intro\Source\ -I       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\Source\   #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\uC-Probe\Target\Communication\Generic\RS-232 #
#                    \Source\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1 #
#                    .2\project\iar\..\..\uC-Probe\Target\Communication\Gener #
#                    ic\RS-232\Ports\NXP\LPC17xx\ -I                          #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\uC-Probe\Target\Communication\Generic\RS-232\OS #
#                    \uCOS-II\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_ #
#                    1.2\project\iar\..\..\cmsis\Core\CM3\CoreSupport\ -I     #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\ -I D:\wangfan2\×ÀÃæ\receiverfirm\R #
#                    TU\´úÂë\RTU_1.2\project\iar\..\..\HuaceApp\DEVICE_BT\    #
#                    -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\projec #
#                    t\iar\..\..\HuaceApp\DEVICE_COM\ -I                      #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPRS\ -I                        #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_GPS\ -I                         #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\DEVICE_RADIO\ -I                       #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\iap\ -I D:\wangfan2\×ÀÃæ\receiverfirm\ #
#                    RTU\´úÂë\RTU_1.2\project\iar\..\..\FatFs\ -I             #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\USB\ -I D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\ #
#                    RTU_1.2\project\iar\..\..\bsp\spi_flash\ -I              #
#                    D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\..\..\HuaceApp\LED\ -On --use_c++_inline              #
#    List file    =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\List\system_LPC177x_8x.lst                      #
#    Object file  =  D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\project\i #
#                    ar\Debug\Obj\system_LPC177x_8x.o                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\wangfan2\×ÀÃæ\receiverfirm\RTU\´úÂë\RTU_1.2\cmsis\Core\CM3\DeviceSupport\NXP\LPC177x_8x\system_LPC177x_8x.c
      1          /**********************************************************************
      2          * $Id: system_LPC177x_8x.c 7485 2011-06-03 07:57:16Z sgg06786 $		system_LPC177x_8x.c			2011-06-02
      3          *//**
      4          * @file		system_LPC177x_8x.c
      5          * @brief	CMSIS Cortex-M3 Device Peripheral Access Layer Source File
      6          *          	for the NXP LPC177x_8x Device Series
      7          *
      8          *			ARM Limited (ARM) is supplying this software for use with
      9          *			Cortex-M processor based microcontrollers.  This file can be
     10          *			freely distributed within development tools that are supporting
     11          *			such ARM based processors.
     12          *
     13          * @version	1.0
     14          * @date		02. June. 2011
     15          * @author	NXP MCU SW Application Team
     16          *
     17          * Copyright(C) 2011, NXP Semiconductor
     18          * All rights reserved.
     19          *
     20          ***********************************************************************
     21          * Software that is described herein is for illustrative purposes only
     22          * which provides customers with programming information regarding the
     23          * products. This software is supplied "AS IS" without any warranties.
     24          * NXP Semiconductors assumes no responsibility or liability for the
     25          * use of the software, conveys no license or title under any patent,
     26          * copyright, or mask work right to the product. NXP Semiconductors
     27          * reserves the right to make changes in the software without
     28          * notification. NXP Semiconductors also make no representation or
     29          * warranty that such application will be suitable for the specified
     30          * use without further testing or modification.
     31          **********************************************************************/
     32          
     33          #include <stdint.h>
     34          #include "LPC177x_8x.h"
     35          #include "system_LPC177x_8x.h"
     36          
     37          /*
     38          //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
     39          */
     40          /*--------------------- Clock Configuration ----------------------------------
     41          //
     42          // <e> Clock Configuration
     43          //   <h> System Controls and Status Register (SCS)
     44          //     <o1.0>       EMC_SHIFT: EMC Shift enable
     45          //                     <0=> Static CS addresses match bus width; AD[1] = 0 for 32 bit, AD[0] = 0 for 16+32 bit
     46          //                     <1=> Static CS addresses start at LSB 0 regardless of memory width
     47          //     <o1.1>       EMC_RESET: EMC Reset disable
     48          //                     <0=> EMC will be reset by any chip reset
     49          //                     <1=> Portions of EMC will only be reset by POR or BOR
     50          //     <o1.2>       EMC_BURST: EMC Burst disable
     51          //     <o1.3>       MCIPWR_LEVEL: SD card interface signal SD_PWR Active Level selection
     52          //                     <0=> SD_PWR is active low
     53          //                     <1=> SD_PWR is active high
     54          //     <o1.4>       OSCRANGE: Main Oscillator Range Select
     55          //                     <0=>  1 MHz to 20 MHz
     56          //                     <1=> 15 MHz to 25 MHz
     57          //     <o1.5>       OSCEN: Main Oscillator enable
     58          //   </h>
     59          //
     60          //   <h> Clock Source Select Register (CLKSRCSEL)
     61          //     <o2.0>       CLKSRC: sysclk and PLL0 clock source selection
     62          //                     <0=> Internal RC oscillator
     63          //                     <1=> Main oscillator
     64          //   </h>
     65          //
     66          //   <e3> PLL0 Configuration (Main PLL)
     67          //     <h> PLL0 Configuration Register (PLL0CFG)
     68          //                     <i> PLL out clock = (F_cco / (2 * P))
     69          //                     <i> F_cco = (F_in * M * 2 * P)
     70          //                     <i> F_in  must be in the range of 1 MHz to 25 MHz
     71          //                     <i> F_cco must be in the range of 9.75 MHz to 160 MHz
     72          //       <o4.0..4>   MSEL: PLL Multiplier Selection
     73          //                     <i> M Value
     74          //                     <1-32><#-1>
     75          //       <o4.5..6> PSEL: PLL Divider Selection
     76          //                     <i> P Value
     77          //                     <0=> 1
     78          //                     <1=> 2
     79          //                     <2=> 4
     80          //                     <3=> 8
     81          //     </h>
     82          //   </e>
     83          //
     84          //   <e5> PLL1 Configuration (Alt PLL)
     85          //     <h> PLL1 Configuration Register (PLL1CFG)
     86          //                     <i> PLL out clock = (F_cco / (2 * P))
     87          //                     <i> F_cco = (F_in * M * 2 * P)
     88          //                     <i> F_in  must be in the range of 1 MHz to 25 MHz
     89          //                     <i> F_cco must be in the range of 9.75 MHz to 160 MHz
     90          //       <o6.0..4>   MSEL: PLL Multiplier Selection
     91          //                     <i> M Value
     92          //                     <1-32><#-1>
     93          //       <o6.5..6> PSEL: PLL Divider Selection
     94          //                     <i> P Value
     95          //                     <0=> 1
     96          //                     <1=> 2
     97          //                     <2=> 4
     98          //                     <3=> 8
     99          //     </h>
    100          //   </e>
    101          //
    102          //   <h> CPU Clock Selection Register (CCLKSEL)
    103          //     <o7.0..4>    CCLKDIV: CPU clock (CCLK) divider
    104          //                     <i> 0: The divider is turned off. No clock will be provided to the CPU
    105          //                     <i> n: The input clock is divided by n to produce the CPU clock
    106          //                     <0-31>
    107          //     <o7.8>       CCLKSEL: CPU clock divider input clock selection
    108          //                     <0=> sysclk clock
    109          //                     <1=> PLL0 clock
    110          //   </h>
    111          //
    112          //   <h> USB Clock Selection Register (USBCLKSEL)
    113          //     <o8.0..4>    USBDIV: USB clock (source PLL0) divider selection
    114          //                     <0=> USB clock off
    115          //                     <4=> PLL0 / 4 (PLL0 must be 192Mhz)
    116          //                     <6=> PLL0 / 6 (PLL0 must be 288Mhz)
    117          //     <o8.8..9>    USBSEL: USB clock divider input clock selection
    118          //                     <i> When CPU clock is selected, the USB can be accessed
    119          //                     <i> by software but cannot perform USB functions
    120          //                     <0=> CPU clock
    121          //                     <1=> PLL0 clock
    122          //                     <2=> PLL1 clock
    123          //   </h>
    124          //
    125          //   <h> EMC Clock Selection Register (EMCCLKSEL)
    126          //     <o9.0>       EMCDIV: EMC clock selection
    127          //                     <0=> CPU clock
    128          //                     <1=> CPU clock / 2
    129          //   </h>
    130          //
    131          //   <h> Peripheral Clock Selection Register (PCLKSEL)
    132          //     <o10.0..4>   PCLKDIV: APB Peripheral clock divider
    133          //                     <i> 0: The divider is turned off. No clock will be provided to APB peripherals
    134          //                     <i> n: The input clock is divided by n to produce the APB peripheral clock
    135          //                     <0-31>
    136          //   </h>
    137          //
    138          //   <h> Power Control for Peripherals Register (PCONP)
    139          //     <o11.0>      PCLCD: LCD controller power/clock enable
    140          //     <o11.1>      PCTIM0: Timer/Counter 0 power/clock enable
    141          //     <o11.2>      PCTIM1: Timer/Counter 1 power/clock enable
    142          //     <o11.3>      PCUART0: UART 0 power/clock enable
    143          //     <o11.4>      PCUART1: UART 1 power/clock enable
    144          //     <o11.5>      PCPWM0: PWM0 power/clock enable
    145          //     <o11.6>      PCPWM1: PWM1 power/clock enable
    146          //     <o11.7>      PCI2C0: I2C 0 interface power/clock enable
    147          //     <o11.8>      PCUART4: UART 4 power/clock enable
    148          //     <o11.9>      PCRTC: RTC and Event Recorder power/clock enable
    149          //     <o11.10>     PCSSP1: SSP 1 interface power/clock enable
    150          //     <o11.11>     PCEMC: External Memory Controller power/clock enable
    151          //     <o11.12>     PCADC: A/D converter power/clock enable
    152          //     <o11.13>     PCCAN1: CAN controller 1 power/clock enable
    153          //     <o11.14>     PCCAN2: CAN controller 2 power/clock enable
    154          //     <o11.15>     PCGPIO: IOCON, GPIO, and GPIO interrupts power/clock enable
    155          //     <o11.17>     PCMCPWM: Motor Control PWM power/clock enable
    156          //     <o11.18>     PCQEI: Quadrature encoder interface power/clock enable
    157          //     <o11.19>     PCI2C1: I2C 1 interface power/clock enable
    158          //     <o11.20>     PCSSP2: SSP 2 interface power/clock enable
    159          //     <o11.21>     PCSSP0: SSP 0 interface power/clock enable
    160          //     <o11.22>     PCTIM2: Timer 2 power/clock enable
    161          //     <o11.23>     PCTIM3: Timer 3 power/clock enable
    162          //     <o11.24>     PCUART2: UART 2 power/clock enable
    163          //     <o11.25>     PCUART3: UART 3 power/clock enable
    164          //     <o11.26>     PCI2C2: I2C 2 interface power/clock enable
    165          //     <o11.27>     PCI2S: I2S interface power/clock enable
    166          //     <o11.28>     PCSDC: SD Card interface power/clock enable
    167          //     <o11.29>     PCGPDMA: GPDMA function power/clock enable
    168          //     <o11.30>     PCENET: Ethernet block power/clock enable
    169          //     <o11.31>     PCUSB: USB interface power/clock enable
    170          //   </h>
    171          //
    172          //   <h> Clock Output Configuration Register (CLKOUTCFG)
    173          //     <o12.0..3>   CLKOUTSEL: Clock Source for CLKOUT Selection
    174          //                     <0=> CPU clock
    175          //                     <1=> Main Oscillator
    176          //                     <2=> Internal RC Oscillator
    177          //                     <3=> USB clock
    178          //                     <4=> RTC Oscillator
    179          //                     <5=> unused
    180          //                     <6=> Watchdog Oscillator
    181          //     <o12.4..7>   CLKOUTDIV: Output Clock Divider
    182          //                     <1-16><#-1>
    183          //     <o12.8>      CLKOUT_EN: CLKOUT enable
    184          //   </h>
    185          //
    186          // </e>
    187          */
    188          #define CLOCK_SETUP           1
    189          #define SCS_Val               0x00000021
    190          #define CLKSRCSEL_Val         0x00000001
    191          #define PLL0_SETUP            1
    192          #define PLL0CFG_Val           0x00000009 //xf 12*x+1 9:120M  7:96M
    193          #define PLL1_SETUP            1
    194          #define PLL1CFG_Val           0x00000023
    195          #define CCLKSEL_Val           (0x00000001|(1<<8))
    196          #define USBCLK_SETUP		  1
    197          #define USBCLKSEL_Val         (0x00000001|(0x02<<8))
    198          #define EMCCLKSEL_Val         0x00000001
    199          #define PCLKSEL_Val           0x00000002
    200          #define PCONP_Val             0x042887DE
    201          #define CLKOUTCFG_Val         0x00000100
    202          
    203          
    204          /*--------------------- Flash Accelerator Configuration ----------------------
    205          //
    206          // <e> Flash Accelerator Configuration
    207          //   <o1.12..15> FLASHTIM: Flash Access Time
    208          //               <0=> 1 CPU clock (for CPU clock up to 20 MHz)
    209          //               <1=> 2 CPU clocks (for CPU clock up to 40 MHz)
    210          //               <2=> 3 CPU clocks (for CPU clock up to 60 MHz)
    211          //               <3=> 4 CPU clocks (for CPU clock up to 80 MHz)
    212          //               <4=> 5 CPU clocks (for CPU clock up to 100 MHz)
    213          //               <5=> 6 CPU clocks (for any CPU clock)
    214          // </e>
    215          */
    216          #define FLASH_SETUP           1
    217          #define FLASHCFG_Val          0x00005000
    218          
    219          /*----------------------------------------------------------------------------
    220            Check the register settings
    221           *----------------------------------------------------------------------------*/
    222          #define CHECK_RANGE(val, min, max)                ((val < min) || (val > max))
    223          #define CHECK_RSVD(val, mask)                     (val & mask)
    224          
    225          /* Clock Configuration -------------------------------------------------------*/
    226          #if (CHECK_RSVD((SCS_Val),       ~0x0000003F))
    227             #error "SCS: Invalid values of reserved bits!"
    228          #endif
    229          
    230          #if (CHECK_RANGE((CLKSRCSEL_Val), 0, 1))
    231             #error "CLKSRCSEL: Value out of range!"
    232          #endif
    233          
    234          #if (CHECK_RSVD((PLL0CFG_Val),   ~0x0000007F))
    235             #error "PLL0CFG: Invalid values of reserved bits!"
    236          #endif
    237          
    238          #if (CHECK_RSVD((PLL1CFG_Val),   ~0x0000007F))
    239             #error "PLL1CFG: Invalid values of reserved bits!"
    240          #endif
    241          
    242          #if (CHECK_RSVD((CCLKSEL_Val),   ~0x0000011F))
    243             #error "CCLKSEL: Invalid values of reserved bits!"
    244          #endif
    245          
    246          #if (CHECK_RSVD((USBCLKSEL_Val), ~0x0000031F))
    247             #error "USBCLKSEL: Invalid values of reserved bits!"
    248          #endif
    249          
    250          #if (CHECK_RSVD((EMCCLKSEL_Val), ~0x00000001))
    251             #error "EMCCLKSEL: Invalid values of reserved bits!"
    252          #endif
    253          
    254          #if (CHECK_RSVD((PCLKSEL_Val), ~0x0000001F))
    255             #error "PCLKSEL: Invalid values of reserved bits!"
    256          #endif
    257          
    258          #if (CHECK_RSVD((PCONP_Val), ~0xFFFEFFFF))
    259             #error "PCONP: Invalid values of reserved bits!"
    260          #endif
    261          
    262          #if (CHECK_RSVD((CLKOUTCFG_Val), ~0x000001FF))
    263             #error "CLKOUTCFG: Invalid values of reserved bits!"
    264          #endif
    265          
    266          /* Flash Accelerator Configuration -------------------------------------------*/
    267          #if (CHECK_RSVD((FLASHCFG_Val), ~0x0000F000))
    268             #warning "FLASHCFG: Invalid values of reserved bits!"
    269          #endif
    270          
    271          
    272          /*----------------------------------------------------------------------------
    273            DEFINES
    274           *----------------------------------------------------------------------------*/
    275          /* pll_out_clk = F_cco / (2 ?P)
    276             F_cco = pll_in_clk ?M ?2 ?P */
    277          #define __M                   ((PLL0CFG_Val & 0x1F) + 1)
    278          #define __PLL0_CLK(__F_IN)    (__F_IN * __M)
    279          #define __CCLK_DIV            (CCLKSEL_Val & 0x1F)
    280          #define __PCLK_DIV			  (PCLKSEL_Val & 0x1F)
    281          #define __ECLK_DIV			  ((EMCCLKSEL_Val & 0x01) + 1)
    282          
    283          /* Determine core clock frequency according to settings */
    284          #if (CLOCK_SETUP)                       /* Clock Setup                        */
    285          
    286            #if ((CLKSRCSEL_Val & 0x01) == 1) && ((SCS_Val & 0x20)== 0)
    287             #error "Main Oscillator is selected as clock source but is not enabled!"
    288            #endif
    289          
    290            #if ((CCLKSEL_Val & 0x100) == 0x100) && (PLL0_SETUP == 0)
    291             #error "Main PLL is selected as clock source but is not enabled!"
    292            #endif
    293          
    294            #if ((CCLKSEL_Val & 0x100) == 0)      /* cclk = sysclk */
    295              #if ((CLKSRCSEL_Val & 0x01) == 0)   /* sysclk = irc_clk */
    296                  #define __CORE_CLK (IRC_OSC / __CCLK_DIV)
    297          		#define __PER_CLK  (IRC_OSC/  __PCLK_DIV)
    298                  #define __EMC_CLK  (IRC_OSC/  __ECLK_DIV)
    299              #else                               /* sysclk = osc_clk */
    300                  #define __CORE_CLK (OSC_CLK / __CCLK_DIV)
    301                  #define __PER_CLK  (OSC_CLK/  __PCLK_DIV)
    302                  #define __EMC_CLK  (OSC_CLK/  __ECLK_DIV)
    303              #endif
    304            #else                                 /* cclk = pll_clk */
    305              #if ((CLKSRCSEL_Val & 0x01) == 0)   /* sysclk = irc_clk */
    306                  #define __CORE_CLK (__PLL0_CLK(IRC_OSC) / __CCLK_DIV)
    307                  #define __PER_CLK  (__PLL0_CLK(IRC_OSC) / __PCLK_DIV)
    308                  #define __EMC_CLK  (__PLL0_CLK(IRC_OSC) / __ECLK_DIV)
    309              #else                               /* sysclk = osc_clk */
    310                  #define __CORE_CLK (__PLL0_CLK(OSC_CLK) / __CCLK_DIV)
    311                  #define __PER_CLK  (__PLL0_CLK(OSC_CLK) / __PCLK_DIV)
    312          		#define __EMC_CLK  (__PLL0_CLK(OSC_CLK) / __ECLK_DIV)
    313              #endif
    314            #endif
    315          
    316          #else
    317                  #define __CORE_CLK (IRC_OSC)
    318                  #define __PER_CLK  (IRC_OSC)
    319                  #define __EMC_CLK  (IRC_OSC)
    320          #endif
    321          
    322          /*----------------------------------------------------------------------------
    323            Clock Variable definitions
    324           *----------------------------------------------------------------------------*/

   \                                 In section .data, align 4
    325          uint32_t SystemCoreClock = __CORE_CLK;/*!< System Clock Frequency (Core Clock)*/
   \                     SystemCoreClock:
   \   00000000   0x07270E00         DC32 120000000

   \                                 In section .data, align 4
    326          uint32_t PeripheralClock = __PER_CLK; /*!< Peripheral Clock Frequency (Pclk)  */
   \                     PeripheralClock:
   \   00000000   0x03938700         DC32 60000000

   \                                 In section .data, align 4
    327          uint32_t EMCClock		 = __EMC_CLK; /*!< EMC Clock Frequency 				  */
   \                     EMCClock:
   \   00000000   0x03938700         DC32 60000000

   \                                 In section .data, align 4
    328          uint32_t USBClock 		 = (48000000UL);		  /*!< USB Clock Frequency - this value will
   \                     USBClock:
   \   00000000   0x02DC6C00         DC32 48000000
    329          									be updated after call SystemCoreClockUpdate, should be 48MHz*/
    330          
    331          
    332          /*----------------------------------------------------------------------------
    333            Clock functions
    334           *----------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    335          void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
    336          {
   \                     SystemCoreClockUpdate:
   \   00000000   0xB430             PUSH     {R4,R5}
    337              uint32_t cclksel,pclksel,emcclksel,usbclksel;
    338            /* Determine clock frequency according to clock register values             */
    339            if ((LPC_SC->CCLKSEL &0x100) == 0) {            /* cclk = sysclk    */
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable1  ;; 0x400fc104
   \   00000006   0x6824             LDR      R4,[R4, #+0]
   \   00000008   0x05E4             LSLS     R4,R4,#+23
   \   0000000A   0xD44C             BMI.N    ??SystemCoreClockUpdate_0
    340              if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable1_1  ;; 0x400fc10c
   \   00000010   0x6824             LDR      R4,[R4, #+0]
   \   00000012   0x07E4             LSLS     R4,R4,#+31
   \   00000014   0xD41C             BMI.N    ??SystemCoreClockUpdate_1
    341                    SystemCoreClock = (IRC_OSC / (LPC_SC->CCLKSEL & 0x1F));
   \   00000016   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   00000018   0x....             LDR.N    R5,??DataTable1  ;; 0x400fc104
   \   0000001A   0x682D             LDR      R5,[R5, #+0]
   \   0000001C   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   00000020   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000024   0x....             LDR.N    R5,??DataTable1_3
   \   00000026   0x602C             STR      R4,[R5, #+0]
    342                    PeripheralClock = (IRC_OSC / (LPC_SC->PCLKSEL & 0x1F));
   \   00000028   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   0000002A   0x....             LDR.N    R5,??DataTable1_4  ;; 0x400fc1a8
   \   0000002C   0x682D             LDR      R5,[R5, #+0]
   \   0000002E   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   00000032   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000036   0x....             LDR.N    R5,??DataTable1_5
   \   00000038   0x602C             STR      R4,[R5, #+0]
    343                    EMCClock        = (IRC_OSC / ((LPC_SC->EMCCLKSEL & 0x01)+1));
   \   0000003A   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   0000003C   0x....             LDR.N    R5,??DataTable1_6  ;; 0x400fc100
   \   0000003E   0x682D             LDR      R5,[R5, #+0]
   \   00000040   0xF015 0x0501      ANDS     R5,R5,#0x1
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000004A   0x....             LDR.N    R5,??DataTable1_7
   \   0000004C   0x602C             STR      R4,[R5, #+0]
   \   0000004E   0xE0AD             B.N      ??SystemCoreClockUpdate_2
    344              }
    345              else {                                        /* sysclk = osc_clk */
    346                if ((LPC_SC->SCS & 0x40) == 0) {
   \                     ??SystemCoreClockUpdate_1:
   \   00000050   0x....             LDR.N    R4,??DataTable1_8  ;; 0x400fc1a0
   \   00000052   0x6824             LDR      R4,[R4, #+0]
   \   00000054   0x0664             LSLS     R4,R4,#+25
   \   00000056   0xD409             BMI.N    ??SystemCoreClockUpdate_3
    347                    SystemCoreClock = 0;                      /* this should never happen! */
   \   00000058   0x....             LDR.N    R4,??DataTable1_3
   \   0000005A   0x2500             MOVS     R5,#+0
   \   0000005C   0x6025             STR      R5,[R4, #+0]
    348                    PeripheralClock = 0;
   \   0000005E   0x....             LDR.N    R4,??DataTable1_5
   \   00000060   0x2500             MOVS     R5,#+0
   \   00000062   0x6025             STR      R5,[R4, #+0]
    349                    EMCClock        = 0;
   \   00000064   0x....             LDR.N    R4,??DataTable1_7
   \   00000066   0x2500             MOVS     R5,#+0
   \   00000068   0x6025             STR      R5,[R4, #+0]
   \   0000006A   0xE09F             B.N      ??SystemCoreClockUpdate_2
    350                }
    351                else {
    352                    SystemCoreClock = (OSC_CLK / (LPC_SC->CCLKSEL & 0x1F));
   \                     ??SystemCoreClockUpdate_3:
   \   0000006C   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   0000006E   0x....             LDR.N    R5,??DataTable1  ;; 0x400fc104
   \   00000070   0x682D             LDR      R5,[R5, #+0]
   \   00000072   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   00000076   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000007A   0x....             LDR.N    R5,??DataTable1_3
   \   0000007C   0x602C             STR      R4,[R5, #+0]
    353                    PeripheralClock = (OSC_CLK / (LPC_SC->PCLKSEL & 0x1F));
   \   0000007E   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   00000080   0x....             LDR.N    R5,??DataTable1_4  ;; 0x400fc1a8
   \   00000082   0x682D             LDR      R5,[R5, #+0]
   \   00000084   0xF015 0x051F      ANDS     R5,R5,#0x1F
   \   00000088   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000008C   0x....             LDR.N    R5,??DataTable1_5
   \   0000008E   0x602C             STR      R4,[R5, #+0]
    354                    EMCClock        = (OSC_CLK / ((LPC_SC->EMCCLKSEL & 0x01)+1));
   \   00000090   0x....             LDR.N    R4,??DataTable1_2  ;; 0xb71b00
   \   00000092   0x....             LDR.N    R5,??DataTable1_6  ;; 0x400fc100
   \   00000094   0x682D             LDR      R5,[R5, #+0]
   \   00000096   0xF015 0x0501      ANDS     R5,R5,#0x1
   \   0000009A   0x1C6D             ADDS     R5,R5,#+1
   \   0000009C   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   000000A0   0x....             LDR.N    R5,??DataTable1_7
   \   000000A2   0x602C             STR      R4,[R5, #+0]
   \   000000A4   0xE082             B.N      ??SystemCoreClockUpdate_2
    355                }
    356              }
    357            }
    358            else {                                          /* cclk = pll_clk */
    359              if ((LPC_SC->PLL0STAT & 0x100) == 0) {        /* PLL0 not enabled */
   \                     ??SystemCoreClockUpdate_0:
   \   000000A6   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   000000A8   0x6824             LDR      R4,[R4, #+0]
   \   000000AA   0x05E4             LSLS     R4,R4,#+23
   \   000000AC   0xD409             BMI.N    ??SystemCoreClockUpdate_4
    360                    SystemCoreClock = 0;                      /* this should never happen! */
   \   000000AE   0x....             LDR.N    R4,??DataTable1_3
   \   000000B0   0x2500             MOVS     R5,#+0
   \   000000B2   0x6025             STR      R5,[R4, #+0]
    361                    PeripheralClock = 0;
   \   000000B4   0x....             LDR.N    R4,??DataTable1_5
   \   000000B6   0x2500             MOVS     R5,#+0
   \   000000B8   0x6025             STR      R5,[R4, #+0]
    362                    EMCClock 		  = 0;
   \   000000BA   0x....             LDR.N    R4,??DataTable1_7
   \   000000BC   0x2500             MOVS     R5,#+0
   \   000000BE   0x6025             STR      R5,[R4, #+0]
   \   000000C0   0xE074             B.N      ??SystemCoreClockUpdate_2
    363              }
    364              else {
    365                if ((LPC_SC->CLKSRCSEL & 0x01) == 0) {    /* sysclk = irc_clk */
   \                     ??SystemCoreClockUpdate_4:
   \   000000C2   0x....             LDR.N    R4,??DataTable1_1  ;; 0x400fc10c
   \   000000C4   0x6824             LDR      R4,[R4, #+0]
   \   000000C6   0x07E4             LSLS     R4,R4,#+31
   \   000000C8   0xD431             BMI.N    ??SystemCoreClockUpdate_5
    366                    cclksel = LPC_SC->CCLKSEL;//add by xxw 20140815 Á½¸övolatileÀàÐÍ±äÁ¿ÊÇ²»ÄÜÍ¬Ê±³öÏÖÔÚÒ»¸öµÈÊ½ÀïµÄ
   \   000000CA   0x....             LDR.N    R4,??DataTable1  ;; 0x400fc104
   \   000000CC   0x6824             LDR      R4,[R4, #+0]
   \   000000CE   0x0020             MOVS     R0,R4
    367                    pclksel = LPC_SC->PCLKSEL;
   \   000000D0   0x....             LDR.N    R4,??DataTable1_4  ;; 0x400fc1a8
   \   000000D2   0x6824             LDR      R4,[R4, #+0]
   \   000000D4   0x0021             MOVS     R1,R4
    368                    emcclksel = LPC_SC->EMCCLKSEL;
   \   000000D6   0x....             LDR.N    R4,??DataTable1_6  ;; 0x400fc100
   \   000000D8   0x6824             LDR      R4,[R4, #+0]
   \   000000DA   0x0022             MOVS     R2,R4
    369                    SystemCoreClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (cclksel & 0x1F));
   \   000000DC   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   000000DE   0x6824             LDR      R4,[R4, #+0]
   \   000000E0   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   000000E4   0x1C64             ADDS     R4,R4,#+1
   \   000000E6   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   000000E8   0x436C             MULS     R4,R5,R4
   \   000000EA   0xF010 0x051F      ANDS     R5,R0,#0x1F
   \   000000EE   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   000000F2   0x....             LDR.N    R5,??DataTable1_3
   \   000000F4   0x602C             STR      R4,[R5, #+0]
    370                    PeripheralClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (pclksel & 0x1F));
   \   000000F6   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   000000F8   0x6824             LDR      R4,[R4, #+0]
   \   000000FA   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   000000FE   0x1C64             ADDS     R4,R4,#+1
   \   00000100   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   00000102   0x436C             MULS     R4,R5,R4
   \   00000104   0xF011 0x051F      ANDS     R5,R1,#0x1F
   \   00000108   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000010C   0x....             LDR.N    R5,??DataTable1_5
   \   0000010E   0x602C             STR      R4,[R5, #+0]
    371                    EMCClock        = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1) / ((emcclksel & 0x01)+1));
   \   00000110   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   00000112   0x6824             LDR      R4,[R4, #+0]
   \   00000114   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000118   0x1C64             ADDS     R4,R4,#+1
   \   0000011A   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   0000011C   0x436C             MULS     R4,R5,R4
   \   0000011E   0xF012 0x0501      ANDS     R5,R2,#0x1
   \   00000122   0x1C6D             ADDS     R5,R5,#+1
   \   00000124   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000128   0x....             LDR.N    R5,??DataTable1_7
   \   0000012A   0x602C             STR      R4,[R5, #+0]
   \   0000012C   0xE03E             B.N      ??SystemCoreClockUpdate_2
    372                }
    373                else {                                        /* sysclk = osc_clk */
    374                  if ((LPC_SC->SCS & 0x40) == 0) {
   \                     ??SystemCoreClockUpdate_5:
   \   0000012E   0x....             LDR.N    R4,??DataTable1_8  ;; 0x400fc1a0
   \   00000130   0x6824             LDR      R4,[R4, #+0]
   \   00000132   0x0664             LSLS     R4,R4,#+25
   \   00000134   0xD409             BMI.N    ??SystemCoreClockUpdate_6
    375                    SystemCoreClock = 0;                      /* this should never happen! */
   \   00000136   0x....             LDR.N    R4,??DataTable1_3
   \   00000138   0x2500             MOVS     R5,#+0
   \   0000013A   0x6025             STR      R5,[R4, #+0]
    376                    PeripheralClock = 0;
   \   0000013C   0x....             LDR.N    R4,??DataTable1_5
   \   0000013E   0x2500             MOVS     R5,#+0
   \   00000140   0x6025             STR      R5,[R4, #+0]
    377                    EMCClock 		  = 0;
   \   00000142   0x....             LDR.N    R4,??DataTable1_7
   \   00000144   0x2500             MOVS     R5,#+0
   \   00000146   0x6025             STR      R5,[R4, #+0]
   \   00000148   0xE030             B.N      ??SystemCoreClockUpdate_2
    378                  }
    379                  else {
    380                    cclksel = LPC_SC->CCLKSEL;
   \                     ??SystemCoreClockUpdate_6:
   \   0000014A   0x....             LDR.N    R4,??DataTable1  ;; 0x400fc104
   \   0000014C   0x6824             LDR      R4,[R4, #+0]
   \   0000014E   0x0020             MOVS     R0,R4
    381                    pclksel = LPC_SC->PCLKSEL;
   \   00000150   0x....             LDR.N    R4,??DataTable1_4  ;; 0x400fc1a8
   \   00000152   0x6824             LDR      R4,[R4, #+0]
   \   00000154   0x0021             MOVS     R1,R4
    382                    emcclksel = LPC_SC->EMCCLKSEL;
   \   00000156   0x....             LDR.N    R4,??DataTable1_6  ;; 0x400fc100
   \   00000158   0x6824             LDR      R4,[R4, #+0]
   \   0000015A   0x0022             MOVS     R2,R4
    383                    SystemCoreClock = (OSC_CLK * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (cclksel & 0x1F));
   \   0000015C   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   0000015E   0x6824             LDR      R4,[R4, #+0]
   \   00000160   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000164   0x1C64             ADDS     R4,R4,#+1
   \   00000166   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   00000168   0x436C             MULS     R4,R5,R4
   \   0000016A   0xF010 0x051F      ANDS     R5,R0,#0x1F
   \   0000016E   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000172   0x....             LDR.N    R5,??DataTable1_3
   \   00000174   0x602C             STR      R4,[R5, #+0]
    384                    PeripheralClock = (OSC_CLK * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (pclksel & 0x1F));
   \   00000176   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   00000178   0x6824             LDR      R4,[R4, #+0]
   \   0000017A   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   0000017E   0x1C64             ADDS     R4,R4,#+1
   \   00000180   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   00000182   0x436C             MULS     R4,R5,R4
   \   00000184   0xF011 0x051F      ANDS     R5,R1,#0x1F
   \   00000188   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   0000018C   0x....             LDR.N    R5,??DataTable1_5
   \   0000018E   0x602C             STR      R4,[R5, #+0]
    385                    EMCClock        = (OSC_CLK * ((LPC_SC->PLL0STAT & 0x1F) + 1) / ((emcclksel & 0x01)+1));
   \   00000190   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   00000192   0x6824             LDR      R4,[R4, #+0]
   \   00000194   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000198   0x1C64             ADDS     R4,R4,#+1
   \   0000019A   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   0000019C   0x436C             MULS     R4,R5,R4
   \   0000019E   0xF012 0x0501      ANDS     R5,R2,#0x1
   \   000001A2   0x1C6D             ADDS     R5,R5,#+1
   \   000001A4   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   000001A8   0x....             LDR.N    R5,??DataTable1_7
   \   000001AA   0x602C             STR      R4,[R5, #+0]
    386                  }
    387                }
    388              }
    389            }
    390            /* ---update USBClock------------------*/
    391            if(LPC_SC->USBCLKSEL & (0x01<<8))//Use PLL0 as the input to the USB clock divider
   \                     ??SystemCoreClockUpdate_2:
   \   000001AC   0x....             LDR.N    R4,??DataTable1_10  ;; 0x400fc108
   \   000001AE   0x6824             LDR      R4,[R4, #+0]
   \   000001B0   0x05E4             LSLS     R4,R4,#+23
   \   000001B2   0xD535             BPL.N    ??SystemCoreClockUpdate_7
    392            {
    393          	  switch (LPC_SC->USBCLKSEL & 0x1F)
   \   000001B4   0x....             LDR.N    R4,??DataTable1_10  ;; 0x400fc108
   \   000001B6   0x6824             LDR      R4,[R4, #+0]
   \   000001B8   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   000001BC   0x2C00             CMP      R4,#+0
   \   000001BE   0xD004             BEQ.N    ??SystemCoreClockUpdate_8
   \   000001C0   0x2C04             CMP      R4,#+4
   \   000001C2   0xD006             BEQ.N    ??SystemCoreClockUpdate_9
   \   000001C4   0x2C06             CMP      R4,#+6
   \   000001C6   0xD004             BEQ.N    ??SystemCoreClockUpdate_9
   \   000001C8   0xE026             B.N      ??SystemCoreClockUpdate_10
    394          	  {
    395          	  case 0:
    396          		  USBClock = 0; //no clock will be provided to the USB subsystem
   \                     ??SystemCoreClockUpdate_8:
   \   000001CA   0x....             LDR.N    R4,??DataTable1_11
   \   000001CC   0x2500             MOVS     R5,#+0
   \   000001CE   0x6025             STR      R5,[R4, #+0]
    397          		  break;
   \   000001D0   0xE045             B.N      ??SystemCoreClockUpdate_11
    398          	  case 4:
    399          	  case 6:
    400                    usbclksel = LPC_SC->USBCLKSEL;
   \                     ??SystemCoreClockUpdate_9:
   \   000001D2   0x....             LDR.N    R4,??DataTable1_10  ;; 0x400fc108
   \   000001D4   0x6824             LDR      R4,[R4, #+0]
   \   000001D6   0x0023             MOVS     R3,R4
    401          		  if(LPC_SC->CLKSRCSEL & 0x01)	//pll_clk_in = main_osc
   \   000001D8   0x....             LDR.N    R4,??DataTable1_1  ;; 0x400fc10c
   \   000001DA   0x6824             LDR      R4,[R4, #+0]
   \   000001DC   0x07E4             LSLS     R4,R4,#+31
   \   000001DE   0xD50D             BPL.N    ??SystemCoreClockUpdate_12
    402          			  USBClock = (OSC_CLK * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (usbclksel & 0x1F));
   \   000001E0   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   000001E2   0x6824             LDR      R4,[R4, #+0]
   \   000001E4   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   000001E8   0x1C64             ADDS     R4,R4,#+1
   \   000001EA   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   000001EC   0x436C             MULS     R4,R5,R4
   \   000001EE   0xF013 0x051F      ANDS     R5,R3,#0x1F
   \   000001F2   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   000001F6   0x....             LDR.N    R5,??DataTable1_11
   \   000001F8   0x602C             STR      R4,[R5, #+0]
   \   000001FA   0xE00C             B.N      ??SystemCoreClockUpdate_13
    403          		  else //pll_clk_in = irc_clk
    404          			  USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1) / (usbclksel & 0x1F));
   \                     ??SystemCoreClockUpdate_12:
   \   000001FC   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   000001FE   0x6824             LDR      R4,[R4, #+0]
   \   00000200   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000204   0x1C64             ADDS     R4,R4,#+1
   \   00000206   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   00000208   0x436C             MULS     R4,R5,R4
   \   0000020A   0xF013 0x051F      ANDS     R5,R3,#0x1F
   \   0000020E   0xFBB4 0xF4F5      UDIV     R4,R4,R5
   \   00000212   0x....             LDR.N    R5,??DataTable1_11
   \   00000214   0x602C             STR      R4,[R5, #+0]
    405          		  break;
   \                     ??SystemCoreClockUpdate_13:
   \   00000216   0xE022             B.N      ??SystemCoreClockUpdate_11
    406          	  default:
    407          		  USBClock = 0;  /* this should never happen! */
   \                     ??SystemCoreClockUpdate_10:
   \   00000218   0x....             LDR.N    R4,??DataTable1_11
   \   0000021A   0x2500             MOVS     R5,#+0
   \   0000021C   0x6025             STR      R5,[R4, #+0]
   \   0000021E   0xE01E             B.N      ??SystemCoreClockUpdate_11
    408          	  }
    409            }
    410            else if(LPC_SC->USBCLKSEL & (0x02<<8))//usb_input_clk = alt_pll (pll1)
   \                     ??SystemCoreClockUpdate_7:
   \   00000220   0x....             LDR.N    R4,??DataTable1_10  ;; 0x400fc108
   \   00000222   0x6824             LDR      R4,[R4, #+0]
   \   00000224   0x05A4             LSLS     R4,R4,#+22
   \   00000226   0xD517             BPL.N    ??SystemCoreClockUpdate_14
    411            {
    412          	  if(LPC_SC->CLKSRCSEL & 0x01)	//pll1_clk_in = main_osc
   \   00000228   0x....             LDR.N    R4,??DataTable1_1  ;; 0x400fc10c
   \   0000022A   0x6824             LDR      R4,[R4, #+0]
   \   0000022C   0x07E4             LSLS     R4,R4,#+31
   \   0000022E   0xD509             BPL.N    ??SystemCoreClockUpdate_15
    413          	  		USBClock = (OSC_CLK * ((LPC_SC->PLL1STAT & 0x1F) + 1));
   \   00000230   0x....             LDR.N    R4,??DataTable1_12  ;; 0x400fc0a8
   \   00000232   0x6824             LDR      R4,[R4, #+0]
   \   00000234   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   00000238   0x1C64             ADDS     R4,R4,#+1
   \   0000023A   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   0000023C   0x436C             MULS     R4,R5,R4
   \   0000023E   0x....             LDR.N    R5,??DataTable1_11
   \   00000240   0x602C             STR      R4,[R5, #+0]
   \   00000242   0xE00C             B.N      ??SystemCoreClockUpdate_11
    414          	  else //pll1_clk_in = irc_clk
    415          	  		USBClock = (IRC_OSC * ((LPC_SC->PLL0STAT & 0x1F) + 1));
   \                     ??SystemCoreClockUpdate_15:
   \   00000244   0x....             LDR.N    R4,??DataTable1_9  ;; 0x400fc088
   \   00000246   0x6824             LDR      R4,[R4, #+0]
   \   00000248   0xF014 0x041F      ANDS     R4,R4,#0x1F
   \   0000024C   0x1C64             ADDS     R4,R4,#+1
   \   0000024E   0x....             LDR.N    R5,??DataTable1_2  ;; 0xb71b00
   \   00000250   0x436C             MULS     R4,R5,R4
   \   00000252   0x....             LDR.N    R5,??DataTable1_11
   \   00000254   0x602C             STR      R4,[R5, #+0]
   \   00000256   0xE002             B.N      ??SystemCoreClockUpdate_11
    416            }
    417            else
    418          	  USBClock = 0; /* this should never happen! */
   \                     ??SystemCoreClockUpdate_14:
   \   00000258   0x....             LDR.N    R4,??DataTable1_11
   \   0000025A   0x2500             MOVS     R5,#+0
   \   0000025C   0x6025             STR      R5,[R4, #+0]
    419          }
   \                     ??SystemCoreClockUpdate_11:
   \   0000025E   0xBC30             POP      {R4,R5}
   \   00000260   0x4770             BX       LR               ;; return
    420          
    421            /* Determine clock frequency according to clock register values             */
    422          
    423          /**
    424           * Initialize the system
    425           *
    426           * @param  none
    427           * @return none
    428           *
    429           * @brief  Setup the microcontroller system.
    430           *         Initialize the System.
    431           */

   \                                 In section .text, align 2, keep-with-next
    432          void SystemInit (void)
    433          {
   \                     SystemInit:
   \   00000000   0xB580             PUSH     {R7,LR}
    434          #if (CLOCK_SETUP)                       /* Clock Setup                        */
    435            LPC_SC->SCS       = SCS_Val;
   \   00000002   0x....             LDR.N    R0,??DataTable1_8  ;; 0x400fc1a0
   \   00000004   0x2121             MOVS     R1,#+33
   \   00000006   0x6001             STR      R1,[R0, #+0]
    436            if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    437              while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
   \                     ??SystemInit_0:
   \   00000008   0x....             LDR.N    R0,??DataTable1_8  ;; 0x400fc1a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x0640             LSLS     R0,R0,#+25
   \   0000000E   0xD5FB             BPL.N    ??SystemInit_0
    438            }
    439          
    440            LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for sysclk/PLL0*/
   \   00000010   0x....             LDR.N    R0,??DataTable1_1  ;; 0x400fc10c
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x6001             STR      R1,[R0, #+0]
    441          
    442          #if (PLL0_SETUP)
    443            LPC_SC->PLL0CFG   = PLL0CFG_Val;
   \   00000016   0x....             LDR.N    R0,??DataTable1_13  ;; 0x400fc084
   \   00000018   0x2109             MOVS     R1,#+9
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    444            LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
   \   0000001C   0x....             LDR.N    R0,??DataTable1_14  ;; 0x400fc080
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x6001             STR      R1,[R0, #+0]
    445            LPC_SC->PLL0FEED  = 0xAA;
   \   00000022   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc08c
   \   00000024   0x21AA             MOVS     R1,#+170
   \   00000026   0x6001             STR      R1,[R0, #+0]
    446            LPC_SC->PLL0FEED  = 0x55;
   \   00000028   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400fc08c
   \   0000002A   0x2155             MOVS     R1,#+85
   \   0000002C   0x6001             STR      R1,[R0, #+0]
    447            while (!(LPC_SC->PLL0STAT & (1<<10)));/* Wait for PLOCK0                    */
   \                     ??SystemInit_1:
   \   0000002E   0x....             LDR.N    R0,??DataTable1_9  ;; 0x400fc088
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x0540             LSLS     R0,R0,#+21
   \   00000034   0xD5FB             BPL.N    ??SystemInit_1
    448          #endif
    449          
    450          #if (PLL1_SETUP)
    451            LPC_SC->PLL1CFG   = PLL1CFG_Val;
   \   00000036   0x....             LDR.N    R0,??DataTable1_16  ;; 0x400fc0a4
   \   00000038   0x2123             MOVS     R1,#+35
   \   0000003A   0x6001             STR      R1,[R0, #+0]
    452            LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
   \   0000003C   0x....             LDR.N    R0,??DataTable1_17  ;; 0x400fc0a0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x6001             STR      R1,[R0, #+0]
    453            LPC_SC->PLL1FEED  = 0xAA;
   \   00000042   0x....             LDR.N    R0,??DataTable1_18  ;; 0x400fc0ac
   \   00000044   0x21AA             MOVS     R1,#+170
   \   00000046   0x6001             STR      R1,[R0, #+0]
    454            LPC_SC->PLL1FEED  = 0x55;
   \   00000048   0x....             LDR.N    R0,??DataTable1_18  ;; 0x400fc0ac
   \   0000004A   0x2155             MOVS     R1,#+85
   \   0000004C   0x6001             STR      R1,[R0, #+0]
    455            while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
   \                     ??SystemInit_2:
   \   0000004E   0x....             LDR.N    R0,??DataTable1_12  ;; 0x400fc0a8
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x0540             LSLS     R0,R0,#+21
   \   00000054   0xD5FB             BPL.N    ??SystemInit_2
    456          #endif
    457          
    458            LPC_SC->CCLKSEL   = CCLKSEL_Val;      /* Setup Clock Divider                */
   \   00000056   0x....             LDR.N    R0,??DataTable1  ;; 0x400fc104
   \   00000058   0xF240 0x1101      MOVW     R1,#+257
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    459            LPC_SC->USBCLKSEL = USBCLKSEL_Val;    /* Setup USB Clock Divider            */
   \   0000005E   0x....             LDR.N    R0,??DataTable1_10  ;; 0x400fc108
   \   00000060   0xF240 0x2101      MOVW     R1,#+513
   \   00000064   0x6001             STR      R1,[R0, #+0]
    460            LPC_SC->EMCCLKSEL = EMCCLKSEL_Val;    /* EMC Clock Selection                */
   \   00000066   0x....             LDR.N    R0,??DataTable1_6  ;; 0x400fc100
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x6001             STR      R1,[R0, #+0]
    461            LPC_SC->PCLKSEL   = PCLKSEL_Val;      /* Peripheral Clock Selection         */
   \   0000006C   0x....             LDR.N    R0,??DataTable1_4  ;; 0x400fc1a8
   \   0000006E   0x2102             MOVS     R1,#+2
   \   00000070   0x6001             STR      R1,[R0, #+0]
    462            LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
   \   00000072   0x....             LDR.N    R0,??DataTable1_19  ;; 0x400fc0c4
   \   00000074   0x....             LDR.N    R1,??DataTable1_20  ;; 0x42887de
   \   00000076   0x6001             STR      R1,[R0, #+0]
    463            LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
   \   00000078   0x....             LDR.N    R0,??DataTable1_21  ;; 0x400fc1c8
   \   0000007A   0xF44F 0x7180      MOV      R1,#+256
   \   0000007E   0x6001             STR      R1,[R0, #+0]
    464          #endif
    465          
    466          #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
    467            LPC_SC->FLASHCFG  = FLASHCFG_Val|0x03A;
   \   00000080   0x....             LDR.N    R0,??DataTable1_22  ;; 0x400fc000
   \   00000082   0xF245 0x013A      MOVW     R1,#+20538
   \   00000086   0x6001             STR      R1,[R0, #+0]
    468          #endif
    469          ///#ifdef  __RAM_MODE__
    470            ///SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
    471          ///#else
    472            SCB->VTOR  = 0x00010000 & 0x3FFFFF80;
   \   00000088   0x....             LDR.N    R0,??DataTable1_23  ;; 0xe000ed08
   \   0000008A   0xF45F 0x3180      MOVS     R1,#+65536
   \   0000008E   0x6001             STR      R1,[R0, #+0]
    473          ///#endif
    474            SystemCoreClockUpdate();
   \   00000090   0x.... 0x....      BL       SystemCoreClockUpdate
    475          }
   \   00000094   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400FC104         DC32     0x400fc104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x400FC10C         DC32     0x400fc10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x00B71B00         DC32     0xb71b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x400FC1A8         DC32     0x400fc1a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     PeripheralClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x400FC100         DC32     0x400fc100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     EMCClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x400FC1A0         DC32     0x400fc1a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x400FC088         DC32     0x400fc088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x400FC108         DC32     0x400fc108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     USBClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x400FC0A8         DC32     0x400fc0a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x400FC084         DC32     0x400fc084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x400FC080         DC32     0x400fc080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x400FC08C         DC32     0x400fc08c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x400FC0A4         DC32     0x400fc0a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x400FC0A0         DC32     0x400fc0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x400FC0AC         DC32     0x400fc0ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x400FC0C4         DC32     0x400fc0c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x042887DE         DC32     0x42887de

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x400FC1C8         DC32     0x400fc1c8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x400FC000         DC32     0x400fc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SystemCoreClockUpdate
       8   SystemInit
         8   -> SystemCoreClockUpdate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  EMCClock
       4  PeripheralClock
       4  SystemCoreClock
     610  SystemCoreClockUpdate
     150  SystemInit
       4  USBClock

 
  16 bytes in section .data
 856 bytes in section .text
 
 856 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
